<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classBaseTemperature" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BaseTemperature</compoundname>
    <derivedcompoundref refid="classEspTemperature" prot="public" virt="non-virtual">EspTemperature</derivedcompoundref>
    <includes refid="BaseTemperature_8h" local="no">BaseTemperature.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BaseTemperature::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>BaseTemperature::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="794" column="8" bodyfile="inc/base/BaseTemperature.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" prot="protected" static="no" mutable="no">
        <type><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12" kindref="member">hf_temp_state_t</ref></type>
        <definition>hf_temp_state_t BaseTemperature::current_state_</definition>
        <argsstring></argsstring>
        <name>current_state_</name>
        <qualifiedname>BaseTemperature::current_state_</qualifiedname>
        <briefdescription>
<para>Current sensor state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="795" column="19" bodyfile="inc/base/BaseTemperature.h" bodystart="795" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classBaseTemperature_1a115e5a44b15a1f507cb7c9163d262a5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BaseTemperature::BaseTemperature</definition>
        <argsstring>(const BaseTemperature &amp;)=delete</argsstring>
        <name>BaseTemperature</name>
        <qualifiedname>BaseTemperature::BaseTemperature</qualifiedname>
        <param>
          <type>const <ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is deleted to avoid copying instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="418" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1aadc767ae37c6b15cbdc9571f688ebe97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref> &amp;</type>
        <definition>BaseTemperature &amp; BaseTemperature::operator=</definition>
        <argsstring>(const BaseTemperature &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>BaseTemperature::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Assignment operator is deleted to avoid copying instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="423" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a89a1c053462cbf314098834f7045ae74" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BaseTemperature::~BaseTemperature</definition>
        <argsstring>()=default</argsstring>
        <name>~BaseTemperature</name>
        <qualifiedname>BaseTemperature::~BaseTemperature</qualifiedname>
        <briefdescription>
<para>Virtual destructor for proper cleanup of derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="428" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a25b8ade43d75916d0d48464cfdcaa6c2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BaseTemperature::IsInitialized</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsInitialized</name>
        <qualifiedname>BaseTemperature::IsInitialized</qualifiedname>
        <briefdescription>
<para>Check if the temperature sensor is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="438" column="9" bodyfile="inc/base/BaseTemperature.h" bodystart="802" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BaseTemperature::EnsureInitialized</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnsureInitialized</name>
        <qualifiedname>BaseTemperature::EnsureInitialized</qualifiedname>
        <briefdescription>
<para>Ensures the sensor is initialized (lazy initialization). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized successfully, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="444" column="8" bodyfile="inc/base/BaseTemperature.h" bodystart="806" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a015ca3f4802b9a68140531f0175fd1bf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BaseTemperature::EnsureDeinitialized</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnsureDeinitialized</name>
        <qualifiedname>BaseTemperature::EnsureDeinitialized</qualifiedname>
        <briefdescription>
<para>Ensures the sensor is deinitialized (lazy deinitialization). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if deinitialized successfully, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="450" column="8" bodyfile="inc/base/BaseTemperature.h" bodystart="816" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a000ebd402761b9fd6fbb13f99070eb3a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12" kindref="member">hf_temp_state_t</ref></type>
        <definition>hf_temp_state_t BaseTemperature::GetState</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetState</name>
        <qualifiedname>BaseTemperature::GetState</qualifiedname>
        <briefdescription>
<para>Get current sensor state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current sensor state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="456" column="20" bodyfile="inc/base/BaseTemperature.h" bodystart="826" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a830094219d6b9572248927f6d1f2afd3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t BaseTemperature::ReadTemperatureCelsius</definition>
        <argsstring>(float *temperature_celsius) noexcept</argsstring>
        <name>ReadTemperatureCelsius</name>
        <qualifiedname>BaseTemperature::ReadTemperatureCelsius</qualifiedname>
        <param>
          <type>float *</type>
          <declname>temperature_celsius</declname>
        </param>
        <briefdescription>
<para>Read temperature in Celsius (blocking) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store temperature value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="492" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="841" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t BaseTemperature::ReadTemperature</definition>
        <argsstring>(hf_temp_reading_t *reading) noexcept</argsstring>
        <name>ReadTemperature</name>
        <qualifiedname>BaseTemperature::ReadTemperature</qualifiedname>
        <param>
          <type><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref> *</type>
          <declname>reading</declname>
        </param>
        <briefdescription>
<para>Read temperature with full information (blocking) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reading</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store complete reading information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="499" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="859" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a3e90ebd0d1a693c3ecf23cdc437217b6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t BaseTemperature::ReadTemperatureFahrenheit</definition>
        <argsstring>(float *temperature_fahrenheit) noexcept</argsstring>
        <name>ReadTemperatureFahrenheit</name>
        <qualifiedname>BaseTemperature::ReadTemperatureFahrenheit</qualifiedname>
        <param>
          <type>float *</type>
          <declname>temperature_fahrenheit</declname>
        </param>
        <briefdescription>
<para>Read temperature in Fahrenheit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature_fahrenheit</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store temperature value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="510" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="881" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1aeac0184a2d6cafb18917bf3d76c2fa13" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t BaseTemperature::ReadTemperatureKelvin</definition>
        <argsstring>(float *temperature_kelvin) noexcept</argsstring>
        <name>ReadTemperatureKelvin</name>
        <qualifiedname>BaseTemperature::ReadTemperatureKelvin</qualifiedname>
        <param>
          <type>float *</type>
          <declname>temperature_kelvin</declname>
        </param>
        <briefdescription>
<para>Read temperature in Kelvin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature_kelvin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store temperature value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="517" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="895" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a5c12d4ab74621f885e61c070ab854530" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t BaseTemperature::ReadTemperatureUnit</definition>
        <argsstring>(float *temperature, hf_temp_unit_t unit) noexcept</argsstring>
        <name>ReadTemperatureUnit</name>
        <qualifiedname>BaseTemperature::ReadTemperatureUnit</qualifiedname>
        <param>
          <type>float *</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type><ref refid="BaseTemperature_8h_1a3dd8e02ab9b61c125033ee186b5d26c8" kindref="member">hf_temp_unit_t</ref></type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Read temperature in specified unit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store temperature value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired temperature unit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="525" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="908" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a8250ed681311b1ae3732919df8d3962a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::GetSensorInfo</definition>
        <argsstring>(hf_temp_sensor_info_t *info) const noexcept=0</argsstring>
        <name>GetSensorInfo</name>
        <qualifiedname>BaseTemperature::GetSensorInfo</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a31ccbc056a1b393a230ab8a2614bba2f">GetSensorInfo</reimplementedby>
        <param>
          <type><ref refid="structhf__temp__sensor__info__t" kindref="compound">hf_temp_sensor_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get sensor information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store sensor information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="536" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a765c86c7680b43f7d075b9f392188611" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>virtual hf_u32_t BaseTemperature::GetCapabilities</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>GetCapabilities</name>
        <qualifiedname>BaseTemperature::GetCapabilities</qualifiedname>
        <reimplementedby refid="classEspTemperature_1af42132c1ba77f8392eb6e7a5b055e7e2">GetCapabilities</reimplementedby>
        <briefdescription>
<para>Get sensor capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Capabilities flags (hf_temp_capabilities_t) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="542" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1ad97ed939d85e2686653d76967c53f790" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BaseTemperature::HasCapability</definition>
        <argsstring>(hf_temp_capabilities_t capability) const noexcept</argsstring>
        <name>HasCapability</name>
        <qualifiedname>BaseTemperature::HasCapability</qualifiedname>
        <param>
          <type><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cb" kindref="member">hf_temp_capabilities_t</ref></type>
          <declname>capability</declname>
        </param>
        <briefdescription>
<para>Check if a specific capability is supported. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capability</parametername>
</parameternamelist>
<parameterdescription>
<para>Capability to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if supported, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="549" column="9" bodyfile="inc/base/BaseTemperature.h" bodystart="830" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a1bfe9f1a1069222166008b4dafe5a282" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::SetRange</definition>
        <argsstring>(float min_celsius, float max_celsius) noexcept</argsstring>
        <name>SetRange</name>
        <qualifiedname>BaseTemperature::SetRange</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a92b30bf532e07d1f1927d4fccf5322ba">SetRange</reimplementedby>
        <param>
          <type>float</type>
          <declname>min_celsius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_celsius</declname>
        </param>
        <briefdescription>
<para>Set temperature measurement range (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum temperature in Celsius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum temperature in Celsius </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="561" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="561" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a21d2b3e6c1855f666d5dc2856e9f8cea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::GetRange</definition>
        <argsstring>(float *min_celsius, float *max_celsius) const noexcept</argsstring>
        <name>GetRange</name>
        <qualifiedname>BaseTemperature::GetRange</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a5763ab0b92fff25c5854bcfb04a8ba9f">GetRange</reimplementedby>
        <param>
          <type>float *</type>
          <declname>min_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max_celsius</declname>
        </param>
        <briefdescription>
<para>Get temperature measurement range (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store minimum temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store maximum temperature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="571" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="571" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a93d2d276ad511dfa7c405a88c6ea0e01" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::SetResolution</definition>
        <argsstring>(float resolution_celsius) noexcept</argsstring>
        <name>SetResolution</name>
        <qualifiedname>BaseTemperature::SetResolution</qualifiedname>
        <param>
          <type>float</type>
          <declname>resolution_celsius</declname>
        </param>
        <briefdescription>
<para>Set measurement resolution (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resolution_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Resolution in Celsius </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="580" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="580" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a5362eaf0cb2478a4e060d8dfca70f3c8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::GetResolution</definition>
        <argsstring>(float *resolution_celsius) const noexcept</argsstring>
        <name>GetResolution</name>
        <qualifiedname>BaseTemperature::GetResolution</qualifiedname>
        <reimplementedby refid="classEspTemperature_1ae1bfe0b1ceeb20ea8eb5010ef09f832d">GetResolution</reimplementedby>
        <param>
          <type>float *</type>
          <declname>resolution_celsius</declname>
        </param>
        <briefdescription>
<para>Get measurement resolution (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resolution_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="589" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="589" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a483f6f9ec09ecd6e8cd32c9f61836763" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::SetThresholds</definition>
        <argsstring>(float low_threshold_celsius, float high_threshold_celsius) noexcept</argsstring>
        <name>SetThresholds</name>
        <qualifiedname>BaseTemperature::SetThresholds</qualifiedname>
        <reimplementedby refid="classEspTemperature_1aaeda9f32dfc75e5ca2ab15142d0c9998">SetThresholds</reimplementedby>
        <param>
          <type>float</type>
          <declname>low_threshold_celsius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>high_threshold_celsius</declname>
        </param>
        <briefdescription>
<para>Set temperature thresholds (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Low temperature threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>High temperature threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="599" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="599" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a692b8120d0ceb3ae699cd2bd0981b993" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::GetThresholds</definition>
        <argsstring>(float *low_threshold_celsius, float *high_threshold_celsius) const noexcept</argsstring>
        <name>GetThresholds</name>
        <qualifiedname>BaseTemperature::GetThresholds</qualifiedname>
        <reimplementedby refid="classEspTemperature_1ae122e823c11b55550cb91af01e26461e">GetThresholds</reimplementedby>
        <param>
          <type>float *</type>
          <declname>low_threshold_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>high_threshold_celsius</declname>
        </param>
        <briefdescription>
<para>Get temperature thresholds (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store low threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store high threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="610" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a210f2f34d7f356d8ff7f0531031f7856" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::EnableThresholdMonitoring</definition>
        <argsstring>(hf_temp_threshold_callback_t callback, void *user_data) noexcept</argsstring>
        <name>EnableThresholdMonitoring</name>
        <qualifiedname>BaseTemperature::EnableThresholdMonitoring</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a1b34d89cb1cc7b03100674bea303ab5a">EnableThresholdMonitoring</reimplementedby>
        <param>
          <type><ref refid="BaseTemperature_8h_1a2672848972ed3dbd28859299c8862f6b" kindref="member">hf_temp_threshold_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Enable threshold monitoring (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for threshold events </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="621" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1ad0326eb2b71271b06e2eccffe79561cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::DisableThresholdMonitoring</definition>
        <argsstring>() noexcept</argsstring>
        <name>DisableThresholdMonitoring</name>
        <qualifiedname>BaseTemperature::DisableThresholdMonitoring</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a4e1ee5a920aa4caaa151d036b79db369">DisableThresholdMonitoring</reimplementedby>
        <briefdescription>
<para>Disable threshold monitoring (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="630" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="630" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1afd5288a4ce54793f06fab19960b38253" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::StartContinuousMonitoring</definition>
        <argsstring>(hf_u32_t sample_rate_hz, hf_temp_reading_callback_t callback, void *user_data) noexcept</argsstring>
        <name>StartContinuousMonitoring</name>
        <qualifiedname>BaseTemperature::StartContinuousMonitoring</qualifiedname>
        <reimplementedby refid="classEspTemperature_1acc1ea9c3a109b70bd67e4f285594e474">StartContinuousMonitoring</reimplementedby>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>sample_rate_hz</declname>
        </param>
        <param>
          <type><ref refid="BaseTemperature_8h_1ab15b84e22c00839c9e87a3f363efae2d" kindref="member">hf_temp_reading_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Start continuous temperature monitoring (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_rate_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampling rate in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for each reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="641" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="641" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a30f3527c16c76f65e2deb4a89412e231" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::StopContinuousMonitoring</definition>
        <argsstring>() noexcept</argsstring>
        <name>StopContinuousMonitoring</name>
        <qualifiedname>BaseTemperature::StopContinuousMonitoring</qualifiedname>
        <reimplementedby refid="classEspTemperature_1aa34b741f4daf7a52dc832e65dc58e34f">StopContinuousMonitoring</reimplementedby>
        <briefdescription>
<para>Stop continuous temperature monitoring (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="651" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="651" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1ab965dfed096914ca4a8e733b17bc978e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseTemperature::IsMonitoringActive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsMonitoringActive</name>
        <qualifiedname>BaseTemperature::IsMonitoringActive</qualifiedname>
        <reimplementedby refid="classEspTemperature_1abd650022450dbbcbba8fed4085386da3">IsMonitoringActive</reimplementedby>
        <briefdescription>
<para>Check if continuous monitoring is active (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if monitoring is active, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="659" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="659" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a4d84a21b7f330d3bc80accbd9f26b1c7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::Calibrate</definition>
        <argsstring>(float reference_temperature_celsius) noexcept</argsstring>
        <name>Calibrate</name>
        <qualifiedname>BaseTemperature::Calibrate</qualifiedname>
        <param>
          <type>float</type>
          <declname>reference_temperature_celsius</declname>
        </param>
        <briefdescription>
<para>Perform sensor calibration (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference_temperature_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Known reference temperature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="668" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="668" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a97cd78cf3f336211747e15a1c25d61ee" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::SetCalibrationOffset</definition>
        <argsstring>(float offset_celsius) noexcept</argsstring>
        <name>SetCalibrationOffset</name>
        <qualifiedname>BaseTemperature::SetCalibrationOffset</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a2665b30cb4301b8fccb577f74e4fa7fc">SetCalibrationOffset</reimplementedby>
        <param>
          <type>float</type>
          <declname>offset_celsius</declname>
        </param>
        <briefdescription>
<para>Set calibration offset (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Calibration offset in Celsius </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="677" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="677" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a55f58d0cccee590dd10e55c2668e7f0b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::GetCalibrationOffset</definition>
        <argsstring>(float *offset_celsius) const noexcept</argsstring>
        <name>GetCalibrationOffset</name>
        <qualifiedname>BaseTemperature::GetCalibrationOffset</qualifiedname>
        <reimplementedby refid="classEspTemperature_1ad6ee47301f32825678e5838b453bd1f1">GetCalibrationOffset</reimplementedby>
        <param>
          <type>float *</type>
          <declname>offset_celsius</declname>
        </param>
        <briefdescription>
<para>Get calibration offset (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store calibration offset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="686" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="686" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a2be35c2e9f2cd233d77353591bfc3f53" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::ResetCalibration</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetCalibration</name>
        <qualifiedname>BaseTemperature::ResetCalibration</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a413c8ed18407669f80b88625990619d9">ResetCalibration</reimplementedby>
        <briefdescription>
<para>Reset calibration to default (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="694" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="694" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1abbef25249b2e935e8954a150519b2342" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::EnterSleepMode</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnterSleepMode</name>
        <qualifiedname>BaseTemperature::EnterSleepMode</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a9f5edd743061fbb9b4e0929f9126a04b">EnterSleepMode</reimplementedby>
        <briefdescription>
<para>Enter low power mode (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="702" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="702" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a52a0318d160c45fdee55b15d7148856c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::ExitSleepMode</definition>
        <argsstring>() noexcept</argsstring>
        <name>ExitSleepMode</name>
        <qualifiedname>BaseTemperature::ExitSleepMode</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a638b5bddaec8dc5693739fc238ad6d4d">ExitSleepMode</reimplementedby>
        <briefdescription>
<para>Exit low power mode (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="710" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="710" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a65f6deb4af75c89ae44723015731d195" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseTemperature::IsSleeping</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsSleeping</name>
        <qualifiedname>BaseTemperature::IsSleeping</qualifiedname>
        <reimplementedby refid="classEspTemperature_1ac6c685911fa0fe6bb38e1d2d8299ad2d">IsSleeping</reimplementedby>
        <briefdescription>
<para>Check if sensor is in sleep mode (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in sleep mode, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="718" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="718" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a0b23a97aea3d8455e458577c7ff937e3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::SelfTest</definition>
        <argsstring>() noexcept</argsstring>
        <name>SelfTest</name>
        <qualifiedname>BaseTemperature::SelfTest</qualifiedname>
        <reimplementedby refid="classEspTemperature_1aed9e41b1f3d2c357d6ecd28728e49aa2">SelfTest</reimplementedby>
        <briefdescription>
<para>Perform sensor self-test (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="726" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="726" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a201bfff0c78242bec04cadd6363d7b5d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::CheckHealth</definition>
        <argsstring>() noexcept</argsstring>
        <name>CheckHealth</name>
        <qualifiedname>BaseTemperature::CheckHealth</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a0715fa9a6cd6888fa147ee67b428f193">CheckHealth</reimplementedby>
        <briefdescription>
<para>Check sensor health status (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS if healthy, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="734" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="734" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a67fdd88218e46666fb74cc5bf561176f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::GetStatistics</definition>
        <argsstring>(hf_temp_statistics_t &amp;statistics) noexcept</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>BaseTemperature::GetStatistics</qualifiedname>
        <reimplementedby refid="classEspTemperature_1af467995c9463449686b77f02be223fa9">GetStatistics</reimplementedby>
        <param>
          <type><ref refid="structhf__temp__statistics__t" kindref="compound">hf_temp_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get operation statistics (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to statistics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="743" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="743" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a2634cc03a24c168a4bd5c8f9d2bd5ef8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::GetDiagnostics</definition>
        <argsstring>(hf_temp_diagnostics_t &amp;diagnostics) noexcept</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>BaseTemperature::GetDiagnostics</qualifiedname>
        <reimplementedby refid="classEspTemperature_1af91cca81090fa226453fc793f5305ec6">GetDiagnostics</reimplementedby>
        <param>
          <type><ref refid="structhf__temp__diagnostics__t" kindref="compound">hf_temp_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get diagnostic information (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to diagnostics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="753" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="753" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a149ff046e0cb000bf0172dce28bc17be" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::ResetStatistics</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetStatistics</name>
        <qualifiedname>BaseTemperature::ResetStatistics</qualifiedname>
        <reimplementedby refid="classEspTemperature_1ac22266bb32b95ed3587ce5fd6efc6c94">ResetStatistics</reimplementedby>
        <briefdescription>
<para>Reset operation statistics (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="762" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="762" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a21a976418e428078d9ec76521a6ac17b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::ResetDiagnostics</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetDiagnostics</name>
        <qualifiedname>BaseTemperature::ResetDiagnostics</qualifiedname>
        <reimplementedby refid="classEspTemperature_1ab81713abcd8583a401154ccc7617cb4e">ResetDiagnostics</reimplementedby>
        <briefdescription>
<para>Reset diagnostic information (advanced feature) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success, TEMP_ERR_UNSUPPORTED_OPERATION if not supported) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="770" column="25" bodyfile="inc/base/BaseTemperature.h" bodystart="770" bodyend="772"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBaseTemperature_1ad19ade5e58bb71af6ae98e8e34d477be" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BaseTemperature::Initialize</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>Initialize</name>
        <qualifiedname>BaseTemperature::Initialize</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a92699d024919bf1f5f40cfc2a05c5465">Initialize</reimplementedby>
        <briefdescription>
<para>Platform-specific implementation for initialization. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialization successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="467" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1ac2af8a969cf2c755f52ba302645a4b87" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BaseTemperature::Deinitialize</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>BaseTemperature::Deinitialize</qualifiedname>
        <reimplementedby refid="classEspTemperature_1acee4cee66dd94a80f8ebd8697718560e">Deinitialize</reimplementedby>
        <briefdescription>
<para>Platform-specific implementation for deinitialization. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if deinitialization successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="473" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1af171259d6aa00825f0b8743d2331850e" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>virtual hf_temp_err_t BaseTemperature::ReadTemperatureCelsiusImpl</definition>
        <argsstring>(float *temperature_celsius) noexcept=0</argsstring>
        <name>ReadTemperatureCelsiusImpl</name>
        <qualifiedname>BaseTemperature::ReadTemperatureCelsiusImpl</qualifiedname>
        <reimplementedby refid="classEspTemperature_1a0357ccb31a009ae7b55ca02db5e0c58a">ReadTemperatureCelsiusImpl</reimplementedby>
        <param>
          <type>float *</type>
          <declname>temperature_celsius</declname>
        </param>
        <briefdescription>
<para>Platform-specific implementation for reading temperature in Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store temperature value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="480" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1a7570da5a5b76362a826c760c10bac847" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BaseTemperature::BaseTemperature</definition>
        <argsstring>() noexcept</argsstring>
        <name>BaseTemperature</name>
        <qualifiedname>BaseTemperature::BaseTemperature</qualifiedname>
        <briefdescription>
<para>Protected default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="782" column="3" bodyfile="inc/base/BaseTemperature.h" bodystart="782" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classBaseTemperature_1ae37d98256e55529d9d78622db0c34019" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t BaseTemperature::ValidateBasicOperation</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ValidateBasicOperation</name>
        <qualifiedname>BaseTemperature::ValidateBasicOperation</qualifiedname>
        <briefdescription>
<para>Protected helper to validate basic operation preconditions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS if valid to proceed) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseTemperature.h" line="788" column="17" bodyfile="inc/base/BaseTemperature.h" bodystart="834" bodyend="839"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Abstract base class for all temperature sensor implementations. </para>
    </briefdescription>
    <detaileddescription>
<para>This class defines the common interface that all temperature sensor implementations must follow. It provides a consistent API for temperature measurement, configuration, and monitoring across different sensor types and platforms.</para>
<para>Key features:<itemizedlist>
<listitem><para>Abstract interface for temperature reading</para>
</listitem><listitem><para>Standardized error handling</para>
</listitem><listitem><para>Support for various temperature units</para>
</listitem><listitem><para>Threshold monitoring capabilities (advanced feature)</para>
</listitem><listitem><para>Power management support (advanced feature)</para>
</listitem><listitem><para>Calibration interface (advanced feature)</para>
</listitem><listitem><para>Lazy initialization pattern</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This is a header-only abstract base class </para>
</simplesect>
<simplesect kind="note"><para>All concrete implementations must inherit from this class </para>
</simplesect>
<simplesect kind="note"><para>Thread safety is implementation-dependent </para>
</simplesect>
<simplesect kind="note"><para>Advanced features return TEMP_ERR_UNSUPPORTED_OPERATION if not supported </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BaseTemperature</label>
        <link refid="classBaseTemperature"/>
      </node>
      <node id="2">
        <label>EspTemperature</label>
        <link refid="classEspTemperature"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="inc/base/BaseTemperature.h" line="409" column="1" bodyfile="inc/base/BaseTemperature.h" bodystart="409" bodyend="796"/>
    <listofallmembers>
      <member refid="classBaseTemperature_1a115e5a44b15a1f507cb7c9163d262a5a" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>BaseTemperature</name></member>
      <member refid="classBaseTemperature_1a7570da5a5b76362a826c760c10bac847" prot="protected" virt="non-virtual"><scope>BaseTemperature</scope><name>BaseTemperature</name></member>
      <member refid="classBaseTemperature_1a4d84a21b7f330d3bc80accbd9f26b1c7" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>Calibrate</name></member>
      <member refid="classBaseTemperature_1a201bfff0c78242bec04cadd6363d7b5d" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>CheckHealth</name></member>
      <member refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" prot="protected" virt="non-virtual"><scope>BaseTemperature</scope><name>current_state_</name></member>
      <member refid="classBaseTemperature_1ac2af8a969cf2c755f52ba302645a4b87" prot="protected" virt="pure-virtual"><scope>BaseTemperature</scope><name>Deinitialize</name></member>
      <member refid="classBaseTemperature_1ad0326eb2b71271b06e2eccffe79561cd" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>DisableThresholdMonitoring</name></member>
      <member refid="classBaseTemperature_1a210f2f34d7f356d8ff7f0531031f7856" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>EnableThresholdMonitoring</name></member>
      <member refid="classBaseTemperature_1a015ca3f4802b9a68140531f0175fd1bf" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>EnsureInitialized</name></member>
      <member refid="classBaseTemperature_1abbef25249b2e935e8954a150519b2342" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>EnterSleepMode</name></member>
      <member refid="classBaseTemperature_1a52a0318d160c45fdee55b15d7148856c" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>ExitSleepMode</name></member>
      <member refid="classBaseTemperature_1a55f58d0cccee590dd10e55c2668e7f0b" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>GetCalibrationOffset</name></member>
      <member refid="classBaseTemperature_1a765c86c7680b43f7d075b9f392188611" prot="public" virt="pure-virtual"><scope>BaseTemperature</scope><name>GetCapabilities</name></member>
      <member refid="classBaseTemperature_1a2634cc03a24c168a4bd5c8f9d2bd5ef8" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>GetDiagnostics</name></member>
      <member refid="classBaseTemperature_1a21d2b3e6c1855f666d5dc2856e9f8cea" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>GetRange</name></member>
      <member refid="classBaseTemperature_1a5362eaf0cb2478a4e060d8dfca70f3c8" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>GetResolution</name></member>
      <member refid="classBaseTemperature_1a8250ed681311b1ae3732919df8d3962a" prot="public" virt="pure-virtual"><scope>BaseTemperature</scope><name>GetSensorInfo</name></member>
      <member refid="classBaseTemperature_1a000ebd402761b9fd6fbb13f99070eb3a" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>GetState</name></member>
      <member refid="classBaseTemperature_1a67fdd88218e46666fb74cc5bf561176f" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>GetStatistics</name></member>
      <member refid="classBaseTemperature_1a692b8120d0ceb3ae699cd2bd0981b993" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>GetThresholds</name></member>
      <member refid="classBaseTemperature_1ad97ed939d85e2686653d76967c53f790" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>HasCapability</name></member>
      <member refid="classBaseTemperature_1ad19ade5e58bb71af6ae98e8e34d477be" prot="protected" virt="pure-virtual"><scope>BaseTemperature</scope><name>Initialize</name></member>
      <member refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" prot="protected" virt="non-virtual"><scope>BaseTemperature</scope><name>initialized_</name></member>
      <member refid="classBaseTemperature_1a25b8ade43d75916d0d48464cfdcaa6c2" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>IsInitialized</name></member>
      <member refid="classBaseTemperature_1ab965dfed096914ca4a8e733b17bc978e" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>IsMonitoringActive</name></member>
      <member refid="classBaseTemperature_1a65f6deb4af75c89ae44723015731d195" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>IsSleeping</name></member>
      <member refid="classBaseTemperature_1aadc767ae37c6b15cbdc9571f688ebe97" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>operator=</name></member>
      <member refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>ReadTemperature</name></member>
      <member refid="classBaseTemperature_1a830094219d6b9572248927f6d1f2afd3" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>ReadTemperatureCelsius</name></member>
      <member refid="classBaseTemperature_1af171259d6aa00825f0b8743d2331850e" prot="protected" virt="pure-virtual"><scope>BaseTemperature</scope><name>ReadTemperatureCelsiusImpl</name></member>
      <member refid="classBaseTemperature_1a3e90ebd0d1a693c3ecf23cdc437217b6" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>ReadTemperatureFahrenheit</name></member>
      <member refid="classBaseTemperature_1aeac0184a2d6cafb18917bf3d76c2fa13" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>ReadTemperatureKelvin</name></member>
      <member refid="classBaseTemperature_1a5c12d4ab74621f885e61c070ab854530" prot="public" virt="non-virtual"><scope>BaseTemperature</scope><name>ReadTemperatureUnit</name></member>
      <member refid="classBaseTemperature_1a2be35c2e9f2cd233d77353591bfc3f53" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>ResetCalibration</name></member>
      <member refid="classBaseTemperature_1a21a976418e428078d9ec76521a6ac17b" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>ResetDiagnostics</name></member>
      <member refid="classBaseTemperature_1a149ff046e0cb000bf0172dce28bc17be" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>ResetStatistics</name></member>
      <member refid="classBaseTemperature_1a0b23a97aea3d8455e458577c7ff937e3" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>SelfTest</name></member>
      <member refid="classBaseTemperature_1a97cd78cf3f336211747e15a1c25d61ee" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>SetCalibrationOffset</name></member>
      <member refid="classBaseTemperature_1a1bfe9f1a1069222166008b4dafe5a282" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>SetRange</name></member>
      <member refid="classBaseTemperature_1a93d2d276ad511dfa7c405a88c6ea0e01" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>SetResolution</name></member>
      <member refid="classBaseTemperature_1a483f6f9ec09ecd6e8cd32c9f61836763" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>SetThresholds</name></member>
      <member refid="classBaseTemperature_1afd5288a4ce54793f06fab19960b38253" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>StartContinuousMonitoring</name></member>
      <member refid="classBaseTemperature_1a30f3527c16c76f65e2deb4a89412e231" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>StopContinuousMonitoring</name></member>
      <member refid="classBaseTemperature_1ae37d98256e55529d9d78622db0c34019" prot="protected" virt="non-virtual"><scope>BaseTemperature</scope><name>ValidateBasicOperation</name></member>
      <member refid="classBaseTemperature_1a89a1c053462cbf314098834f7045ae74" prot="public" virt="virtual"><scope>BaseTemperature</scope><name>~BaseTemperature</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
