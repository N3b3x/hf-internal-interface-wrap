<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="UartComprehensiveTest_8cpp" kind="file" language="C++">
    <compoundname>UartComprehensiveTest.cpp</compoundname>
    <includes refid="TestFramework_8h" local="yes">TestFramework.h</includes>
    <includes refid="BaseUart_8h" local="yes">base/BaseUart.h</includes>
    <includes refid="EspGpio_8h" local="yes">mcu/esp32/EspGpio.h</includes>
    <includes refid="EspUart_8h" local="yes">mcu/esp32/EspUart.h</includes>
    <includes refid="EspTypes__UART_8h" local="yes">mcu/esp32/utils/EspTypes_UART.h</includes>
    <includes local="yes">driver/uart.h</includes>
    <includes local="yes">soc/uart_reg.h</includes>
    <incdepgraph>
      <node id="2">
        <label>TestFramework.h</label>
        <link refid="TestFramework_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>examples/esp32/main/UartComprehensiveTest.cpp</label>
        <link refid="UartComprehensiveTest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>BaseAdc.h</label>
        <link refid="BaseAdc_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>BaseCan.h</label>
        <link refid="BaseCan_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>BaseGpio.h</label>
        <link refid="BaseGpio_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>BaseI2c.h</label>
        <link refid="BaseI2c_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>BasePio.h</label>
        <link refid="BasePio_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>../../../base/BasePwm.h</label>
        <link refid="BasePwm_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>BaseSpi.h</label>
        <link refid="BaseSpi_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>base/BaseUart.h</label>
        <link refid="BaseUart_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>mcu/esp32/EspGpio.h</label>
        <link refid="EspGpio_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>mcu/esp32/EspUart.h</label>
        <link refid="EspUart_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>utils/EspTypes.h</label>
        <link refid="EspTypes_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>EspTypes_ADC.h</label>
        <link refid="EspTypes__ADC_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>EspTypes_Base.h</label>
        <link refid="EspTypes__Base_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>EspTypes_CAN.h</label>
        <link refid="EspTypes__CAN_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>EspTypes_GPIO.h</label>
        <link refid="EspTypes__GPIO_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>EspTypes_I2C.h</label>
        <link refid="EspTypes__I2C_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>EspTypes_PIO.h</label>
        <link refid="EspTypes__PIO_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>EspTypes_PWM.h</label>
        <link refid="EspTypes__PWM_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>EspTypes_SPI.h</label>
        <link refid="EspTypes__SPI_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>EspTypes_Timer.h</label>
        <link refid="EspTypes__Timer_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>EspTypes_UART.h</label>
        <link refid="EspTypes__UART_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>../../utils/McuSelect.h</label>
        <link refid="McuSelect_8h"/>
      </node>
      <node id="26">
        <label>RtosMutex.h</label>
        <link refid="RtosMutex_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>array</label>
      </node>
      <node id="21">
        <label>atomic</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="24">
        <label>cstring</label>
      </node>
      <node id="13">
        <label>driver/gpio.h</label>
      </node>
      <node id="37">
        <label>driver/i2c.h</label>
      </node>
      <node id="44">
        <label>driver/spi_master.h</label>
      </node>
      <node id="49">
        <label>driver/uart.h</label>
      </node>
      <node id="30">
        <label>esp_adc/adc_continuous.h</label>
      </node>
      <node id="31">
        <label>esp_adc/adc_oneshot.h</label>
      </node>
      <node id="14">
        <label>esp_attr.h</label>
      </node>
      <node id="3">
        <label>esp_log.h</label>
      </node>
      <node id="4">
        <label>esp_timer.h</label>
      </node>
      <node id="5">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="6">
        <label>freertos/queue.h</label>
      </node>
      <node id="7">
        <label>freertos/semphr.h</label>
      </node>
      <node id="8">
        <label>freertos/task.h</label>
      </node>
      <node id="16">
        <label>functional</label>
      </node>
      <node id="11">
        <label>limits</label>
      </node>
      <node id="48">
        <label>memory</label>
      </node>
      <node id="50">
        <label>soc/uart_reg.h</label>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
      <node id="17">
        <label>string_view</label>
      </node>
      <node id="36">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;UART_Test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="33" column="19" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" prot="public" static="yes" mutable="no">
        <type><ref refid="structTestResults" kindref="compound">TestResults</ref></type>
        <definition>TestResults g_test_results</definition>
        <argsstring></argsstring>
        <name>g_test_results</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="34" column="20" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1aa1f7c585d82c1d233b4192ddc613b991" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t TEST_UART_PORT_1</definition>
        <argsstring></argsstring>
        <name>TEST_UART_PORT_1</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="38" column="26" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1ac0abc03fab30b9b4b8a1e6e324c5a0b2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>constexpr hf_u32_t TEST_BAUD_RATE</definition>
        <argsstring></argsstring>
        <name>TEST_BAUD_RATE</name>
        <initializer>= 115200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="39" column="27" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1ac62b2a82f665fdb67fa56d8bbfea7a19" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t TEST_TX_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_TX_PIN</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="40" column="26" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a07f412588e577fd9a0c9b9a9df46491c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t TEST_RX_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_RX_PIN</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="41" column="26" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a1713dc81bb111346bdb769a03b76ddb4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t TEST_RTS_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_RTS_PIN</name>
        <initializer>= 6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="42" column="26" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a92fc927457f3740173fadd7c888f0792" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t TEST_CTS_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_CTS_PIN</name>
        <initializer>= 7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="43" column="26" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a3e7fc6c5af3eec668ff7db63cc3d9cfe" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t TEST_PATTERN</definition>
        <argsstring></argsstring>
        <name>TEST_PATTERN</name>
        <initializer>= 0x0A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="46" column="22" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a04194724aa6e02f90e439c01c215535b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
        <definition>constexpr hf_u16_t TEST_BUFFER_SIZE</definition>
        <argsstring></argsstring>
        <name>TEST_BUFFER_SIZE</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="49" column="27" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_event_callback_triggered</definition>
        <argsstring></argsstring>
        <name>g_event_callback_triggered</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="52" column="13" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a613aeb96d7761d78fd0a5b093f855e6f" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_break_callback_triggered</definition>
        <argsstring></argsstring>
        <name>g_break_callback_triggered</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="53" column="13" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a1df9dec14ff53faf4a841209bfeb08cd" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t g_user_event_task_handle</definition>
        <argsstring></argsstring>
        <name>g_user_event_task_handle</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="56" column="21" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a388be974de32dcf4f7b9a12c610df22a" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_pattern_detected</definition>
        <argsstring></argsstring>
        <name>g_pattern_detected</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="57" column="13" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int g_pattern_position</definition>
        <argsstring></argsstring>
        <name>g_pattern_position</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="58" column="12" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a0540d12d9e183b74357739e1a645a5f0" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_stop_event_task</definition>
        <argsstring></argsstring>
        <name>g_stop_event_task</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="59" column="13" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CORE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CORE_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="67" column="23" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a5dae68800c6d4c45ad3c26ae338538ad" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_BASIC_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_BASIC_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="68" column="23" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ADVANCED_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ADVANCED_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="69" column="23" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a0a8d4d070d9a30498e4b478604a72dfa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CALLBACK_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CALLBACK_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="71" column="23" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1aaf2cc16434e0f7cca58940f8804c59b1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ESP_SPECIFIC_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ESP_SPECIFIC_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="73" column="23" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a987327fdfab23d745976f9d14327f810" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_EVENT_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_EVENT_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="74" column="23" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="UartComprehensiveTest_8cpp_1a1e04670c744f4deed0f91ee0315a0ecc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CLEANUP_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CLEANUP_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="75" column="23" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="75" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ac8e0d768a7b27970a27fd6f47b35a278" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_construction</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_construction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="318" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="318" bodyend="350" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="78" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a96732d2453431f2a10801aca28f87ef2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_initialization</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_initialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="352" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="352" bodyend="386" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ae7d6a88afbea00b65d07f2f16489ee09" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_basic_communication</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_basic_communication</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="388" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="388" bodyend="426" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a54ed1f691466c4f1be25f4244b503215" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_baud_rate_configuration</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_baud_rate_configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="428" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="428" bodyend="469" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a4da49feeafcb70aed2f368b8e891d7f5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_flow_control</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_flow_control</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="471" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="471" bodyend="533" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a6b520324bac3af608d188cf27d87b09b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_pattern_detection</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_pattern_detection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="535" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="535" bodyend="827" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1adeb9395ef6454af2b1e913407b9f7cea" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_buffer_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_buffer_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="829" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="829" bodyend="880" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ab5c278ed08ee85a09c9121529e14b1e5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_advanced_features</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_advanced_features</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="882" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="882" bodyend="959" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1aa317317d3687febfd06a80dbec71dd12" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_communication_modes</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_communication_modes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="961" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="961" bodyend="1028" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a1115c7fc5d104b77f83335969c3d34b9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_async_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_async_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1030" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1030" bodyend="1088" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1abd61d20bea3c0c5a2f29ac2d209b750b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_callbacks</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_callbacks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1090" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1090" bodyend="1145" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a5917129d95ebe007f1077769fede64f1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_statistics_diagnostics</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_statistics_diagnostics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1147" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1147" bodyend="1203" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ae5a428b08a1c71ebdd8dfc1e60410b09" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_printf_support</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_printf_support</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1205" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1205" bodyend="1242" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1afdc0b960eadfff575ebbed04ee6e8558" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_error_handling</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_error_handling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1244" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1244" bodyend="1292" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ae941fce65170b2d06aeb7cabc286f459" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_esp32c6_features</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_esp32c6_features</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1294" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1294" bodyend="1344" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ae9f081767d0cc270b345c2ed1dbc84d2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_performance</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_performance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1346" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1346" bodyend="1387" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ac4369d3c587d1df18e5a81e894f1a202" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_callback_verification</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_callback_verification</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1389" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1389" bodyend="1497" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="94" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a77cc6cbaed3a439f7b4a10a8dfbd734f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_user_event_task</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_user_event_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1499" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1499" bodyend="1622" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a371a3496edbd32ad6106bbfa596c2e60" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_event_driven_pattern_detection</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_event_driven_pattern_detection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1628" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1628" bodyend="1873" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1ae72ee127a4e8aa04256bba3a41f99d72" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_uart_cleanup</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_uart_cleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1875" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1875" bodyend="1900" declfile="examples/esp32/main/UartComprehensiveTest.cpp" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1af6e3f351682e543379bc94e13ffbed96" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool uart_event_callback</definition>
        <argsstring>(const hf_uart_event_t *event, void *user_data) noexcept</argsstring>
        <name>uart_event_callback</name>
        <param>
          <type>const <ref refid="structhf__uart__event__t" kindref="compound">hf_uart_event_t</ref> *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="103" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="103" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a9dad16181f55c9fa8cfb7c5fd3e7efa3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool uart_break_callback</definition>
        <argsstring>(hf_u32_t break_duration, void *user_data) noexcept</argsstring>
        <name>uart_break_callback</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>break_duration</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="139" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1adbdbd4300e13490f7d2251d21ae89a00" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void user_uart_event_task</definition>
        <argsstring>(void *arg) noexcept</argsstring>
        <name>user_uart_event_task</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="149" column="13" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="149" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool flush_uart_buffers</definition>
        <argsstring>(EspUart *uart) noexcept</argsstring>
        <name>flush_uart_buffers</name>
        <param>
          <type><ref refid="classEspUart" kindref="compound">EspUart</ref> *</type>
          <declname>uart</declname>
        </param>
        <briefdescription>
<para>Flush UART buffers before each test to ensure clean test isolation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart</parametername>
</parameternamelist>
<parameterdescription>
<para>UART instance to flush </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if flush successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="253" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="253" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1aebb05f3a64662192f3f8433454914b53" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref></type>
        <definition>hf_uart_config_t create_test_config</definition>
        <argsstring>(hf_u8_t port=TEST_UART_PORT_1) noexcept</argsstring>
        <name>create_test_config</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>port</declname>
          <defval><ref refid="UartComprehensiveTest_8cpp_1aa1f7c585d82c1d233b4192ddc613b991" kindref="member">TEST_UART_PORT_1</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="282" column="18" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="282" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a6411f8d28a673c12d3103dea3c4845ec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool verify_uart_state</definition>
        <argsstring>(EspUart &amp;uart, bool should_be_initialized) noexcept</argsstring>
        <name>verify_uart_state</name>
        <param>
          <type><ref refid="classEspUart" kindref="compound">EspUart</ref> &amp;</type>
          <declname>uart</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>should_be_initialized</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="304" column="6" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="304" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="UartComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void app_main</definition>
        <argsstring>(void)</argsstring>
        <name>app_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/UartComprehensiveTest.cpp" line="1906" column="17" bodyfile="examples/esp32/main/UartComprehensiveTest.cpp" bodystart="1906" bodyend="2050"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Comprehensive UART testing suite for ESP32-C6 DevKit-M-1 (noexcept) </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains a dedicated, comprehensive test suite for the <ref refid="classEspUart" kindref="compound">EspUart</ref> class targeting ESP32-C6 with ESP-IDF v5.5+. It provides thorough testing of all UART functionalities including basic operations, async communication, flow control, advanced features, callbacks, and hardware-specific capabilities.</para>
<para>All functions are noexcept - no exception handling used.</para>
<para><simplesect kind="author"><para>Nebiyu Tadesse </para>
</simplesect>
<simplesect kind="date"><para>2025 </para>
</simplesect>
<simplesect kind="copyright"><para>HardFOC </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="TestFramework_8h" kindref="compound">TestFramework.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="BaseUart_8h" kindref="compound">base/BaseUart.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspGpio_8h" kindref="compound">mcu/esp32/EspGpio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspUart_8h" kindref="compound">mcu/esp32/EspUart.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspTypes__UART_8h" kindref="compound">mcu/esp32/utils/EspTypes_UART.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>UART<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/uart.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;soc/uart_reg.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;UART_Test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structTestResults" kindref="compound">TestResults</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>configuration<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>constexpr<sp/>hf_u8_t<sp/>TEST_UART_PORT_0<sp/>=<sp/>0;<sp/>Debug<sp/>UART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1aa1f7c585d82c1d233b4192ddc613b991" kindref="member">TEST_UART_PORT_1</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1ac0abc03fab30b9b4b8a1e6e324c5a0b2" kindref="member">TEST_BAUD_RATE</ref><sp/>=<sp/>115200;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1ac62b2a82f665fdb67fa56d8bbfea7a19" kindref="member">TEST_TX_PIN</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1a07f412588e577fd9a0c9b9a9df46491c" kindref="member">TEST_RX_PIN</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1a1713dc81bb111346bdb769a03b76ddb4" kindref="member">TEST_RTS_PIN</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1a92fc927457f3740173fadd7c888f0792" kindref="member">TEST_CTS_PIN</ref><sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="UartComprehensiveTest_8cpp_1a3e7fc6c5af3eec668ff7db63cc3d9cfe" kindref="member">TEST_PATTERN</ref><sp/>=<sp/>0x0A;<sp/></highlight><highlight class="comment">//<sp/>Line<sp/>feed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>UART<sp/>FIFO<sp/>is<sp/>only<sp/>128<sp/>bytes,<sp/>so<sp/>use<sp/>appropriate<sp/>buffer<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>requires:<sp/>rx_buffer_size<sp/>&gt;<sp/>UART_HW_FIFO_LEN<sp/>(128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref><sp/><ref refid="UartComprehensiveTest_8cpp_1a04194724aa6e02f90e439c01c215535b" kindref="member">TEST_BUFFER_SIZE</ref><sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Callback<sp/>test<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a613aeb96d7761d78fd0a5b093f855e6f" kindref="member">g_break_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>User<sp/>event<sp/>task<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/><ref refid="UartComprehensiveTest_8cpp_1a1df9dec14ff53faf4a841209bfeb08cd" kindref="member">g_user_event_task_handle</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a388be974de32dcf4f7b9a12c610df22a" kindref="member">g_pattern_detected</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" kindref="member">g_pattern_position</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a0540d12d9e183b74357739e1a645a5f0" kindref="member">g_stop_event_task</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>SECTION<sp/>CONFIGURATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable/disable<sp/>specific<sp/>test<sp/>categories<sp/>by<sp/>setting<sp/>to<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Core<sp/>UART<sp/>functionality<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Construction,<sp/>initialization,<sp/>basic<sp/>communication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a5dae68800c6d4c45ad3c26ae338538ad" kindref="member">ENABLE_BASIC_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Baud<sp/>rate,<sp/>flow<sp/>control,<sp/>buffer<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Advanced<sp/>features,<sp/>communication<sp/>modes,<sp/>async<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a0a8d4d070d9a30498e4b478604a72dfa" kindref="member">ENABLE_CALLBACK_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Callbacks,<sp/>statistics,<sp/>diagnostics,<sp/>printf<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1aaf2cc16434e0f7cca58940f8804c59b1" kindref="member">ENABLE_ESP_SPECIFIC_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>specific<sp/>features,<sp/>performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a987327fdfab23d745976f9d14327f810" kindref="member">ENABLE_EVENT_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>User<sp/>event<sp/>task,<sp/>event-driven<sp/>pattern<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a1e04670c744f4deed0f91ee0315a0ecc" kindref="member">ENABLE_CLEANUP_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>and<sp/>final<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ac8e0d768a7b27970a27fd6f47b35a278" kindref="member">test_uart_construction</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a96732d2453431f2a10801aca28f87ef2" kindref="member">test_uart_initialization</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae7d6a88afbea00b65d07f2f16489ee09" kindref="member">test_uart_basic_communication</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a54ed1f691466c4f1be25f4244b503215" kindref="member">test_uart_baud_rate_configuration</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a4da49feeafcb70aed2f368b8e891d7f5" kindref="member">test_uart_flow_control</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a6b520324bac3af608d188cf27d87b09b" kindref="member">test_uart_pattern_detection</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1adeb9395ef6454af2b1e913407b9f7cea" kindref="member">test_uart_buffer_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ab5c278ed08ee85a09c9121529e14b1e5" kindref="member">test_uart_advanced_features</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1aa317317d3687febfd06a80dbec71dd12" kindref="member">test_uart_communication_modes</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a1115c7fc5d104b77f83335969c3d34b9" kindref="member">test_uart_async_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1abd61d20bea3c0c5a2f29ac2d209b750b" kindref="member">test_uart_callbacks</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a5917129d95ebe007f1077769fede64f1" kindref="member">test_uart_statistics_diagnostics</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae5a428b08a1c71ebdd8dfc1e60410b09" kindref="member">test_uart_printf_support</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1afdc0b960eadfff575ebbed04ee6e8558" kindref="member">test_uart_error_handling</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae941fce65170b2d06aeb7cabc286f459" kindref="member">test_uart_esp32c6_features</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae9f081767d0cc270b345c2ed1dbc84d2" kindref="member">test_uart_performance</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ac4369d3c587d1df18e5a81e894f1a202" kindref="member">test_uart_callback_verification</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a77cc6cbaed3a439f7b4a10a8dfbd734f" kindref="member">test_uart_user_event_task</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a371a3496edbd32ad6106bbfa596c2e60" kindref="member">test_uart_event_driven_pattern_detection</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae72ee127a4e8aa04256bba3a41f99d72" kindref="member">test_uart_cleanup</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CALLBACK<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1af6e3f351682e543379bc94e13ffbed96" kindref="member">uart_event_callback</ref>(const<sp/><ref refid="structhf__uart__event__t" kindref="compound">hf_uart_event_t</ref>*<sp/>event,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__UART_8h_1ab92afb392c83820e94b9f343a7ddf3aaad63e628b90f5cfcac9abbbfd1ead8610" kindref="member">hf_uart_event_type_t::HF_UART_DATA</ref>:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DATA&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__UART_8h_1ab92afb392c83820e94b9f343a7ddf3aaa87ca6d6086648c5d68eefe2ee60bb00b" kindref="member">hf_uart_event_type_t::HF_UART_FIFO_OVF</ref>:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FIFO_OVF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__UART_8h_1ab92afb392c83820e94b9f343a7ddf3aaa73599f5b5f22d9ab4153e42149547ee8" kindref="member">hf_uart_event_type_t::HF_UART_BUFFER_FULL</ref>:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;BUFFER_FULL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__UART_8h_1ab92afb392c83820e94b9f343a7ddf3aaadaafab574b062f4e166fef0e493398e1" kindref="member">hf_uart_event_type_t::HF_UART_BREAK</ref>:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;BREAK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__UART_8h_1ab92afb392c83820e94b9f343a7ddf3aaa2708b48c96f92449f7a260d6b105f03d" kindref="member">hf_uart_event_type_t::HF_UART_PARITY_ERR</ref>:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PARITY_ERR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__UART_8h_1ab92afb392c83820e94b9f343a7ddf3aaa1c4b07127aaf20a5ca5d5b86e89cd84d" kindref="member">hf_uart_event_type_t::HF_UART_FRAME_ERR</ref>:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FRAME_ERR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__UART_8h_1ab92afb392c83820e94b9f343a7ddf3aaa572eb009d72ee1a8c5b866f38637b373" kindref="member">hf_uart_event_type_t::HF_UART_PATTERN_DET</ref>:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PATTERN_DET&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>callback<sp/>triggered:<sp/>%s<sp/>(size:<sp/>%zu)&quot;</highlight><highlight class="normal">,<sp/>event_type_name,<sp/>event-&gt;size);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>yield</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a9dad16181f55c9fa8cfb7c5fd3e7efa3" kindref="member">uart_break_callback</ref>(<ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>break_duration,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a613aeb96d7761d78fd0a5b093f855e6f" kindref="member">g_break_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>callback<sp/>triggered<sp/>with<sp/>duration:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>break_duration);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>yield</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>USER<sp/>EVENT<sp/>TASK<sp/>(Demonstrates<sp/>Proper<sp/>ESP-IDF<sp/>v5.5<sp/>Usage)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1adbdbd4300e13490f7d2251d21ae89a00" kindref="member">user_uart_event_task</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="classEspUart" kindref="compound">EspUart</ref>*<sp/>uart<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classEspUart" kindref="compound">EspUart</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>UART<sp/>instance<sp/>in<sp/>event<sp/>task&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>QueueHandle_t<sp/>event_queue<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a613c2456e38881c8c70d43c65b051415" kindref="member">GetEventQueue</ref>();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event_queue)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>event<sp/>queue<sp/>available&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;User<sp/>event<sp/>task<sp/>started,<sp/>monitoring<sp/>UART<sp/>events...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>uart_event_t<sp/>event;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>data_buffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(256));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data_buffer)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>event<sp/>task<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="UartComprehensiveTest_8cpp_1a0540d12d9e183b74357739e1a645a5f0" kindref="member">g_stop_event_task</ref>)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(event_queue,<sp/>&amp;event,<sp/>pdMS_TO_TICKS(100)))<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event.type)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_DATA:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>Data<sp/>event<sp/>-<sp/>%zu<sp/>bytes<sp/>available&quot;</highlight><highlight class="normal">,<sp/>event.size);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PATTERN_DET:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>Pattern<sp/>detected!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a388be974de32dcf4f7b9a12c610df22a" kindref="member">g_pattern_detected</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>pattern<sp/>position<sp/>immediately<sp/>(ESP-IDF<sp/>v5.5<sp/>best<sp/>practice)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" kindref="member">g_pattern_position</ref><sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aebf9c60f56ae3b5190d89a3f0c1aa7be" kindref="member">PopPatternPosition</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Pattern<sp/>position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" kindref="member">g_pattern_position</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" kindref="member">g_pattern_position</ref><sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>exactly<sp/>up<sp/>to<sp/>pattern<sp/>position<sp/>+<sp/>1<sp/>(including<sp/>delimiter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_to_read<sp/>=<sp/><ref refid="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" kindref="member">g_pattern_position</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/>uart_read_bytes(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uart_port_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uart-&gt;<ref refid="classBaseUart_1ac3cbd2017d912e1ef8a1c64627bdcbf4" kindref="member">GetPort</ref>()),<sp/>data_buffer,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes_to_read,<sp/>pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>%d<sp/>bytes<sp/>up<sp/>to<sp/>pattern&quot;</highlight><highlight class="normal">,<sp/>bytes_read);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Null<sp/>terminate<sp/>and<sp/>log<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_read<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_buffer[bytes_read]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Pattern<sp/>data:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data_buffer);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BREAK:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>Break<sp/>detected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a613aeb96d7761d78fd0a5b093f855e6f" kindref="member">g_break_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FIFO_OVF:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>RX<sp/>FIFO<sp/>overflow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_flush_input(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uart_port_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uart-&gt;<ref refid="classBaseUart_1ac3cbd2017d912e1ef8a1c64627bdcbf4" kindref="member">GetPort</ref>()));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueReset(event_queue);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BUFFER_FULL:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>Ring<sp/>buffer<sp/>full&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_flush_input(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uart_port_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uart-&gt;<ref refid="classBaseUart_1ac3cbd2017d912e1ef8a1c64627bdcbf4" kindref="member">GetPort</ref>()));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueReset(event_queue);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PARITY_ERR:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>Parity<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FRAME_ERR:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>Frame<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;USER<sp/>TASK:<sp/>Unknown<sp/>event<sp/>type:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>event.type);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>free(data_buffer);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;User<sp/>event<sp/>task<sp/>ending&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a1df9dec14ff53faf4a841209bfeb08cd" kindref="member">g_user_event_task_handle</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>vTaskDelete(NULL);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HELPER<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(<ref refid="classEspUart" kindref="compound">EspUart</ref>*<sp/>uart)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart<sp/>||<sp/>!uart-&gt;<ref refid="classBaseUart_1aa01db7402b20038f979b9073281bb430" kindref="member">IsInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>both<sp/>TX<sp/>and<sp/>RX<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>tx_result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1ae9d2e920c127672adf65cc4a7f0b58b5" kindref="member">FlushTx</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>rx_result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a0d4beb1af47d1581fd753a0ade58378b" kindref="member">FlushRx</ref>();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TX<sp/>flush<sp/>warning:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tx_result));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx_result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;RX<sp/>flush<sp/>warning:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rx_result));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>reset<sp/>the<sp/>event<sp/>queue<sp/>if<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="classEspUart_1a840292dc9845514c4b0ecc7ca7c477e6" kindref="member">IsEventQueueAvailable</ref>())<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a092e5195e9d01b58592ba73fa84b4fee" kindref="member">ResetEventQueue</ref>();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>to<sp/>ensure<sp/>buffers<sp/>are<sp/>fully<sp/>cleared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>buffers<sp/>flushed<sp/>before<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>(<ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>port<sp/>=<sp/><ref refid="UartComprehensiveTest_8cpp_1aa1f7c585d82c1d233b4192ddc613b991" kindref="member">TEST_UART_PORT_1</ref>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1afdc6f2316977e5a7a400ce2031e49c1c" kindref="member">port_number</ref><sp/>=<sp/>port;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a1f63adb11ea6e211eeeb2898a8e89a58" kindref="member">baud_rate</ref><sp/>=<sp/><ref refid="UartComprehensiveTest_8cpp_1ac0abc03fab30b9b4b8a1e6e324c5a0b2" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a76ac681f25341a9eb9f96d5fbcee0ede" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="UartComprehensiveTest_8cpp_1ac62b2a82f665fdb67fa56d8bbfea7a19" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1acca6c345efac84a616bc42c88efa0cf5" kindref="member">rx_pin</ref><sp/>=<sp/><ref refid="UartComprehensiveTest_8cpp_1a07f412588e577fd9a0c9b9a9df46491c" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a55c9803976664245d373656ba64cf51d" kindref="member">rts_pin</ref><sp/>=<sp/><ref refid="UartComprehensiveTest_8cpp_1a1713dc81bb111346bdb769a03b76ddb4" kindref="member">TEST_RTS_PIN</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a2958a92eeb0c1fbae55042773e807edc" kindref="member">cts_pin</ref><sp/>=<sp/><ref refid="UartComprehensiveTest_8cpp_1a92fc927457f3740173fadd7c888f0792" kindref="member">TEST_CTS_PIN</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a383ecf7d40d1f36e06cf3321e491c4cf" kindref="member">data_bits</ref><sp/>=<sp/><ref refid="EspTypes__UART_8h_1abde746b6c6a9bf11878d665ef32b70c8a60e80819b4c1b95edc8e68065625ffc4" kindref="member">hf_uart_data_bits_t::HF_UART_DATA_8_BITS</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a61cd78d7fcd061d2c9c8f37440bae1a8" kindref="member">parity</ref><sp/>=<sp/><ref refid="EspTypes__UART_8h_1ab79735070f96f3925e45f510b5e77979af661db1916042126f73e0d7a34b2638c" kindref="member">hf_uart_parity_t::HF_UART_PARITY_DISABLE</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a7cec6d7832a7847af8b1eb20fb107bef" kindref="member">stop_bits</ref><sp/>=<sp/><ref refid="EspTypes__UART_8h_1a5f55ae5eced4442a60e8e9eb5c15cca4a71089f470a9566d9c6ffa8550da03958" kindref="member">hf_uart_stop_bits_t::HF_UART_STOP_BITS_1</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1ab00b8ede5884c89c661f87fbfab049c4" kindref="member">flow_control</ref><sp/>=<sp/><ref refid="EspTypes__UART_8h_1a7be6c31cb63b9bc439d5546ac067821ba01e22a272e9cb761bd23b07e7be5106a" kindref="member">hf_uart_flow_ctrl_t::HF_UART_HW_FLOWCTRL_DISABLE</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1acb58788a89ca522dba9b9507d2410a01" kindref="member">operating_mode</ref><sp/>=<sp/><ref refid="EspTypes__UART_8h_1a66b9afbf91e5292af86d57cebb1425e7a2cd9f37d7333a871e069363eea9744ac" kindref="member">hf_uart_operating_mode_t::HF_UART_MODE_POLLING</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>UART<sp/>FIFO<sp/>is<sp/>only<sp/>128<sp/>bytes,<sp/>use<sp/>appropriate<sp/>buffer<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>requires:<sp/>rx_buffer_size<sp/>&gt;<sp/>UART_HW_FIFO_LEN<sp/>(128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1ab4cfd06f761353a95f61a017ce34e58b" kindref="member">rx_buffer_size</ref><sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1a64891fef55888ddc1a6bd8657d8baaa8" kindref="member">tx_buffer_size</ref><sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>event<sp/>queue<sp/>size<sp/>for<sp/>better<sp/>pattern<sp/>detection<sp/>reliability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1ac900846b55ea570c1dc09adf759492e1" kindref="member">event_queue_size</ref><sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a6411f8d28a673c12d3103dea3c4845ec" kindref="member">verify_uart_state</ref>(<ref refid="classEspUart" kindref="compound">EspUart</ref>&amp;<sp/>uart,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_be_initialized)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uart.<ref refid="classBaseUart_1aa01db7402b20038f979b9073281bb430" kindref="member">IsInitialized</ref>()<sp/>!=<sp/>should_be_initialized)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>initialization<sp/>state<sp/>mismatch.<sp/>Expected:<sp/>%s,<sp/>Actual:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should_be_initialized<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;initialized&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>initialized&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart.IsInitialized()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;initialized&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ac8e0d768a7b27970a27fd6f47b35a278" kindref="member">test_uart_construction</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>construction<sp/>and<sp/>destruction...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>construction<sp/>with<sp/>valid<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>construct<sp/>EspUart<sp/>instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>initial<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="UartComprehensiveTest_8cpp_1a6411f8d28a673c12d3103dea3c4845ec" kindref="member">verify_uart_state</ref>(*uart,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>state<sp/>verification<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>create<sp/>multiple<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart2<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart2)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>construct<sp/>second<sp/>EspUart<sp/>instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>both<sp/>instances<sp/>have<sp/>independent<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="classBaseUart_1aa01db7402b20038f979b9073281bb430" kindref="member">IsInitialized</ref>()<sp/>==<sp/>uart2-&gt;IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Multiple<sp/>instances<sp/>created<sp/>successfully<sp/>with<sp/>independent<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>UART<sp/>construction<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a96732d2453431f2a10801aca28f87ef2" kindref="member">test_uart_initialization</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>initialization...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>initialization<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>EnsureInitialized<sp/>(lazy<sp/>initialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>initialization<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="UartComprehensiveTest_8cpp_1a6411f8d28a673c12d3103dea3c4845ec" kindref="member">verify_uart_state</ref>(*uart,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Post-initialization<sp/>state<sp/>verification<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>configuration<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref>&amp;<sp/>retrieved_config<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a39bdd60fac079d2e53e6cc3f7a453b98" kindref="member">GetPortConfig</ref>();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retrieved_config.<ref refid="structhf__uart__config__t_1afdc6f2316977e5a7a400ce2031e49c1c" kindref="member">port_number</ref><sp/>!=<sp/><ref refid="UartComprehensiveTest_8cpp_1aa1f7c585d82c1d233b4192ddc613b991" kindref="member">TEST_UART_PORT_1</ref><sp/>||</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retrieved_config.<ref refid="structhf__uart__config__t_1a1f63adb11ea6e211eeeb2898a8e89a58" kindref="member">baud_rate</ref><sp/>!=<sp/><ref refid="UartComprehensiveTest_8cpp_1ac0abc03fab30b9b4b8a1e6e324c5a0b2" kindref="member">TEST_BAUD_RATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Configuration<sp/>mismatch<sp/>after<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>UART<sp/>initialization<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae7d6a88afbea00b65d07f2f16489ee09" kindref="member">test_uart_basic_communication</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>basic<sp/>UART<sp/>communication...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>basic<sp/>communication<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>basic<sp/>communication<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>before<sp/>test<sp/>to<sp/>ensure<sp/>clean<sp/>test<sp/>isolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>transmission<sp/>and<sp/>reception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>UART<sp/>Test!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>write_result<sp/>=</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_message),<sp/>strlen(test_message));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>failed<sp/>with<sp/>error:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(write_result));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Data<sp/>transmitted<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>status<sp/>functions<sp/>(using<sp/>public<sp/>methods<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref><sp/>tx_waiting<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a95d705a9febfd27db46df2520f669692" kindref="member">TxBytesWaiting</ref>();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TX<sp/>bytes<sp/>waiting:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>tx_waiting);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Basic<sp/>communication<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a54ed1f691466c4f1be25f4244b503215" kindref="member">test_uart_baud_rate_configuration</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>baud<sp/>rate<sp/>configuration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>baud<sp/>rate<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>baud<sp/>rate<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>various<sp/>baud<sp/>rates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>test_baud_rates[]<sp/>=<sp/>{9600,<sp/>19200,<sp/>38400,<sp/>57600,<sp/>115200,<sp/>230400};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>num_rates<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_baud_rates)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_baud_rates[0]);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_rates;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classEspUart_1ad0d639fbd3ff5f8ced77af29f13a081d" kindref="member">SetBaudRate</ref>(test_baud_rates[i]))<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>baud<sp/>rate:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>test_baud_rates[i]);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>to<sp/>allow<sp/>hardware<sp/>to<sp/>settle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>set<sp/>baud<sp/>rate<sp/>to:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>test_baud_rates[i]);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>original<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classEspUart_1ad0d639fbd3ff5f8ced77af29f13a081d" kindref="member">SetBaudRate</ref>(<ref refid="UartComprehensiveTest_8cpp_1ac0abc03fab30b9b4b8a1e6e324c5a0b2" kindref="member">TEST_BAUD_RATE</ref>))<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>restore<sp/>original<sp/>baud<sp/>rate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Baud<sp/>rate<sp/>configuration<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a4da49feeafcb70aed2f368b8e891d7f5" kindref="member">test_uart_flow_control</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>flow<sp/>control...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>flow<sp/>control<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>flow<sp/>control<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>enabling<sp/>flow<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a9fce2787e7b457164702660ce5f762d0" kindref="member">SetFlowControl</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>flow<sp/>control:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>RTS<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a28ef91e6eff98941eada61b22ad61ce4" kindref="member">SetRTS</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>RTS<sp/>high:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a28ef91e6eff98941eada61b22ad61ce4" kindref="member">SetRTS</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>RTS<sp/>low:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>software<sp/>flow<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a91ef024e3a23fd33449ca60339790461" kindref="member">ConfigureSoftwareFlowControl</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>20,<sp/>80);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>software<sp/>flow<sp/>control:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>software<sp/>flow<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a91ef024e3a23fd33449ca60339790461" kindref="member">ConfigureSoftwareFlowControl</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>software<sp/>flow<sp/>control:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>flow<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a9fce2787e7b457164702660ce5f762d0" kindref="member">SetFlowControl</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>flow<sp/>control:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Flow<sp/>control<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a6b520324bac3af608d188cf27d87b09b" kindref="member">test_uart_pattern_detection</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>pattern<sp/>detection<sp/>(ESP-IDF<sp/>v5.5)<sp/>with<sp/>event-driven<sp/>approach...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test<sp/>with<sp/>event<sp/>queue<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__uart__config__t_1ac900846b55ea570c1dc09adf759492e1" kindref="member">event_queue_size</ref><sp/>=<sp/>32;<sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>event<sp/>queue<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>pattern<sp/>detection<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>pattern<sp/>detection<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>before<sp/>test<sp/>to<sp/>ensure<sp/>clean<sp/>test<sp/>isolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>event<sp/>queue<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>QueueHandle_t<sp/>event_queue<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a613c2456e38881c8c70d43c65b051415" kindref="member">GetEventQueue</ref>();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event_queue)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>not<sp/>available<sp/>-<sp/>pattern<sp/>detection<sp/>requires<sp/>event<sp/>queue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>interrupts<sp/>for<sp/>pattern<sp/>detection<sp/>(REQUIRED<sp/>for<sp/>ESP-IDF<sp/>v5.5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Pattern<sp/>detection<sp/>interrupt<sp/>is<sp/>enabled<sp/>internally<sp/>by<sp/>uart_enable_pattern_det_baud_intr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M,<sp/>32,<sp/>5);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts<sp/>for<sp/>pattern<sp/>detection:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Combined<sp/>test<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>line_test_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>at_test_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total_tests_passed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>Line-oriented<sp/>pattern<sp/>detection<sp/>(&apos;\n&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n===<sp/>Test<sp/>1:<sp/>Line-oriented<sp/>pattern<sp/>detection<sp/>(&apos;\\n&apos;)<sp/>===&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1af5e4768bcbdb44ca149f891c34240eea" kindref="member">EnablePatternDetection</ref>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>1,<sp/>9,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>line<sp/>pattern<sp/>detection:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a15bd8e2881fa195b4e4cdb6b07267c87" kindref="member">ResetPatternQueue</ref>(16);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>pattern<sp/>queue:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>pattern<sp/>detection<sp/>enabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>event<sp/>queue<sp/>before<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a092e5195e9d01b58592ba73fa84b4fee" kindref="member">ResetEventQueue</ref>();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>test<sp/>data<sp/>with<sp/>line<sp/>endings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_lines<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Line1\nLine2\nLine3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_lines),</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(test_lines)),<sp/>1000);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>test<sp/>lines:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>data<sp/>sent:<sp/>&apos;%s&apos;<sp/>(length:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>test_lines,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(test_lines)));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>delay<sp/>to<sp/>allow<sp/>data<sp/>to<sp/>be<sp/>processed<sp/>and<sp/>prevent<sp/>buffer<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>events<sp/>with<sp/>proper<sp/>event-driven<sp/>approach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pattern_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_patterns<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_events<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>uart_event_t<sp/>event;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>uint8_t<sp/>read_buffer[256];</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>events<sp/>with<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>uint64_t<sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>uint64_t<sp/>timeout_us<sp/>=<sp/>3000000;<sp/></highlight><highlight class="comment">//<sp/>3<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((esp_timer_get_time()<sp/>-<sp/>start_time)<sp/>&lt;<sp/>timeout_us<sp/>&amp;&amp;<sp/>pattern_count<sp/>&lt;<sp/>expected_patterns)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(event_queue,<sp/>&amp;event,<sp/>pdMS_TO_TICKS(100)))<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event.type)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_DATA:</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_events++;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_DATA<sp/>event<sp/>-<sp/>size:<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>event.size);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>to<sp/>clear<sp/>buffer<sp/>and<sp/>allow<sp/>pattern<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a85b041ba28cc9309f7ddf2852f899364" kindref="member">Read</ref>(read_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_buffer),<sp/>100);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PATTERN_DET:<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_PATTERN_DET<sp/>event<sp/>received!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pattern_pos<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aebf9c60f56ae3b5190d89a3f0c1aa7be" kindref="member">PopPatternPosition</ref>();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern_pos<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern_count++;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Pattern<sp/>%d<sp/>detected<sp/>at<sp/>position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>pattern_count,<sp/>pattern_pos);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FIFO_OVF:</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BUFFER_FULL:</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>overflow<sp/>-<sp/>clearing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a0d4beb1af47d1581fd753a0ade58378b" kindref="member">FlushRx</ref>();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a092e5195e9d01b58592ba73fa84b4fee" kindref="member">ResetEventQueue</ref>();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BREAK:</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_BREAK<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FRAME_ERR:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_FRAME_ERR<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PARITY_ERR:</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_PARITY_ERR<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_DATA_BREAK:</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_DATA_BREAK<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_WAKEUP:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_WAKEUP<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_EVENT_MAX:</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Other<sp/>event<sp/>type:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>event.type);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>to<sp/>prevent<sp/>tight<sp/>loop<sp/>and<sp/>allow<sp/>pattern<sp/>detection<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>line_test_passed<sp/>=<sp/>(pattern_count<sp/>==<sp/>expected_patterns);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>pattern<sp/>detection:<sp/>%d/%d<sp/>patterns<sp/>detected.<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>pattern_count,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_patterns,<sp/>line_test_passed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASSED&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_test_passed)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>total_tests_passed++;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2:<sp/>AT<sp/>escape<sp/>sequence<sp/>pattern<sp/>detection<sp/>(&apos;+++&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n===<sp/>Test<sp/>2:<sp/>AT<sp/>escape<sp/>sequence<sp/>pattern<sp/>detection<sp/>(&apos;+++&apos;)<sp/>===&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>previous<sp/>pattern<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>pattern<sp/>detection:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>and<sp/>reset<sp/>for<sp/>next<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a092e5195e9d01b58592ba73fa84b4fee" kindref="member">ResetEventQueue</ref>();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>+++<sp/>pattern<sp/>(3<sp/>consecutive<sp/>&apos;+&apos;<sp/>characters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1af5e4768bcbdb44ca149f891c34240eea" kindref="member">EnablePatternDetection</ref>(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,<sp/>3,<sp/>5,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>+++<sp/>pattern<sp/>detection:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a15bd8e2881fa195b4e4cdb6b07267c87" kindref="member">ResetPatternQueue</ref>(8);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>pattern<sp/>queue<sp/>for<sp/>+++:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>escape<sp/>sequence<sp/>pattern<sp/>detection<sp/>enabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>test<sp/>data<sp/>with<sp/>AT<sp/>escape<sp/>sequences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>at_test_data<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AT+CMD1\r\n+++ESCAPE1\r\nAT+CMD2\r\n+++ESCAPE2\r\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(at_test_data),</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(at_test_data)),<sp/>1000);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>AT<sp/>test<sp/>data:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>test<sp/>data<sp/>sent<sp/>(length:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(at_test_data)));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>delay<sp/>to<sp/>allow<sp/>data<sp/>to<sp/>be<sp/>processed<sp/>and<sp/>prevent<sp/>buffer<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>AT<sp/>pattern<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_pattern_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_at_patterns<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>data_events<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((esp_timer_get_time()<sp/>-<sp/>start_time)<sp/>&lt;<sp/>timeout_us<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at_pattern_count<sp/>&lt;<sp/>expected_at_patterns)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(event_queue,<sp/>&amp;event,<sp/>pdMS_TO_TICKS(100)))<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event.type)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_DATA:</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_events++;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_DATA<sp/>event<sp/>-<sp/>size:<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>event.size);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>to<sp/>clear<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a85b041ba28cc9309f7ddf2852f899364" kindref="member">Read</ref>(read_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_buffer),<sp/>100);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PATTERN_DET:<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_PATTERN_DET<sp/>event<sp/>received<sp/>for<sp/>+++!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pattern_pos<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aebf9c60f56ae3b5190d89a3f0c1aa7be" kindref="member">PopPatternPosition</ref>();</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern_pos<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at_pattern_count++;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>Pattern<sp/>%d<sp/>detected<sp/>at<sp/>position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>at_pattern_count,<sp/>pattern_pos);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FIFO_OVF:</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BUFFER_FULL:</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>overflow<sp/>-<sp/>clearing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a0d4beb1af47d1581fd753a0ade58378b" kindref="member">FlushRx</ref>();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a092e5195e9d01b58592ba73fa84b4fee" kindref="member">ResetEventQueue</ref>();</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BREAK:</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_BREAK<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FRAME_ERR:</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_FRAME_ERR<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PARITY_ERR:</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_PARITY_ERR<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_DATA_BREAK:</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_DATA_BREAK<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_WAKEUP:</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_WAKEUP<sp/>event&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_EVENT_MAX:</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Other<sp/>event<sp/>type:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>event.type);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>to<sp/>prevent<sp/>tight<sp/>loop<sp/>and<sp/>allow<sp/>pattern<sp/>detection<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>at_test_passed<sp/>=<sp/>(at_pattern_count<sp/>==<sp/>expected_at_patterns);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>pattern<sp/>detection:<sp/>%d/%d<sp/>patterns<sp/>detected.<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>at_pattern_count,</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_at_patterns,<sp/>at_test_passed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASSED&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_test_passed)</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>total_tests_passed++;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>pattern<sp/>detection:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Overall<sp/>test<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overall_passed<sp/>=<sp/>(total_tests_passed<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n===<sp/>PATTERN<sp/>DETECTION<sp/>TEST<sp/>SUMMARY<sp/>===&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Line<sp/>pattern<sp/>test:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>line_test_passed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASSED&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;AT<sp/>pattern<sp/>test:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>at_test_passed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASSED&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Overall<sp/>result:<sp/>%d/2<sp/>tests<sp/>passed.<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>total_tests_passed,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overall_passed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;[FAILED]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overall_passed;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1adeb9395ef6454af2b1e913407b9f7cea" kindref="member">test_uart_buffer_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>buffer<sp/>operations...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>buffer<sp/>operations<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>buffer<sp/>operations<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>before<sp/>test<sp/>to<sp/>ensure<sp/>clean<sp/>test<sp/>isolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ReadUntil<sp/>with<sp/>terminator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>uint8_t<sp/>read_buffer[128];</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello\nWorld&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>test<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>write_result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_string),</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(test_string)),<sp/>1000);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>failed<sp/>for<sp/>ReadUntil<sp/>test<sp/>(expected<sp/>in<sp/>no-loopback<sp/>mode)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ReadUntil<sp/>(will<sp/>timeout<sp/>in<sp/>normal<sp/>mode,<sp/>which<sp/>is<sp/>expected)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref><sp/>bytes_read<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a91d0e2bae14b427a5c1daeb75927852f" kindref="member">ReadUntil</ref>(read_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_buffer),<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>100);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ReadUntil<sp/>returned<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>bytes_read);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ReadLine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line_buffer[128];</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref><sp/>line_length<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a7490b8f55321824cb14c156a32d677ec" kindref="member">ReadLine</ref>(line_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(line_buffer),<sp/>100);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ReadLine<sp/>returned<sp/>%d<sp/>characters&quot;</highlight><highlight class="normal">,<sp/>line_length);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>interrupt<sp/>configuration<sp/>(modern<sp/>ESP-IDF<sp/>v5.5<sp/>approach)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M,<sp/>64,<sp/>10);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Buffer<sp/>operations<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ab5c278ed08ee85a09c9121529e14b1e5" kindref="member">test_uart_advanced_features</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>advanced<sp/>features...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>advanced<sp/>features<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>advanced<sp/>features<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>before<sp/>test<sp/>to<sp/>ensure<sp/>clean<sp/>test<sp/>isolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>break<sp/>signal<sp/>(may<sp/>not<sp/>be<sp/>fully<sp/>supported<sp/>on<sp/>ESP32-C6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a0e8ee47992f3d875c2e65fb61ce20449" kindref="member">SendBreak</ref>(100);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>break:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseUart_8h_1af8c6bbea05bb05ef1002071d6af168ad" kindref="member">HfUartErrToString</ref>(result));</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>loopback<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>external<sp/>loopback<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>loopback_msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Loopback<sp/>Test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(loopback_msg),</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(loopback_msg)),<sp/>1000);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;External<sp/>loopback<sp/>write<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>read<sp/>back<sp/>(should<sp/>work<sp/>with<sp/>external<sp/>jumper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>loopback_buffer[64];</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a85b041ba28cc9309f7ddf2852f899364" kindref="member">Read</ref>(loopback_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(loopback_buffer),<sp/>500);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;External<sp/>loopback<sp/>read<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a7508989a3ffb01571ae8cfb0cc61b6b6" kindref="member">SetLoopback</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>loopback:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>signal<sp/>inversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1adb38ee06131726c32e151679ca277875" kindref="member">SetSignalInversion</ref>(0);<sp/></highlight><highlight class="comment">//<sp/>No<sp/>inversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>signal<sp/>inversion:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>wakeup<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__wakeup__config__t" kindref="compound">hf_uart_wakeup_config_t</ref><sp/>wakeup_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>wakeup_config.<ref refid="structhf__uart__wakeup__config__t_1a76e8ea3fadb340e3a26b6d1cc1ace34b" kindref="member">enable_wakeup</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>wakeup_config.<ref refid="structhf__uart__wakeup__config__t_1a410bc7b8c1fcb3c69d71bd7e49f57229" kindref="member">wakeup_threshold</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1af323dbe85b7e6af3328e4b63f8c8d577" kindref="member">ConfigureWakeup</ref>(wakeup_config);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>wakeup:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>wakeup<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wakeup_enabled<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a95486cae642a80ebfe3d24b9c9e75b37" kindref="member">IsWakeupEnabled</ref>();</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Wakeup<sp/>enabled:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>wakeup_enabled<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Advanced<sp/>features<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1aa317317d3687febfd06a80dbec71dd12" kindref="member">test_uart_communication_modes</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>communication<sp/>modes...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>communication<sp/>modes<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>communication<sp/>modes<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>standard<sp/>UART<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a19b04e570d86170dfa65a03c9555977f" kindref="member">SetCommunicationMode</ref>(<ref refid="EspTypes__UART_8h_1ad864b8f4e4ef30f9af78d096e00ab0e4af5d5bcd53eab62a93d77f4c8db470c8c" kindref="member">hf_uart_mode_t::HF_UART_MODE_UART</ref>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>UART<sp/>mode:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><ref refid="EspTypes__UART_8h_1ad864b8f4e4ef30f9af78d096e00ab0e4" kindref="member">hf_uart_mode_t</ref><sp/>current_mode<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aca26466026e95d128039fb6e4eddbbbb" kindref="member">GetCommunicationMode</ref>();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_mode<sp/>!=<sp/><ref refid="EspTypes__UART_8h_1ad864b8f4e4ef30f9af78d096e00ab0e4af5d5bcd53eab62a93d77f4c8db470c8c" kindref="member">hf_uart_mode_t::HF_UART_MODE_UART</ref>)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Communication<sp/>mode<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>RS485<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__rs485__config__t" kindref="compound">hf_uart_rs485_config_t</ref><sp/>rs485_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>rs485_config.<ref refid="structhf__uart__rs485__config__t_1a2c2b7274f794e33ab23b7ae1a6ab3c9f" kindref="member">mode</ref><sp/>=<sp/><ref refid="EspTypes__UART_8h_1ad864b8f4e4ef30f9af78d096e00ab0e4a7c6f7bf85dbe34b7cedf2d4f8336e721" kindref="member">hf_uart_mode_t::HF_UART_MODE_RS485</ref>;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>rs485_config.<ref refid="structhf__uart__rs485__config__t_1a818080c9397d34955b4232ef58258666" kindref="member">enable_collision_detect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>rs485_config.<ref refid="structhf__uart__rs485__config__t_1a3601528cb25db0e361bea72eac49d9d6" kindref="member">enable_echo_suppression</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>rs485_config.<ref refid="structhf__uart__rs485__config__t_1ab6b1b3c4a8b9fe0d3cd21e9fb64fcbff" kindref="member">auto_rts_control</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a2822adcf8f5c9e7068ec3ec0e44680cd" kindref="member">ConfigureRS485</ref>(rs485_config);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>RS485:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>IrDA<sp/>configuration<sp/>(ESP32-C6<sp/>doesn&apos;t<sp/>support<sp/>IrDA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__irda__config__t" kindref="compound">hf_uart_irda_config_t</ref><sp/>irda_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>irda_config.<ref refid="structhf__uart__irda__config__t_1a2e3ace6d1a0f3dd70638bee8aaae8b8f" kindref="member">enable_irda</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>irda_config.<ref refid="structhf__uart__irda__config__t_1a3dcfcc6d5e0ccc88d88af22818bec340" kindref="member">invert_tx</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>irda_config.<ref refid="structhf__uart__irda__config__t_1aa8cdfbead9d674f0525ba236c10848c4" kindref="member">invert_rx</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>irda_config.<ref refid="structhf__uart__irda__config__t_1a17330d5b407ec971f1e5a0177c2927a5" kindref="member">duty_cycle</ref><sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a123c264aa665cb991daa9dc48a171ecf" kindref="member">ConfigureIrDA</ref>(irda_config);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IrDA<sp/>not<sp/>supported<sp/>on<sp/>ESP32-C6<sp/>(expected):<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>test<sp/>-<sp/>IrDA<sp/>unsupported<sp/>is<sp/>expected<sp/>on<sp/>ESP32-C6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IrDA<sp/>configuration<sp/>succeeded<sp/>(unexpected<sp/>on<sp/>ESP32-C6)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>to<sp/>standard<sp/>UART<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a19b04e570d86170dfa65a03c9555977f" kindref="member">SetCommunicationMode</ref>(<ref refid="EspTypes__UART_8h_1ad864b8f4e4ef30f9af78d096e00ab0e4af5d5bcd53eab62a93d77f4c8db470c8c" kindref="member">hf_uart_mode_t::HF_UART_MODE_UART</ref>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>return<sp/>to<sp/>UART<sp/>mode:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Communication<sp/>modes<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a1115c7fc5d104b77f83335969c3d34b9" kindref="member">test_uart_async_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>async<sp/>operations...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>async<sp/>operations<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>async<sp/>operations<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>interrupt<sp/>configuration<sp/>(modern<sp/>ESP-IDF<sp/>v5.5<sp/>approach)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M<sp/>|<sp/>UART_TXFIFO_EMPTY_INT_ENA_M,<sp/>100,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>10);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>operating<sp/>mode<sp/>change<sp/>to<sp/>interrupt<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1ab43e1c7aead219b7df960710d2e8782e" kindref="member">SetOperatingMode</ref>(<ref refid="EspTypes__UART_8h_1a66b9afbf91e5292af86d57cebb1425e7a6b4c350c97dc7e89a794bddce128b1ce" kindref="member">hf_uart_operating_mode_t::HF_UART_MODE_INTERRUPT</ref>);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>interrupt<sp/>mode:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><ref refid="EspTypes__UART_8h_1a66b9afbf91e5292af86d57cebb1425e7" kindref="member">hf_uart_operating_mode_t</ref><sp/>current_mode<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1abe35b4b6532a107b5bdb679ac6acba5b" kindref="member">GetOperatingMode</ref>();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_mode<sp/>!=<sp/><ref refid="EspTypes__UART_8h_1a66b9afbf91e5292af86d57cebb1425e7a6b4c350c97dc7e89a794bddce128b1ce" kindref="member">hf_uart_operating_mode_t::HF_UART_MODE_INTERRUPT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Operating<sp/>mode<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>some<sp/>time<sp/>for<sp/>interrupt<sp/>mode<sp/>to<sp/>settle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>to<sp/>polling<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1ab43e1c7aead219b7df960710d2e8782e" kindref="member">SetOperatingMode</ref>(<ref refid="EspTypes__UART_8h_1a66b9afbf91e5292af86d57cebb1425e7a2cd9f37d7333a871e069363eea9744ac" kindref="member">hf_uart_operating_mode_t::HF_UART_MODE_POLLING</ref>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>return<sp/>to<sp/>polling<sp/>mode:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>interrupts<sp/>(configure<sp/>with<sp/>no<sp/>interrupt<sp/>mask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(0,<sp/>100,<sp/>10);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Async<sp/>operations<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1abd61d20bea3c0c5a2f29ac2d209b750b" kindref="member">test_uart_callbacks</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>event<sp/>queue<sp/>access...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>callbacks<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>callbacks<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>event<sp/>queue<sp/>availability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classEspUart_1a840292dc9845514c4b0ecc7ca7c477e6" kindref="member">IsEventQueueAvailable</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>not<sp/>available&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>is<sp/>available<sp/>for<sp/>user<sp/>tasks&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>event<sp/>queue<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>QueueHandle_t<sp/>event_queue<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a613c2456e38881c8c70d43c65b051415" kindref="member">GetEventQueue</ref>();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event_queue)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>event<sp/>queue<sp/>handle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>handle<sp/>obtained<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>interrupt<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>uint32_t<sp/>intr_mask<sp/>=<sp/>UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(intr_mask,<sp/>100,<sp/>10);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Interrupts<sp/>configured<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>event<sp/>queue<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a092e5195e9d01b58592ba73fa84b4fee" kindref="member">ResetEventQueue</ref>();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>event<sp/>queue:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>reset<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Event<sp/>queue<sp/>access<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a5917129d95ebe007f1077769fede64f1" kindref="member">test_uart_statistics_diagnostics</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>statistics<sp/>and<sp/>diagnostics...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>statistics<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>statistics<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>statistics<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__statistics__t" kindref="compound">hf_uart_statistics_t</ref><sp/>statistics<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a0a5c6da9b4a45ce29d7c8f2f1caf21a4" kindref="member">GetStatistics</ref>(statistics);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>statistics:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Statistics:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Bytes<sp/>sent:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>statistics.<ref refid="structhf__uart__statistics__t_1aab1d89b99e028cdd213a27b4b296e2e3" kindref="member">tx_byte_count</ref>);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Bytes<sp/>received:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>statistics.<ref refid="structhf__uart__statistics__t_1a43088b127b9a4919abcbb35d0cc9b8ad" kindref="member">rx_byte_count</ref>);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>TX<sp/>Errors:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>statistics.<ref refid="structhf__uart__statistics__t_1a6321d5527cc622fd86a7aced8118484a" kindref="member">tx_error_count</ref>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>RX<sp/>Errors:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>statistics.<ref refid="structhf__uart__statistics__t_1ab23a18ad52668ca8f3458c66158e83d3" kindref="member">rx_error_count</ref>);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>diagnostics<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__diagnostics__t" kindref="compound">hf_uart_diagnostics_t</ref><sp/>diagnostics<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a1c8b46105334d76c54879d7f8c901f14" kindref="member">GetDiagnostics</ref>(diagnostics);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>diagnostics:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Diagnostics:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Last<sp/>error:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(diagnostics.<ref refid="structhf__uart__diagnostics__t_1a819ac1514e5cbeb21b1f3f806cd769a7" kindref="member">last_error</ref>));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Error<sp/>reset<sp/>count:<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>diagnostics.<ref refid="structhf__uart__diagnostics__t_1a53d723ec372aad3e830d389890b1ca27" kindref="member">error_reset_count</ref>);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>error<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>last_error<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1abef393dfa54e48c2b0f91ac1380793bb" kindref="member">GetLastError</ref>();</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Last<sp/>error:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(last_error));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>status<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_transmitting<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a471a8ae57098f62044b83b80e75ef953" kindref="member">IsTransmitting</ref>();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_receiving<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1acb5ffee8689974b00aa792b6f865e3d2" kindref="member">IsReceiving</ref>();</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Status:<sp/>TX=%s,<sp/>RX=%s&quot;</highlight><highlight class="normal">,<sp/>is_transmitting<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_receiving<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Statistics<sp/>and<sp/>diagnostics<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae5a428b08a1c71ebdd8dfc1e60410b09" kindref="member">test_uart_printf_support</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>printf<sp/>support...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>printf<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>printf<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Printf<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1ad507db496e86a84d3a5ed5d6d2d8eb38" kindref="member">Printf</ref>(</highlight><highlight class="stringliteral">&quot;Test<sp/>printf:<sp/>%d,<sp/>%s,<sp/>%.2f\n&quot;</highlight><highlight class="normal">,<sp/>42,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>3.14);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Printf<sp/>failed<sp/>with<sp/>result:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Printf<sp/>returned<sp/>%d<sp/>characters&quot;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>VPrintf<sp/>(through<sp/>internal<sp/>usage)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result2<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1ad507db496e86a84d3a5ed5d6d2d8eb38" kindref="member">Printf</ref>(</highlight><highlight class="stringliteral">&quot;Another<sp/>test:<sp/>%c%c%c\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result2<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>printf<sp/>failed<sp/>with<sp/>result:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>result2);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>printf<sp/>returned<sp/>%d<sp/>characters&quot;</highlight><highlight class="normal">,<sp/>result2);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Printf<sp/>support<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1afdc0b960eadfff575ebbed04ee6e8558" kindref="member">test_uart_error_handling</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>error<sp/>handling...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>error<sp/>handling<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>error<sp/>handling<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>parameters<sp/>(should<sp/>handle<sp/>gracefully)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>write<sp/>with<sp/>null<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>10,<sp/>1000);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>with<sp/>null<sp/>data<sp/>unexpectedly<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>with<sp/>null<sp/>data<sp/>correctly<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>read<sp/>with<sp/>null<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a85b041ba28cc9309f7ddf2852f899364" kindref="member">Read</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>10,<sp/>1000);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>with<sp/>null<sp/>buffer<sp/>unexpectedly<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>with<sp/>null<sp/>buffer<sp/>correctly<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>baud_result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1ad0d639fbd3ff5f8ced77af29f13a081d" kindref="member">SetBaudRate</ref>(0);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baud_result)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>baud<sp/>rate<sp/>unexpectedly<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>baud<sp/>rate<sp/>correctly<sp/>rejected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>valid<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>uart-&gt;<ref refid="classEspUart_1ad0d639fbd3ff5f8ced77af29f13a081d" kindref="member">SetBaudRate</ref>(<ref refid="UartComprehensiveTest_8cpp_1ac0abc03fab30b9b4b8a1e6e324c5a0b2" kindref="member">TEST_BAUD_RATE</ref>);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Error<sp/>handling<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae941fce65170b2d06aeb7cabc286f459" kindref="member">test_uart_esp32c6_features</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>ESP32-C6<sp/>UART<sp/>implementation...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>ESP32-C6<sp/>features<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>ESP32-C6<sp/>features<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>bytes<sp/>available<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref><sp/>bytes_available<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a3138eae9161daf1be1a04655798287e1" kindref="member">BytesAvailable</ref>();</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bytes<sp/>available:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>bytes_available);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>TX<sp/>busy<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tx_busy<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a8249177a7af1c167b4dfe867848e0fbf" kindref="member">IsTxBusy</ref>();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TX<sp/>busy:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tx_busy<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>break<sp/>detection<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>break_detected<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a4fa0a9981052db00829f5daa2ca67c4e" kindref="member">IsBreakDetected</ref>();</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>detected:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>break_detected<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>actual<sp/>break<sp/>signal<sp/>sending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a0e8ee47992f3d875c2e65fb61ce20449" kindref="member">SendBreak</ref>(50);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>signal<sp/>sent<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6a4e79f5672d0edf471cbd1f4b5c1e491e" kindref="member">hf_uart_err_t::UART_ERR_UNSUPPORTED_OPERATION</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>signal<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>MCU<sp/>variant<sp/>(expected<sp/>on<sp/>ESP32-C6)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>test<sp/>-<sp/>this<sp/>is<sp/>expected<sp/>behavior<sp/>for<sp/>ESP32-C6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>break<sp/>signal:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>fail<sp/>the<sp/>test<sp/>for<sp/>break<sp/>signal<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>signal<sp/>inversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1adb38ee06131726c32e151679ca277875" kindref="member">SetSignalInversion</ref>(0);<sp/></highlight><highlight class="comment">//<sp/>No<sp/>inversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>signal<sp/>inversion:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>ESP32-C6<sp/>UART<sp/>implementation<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae9f081767d0cc270b345c2ed1dbc84d2" kindref="member">test_uart_performance</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>performance...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>performance<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>performance<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>performance<sp/>test:<sp/>Medium<sp/>data<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>test_data_size<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data[test_data_size];</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>with<sp/>test<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_data_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>test_data[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Measure<sp/>transmission<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>uint64_t<sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(test_data,<sp/>test_data_size,<sp/>2000);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>uint64_t<sp/>end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance<sp/>test<sp/>write<sp/>failed:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>uint64_t<sp/>transmission_time<sp/>=<sp/>end_time<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance<sp/>test:<sp/>%zu<sp/>bytes<sp/>in<sp/>%llu<sp/>μs&quot;</highlight><highlight class="normal">,<sp/>test_data_size,<sp/>transmission_time);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Performance<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ac4369d3c587d1df18e5a81e894f1a202" kindref="member">test_uart_callback_verification</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>event<sp/>queue<sp/>verification<sp/>with<sp/>loopback...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>callback<sp/>verification<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>callback<sp/>verification<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>before<sp/>test<sp/>to<sp/>ensure<sp/>clean<sp/>test<sp/>isolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>callback<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a613aeb96d7761d78fd0a5b093f855e6f" kindref="member">g_break_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)<sp/>for<sp/>reliable<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)<sp/>for<sp/>event<sp/>testing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>interrupts<sp/>for<sp/>event<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>uint32_t<sp/>intr_mask<sp/>=<sp/>UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(intr_mask,<sp/>100,<sp/>10);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>RX<sp/>interrupts<sp/>(modern<sp/>ESP-IDF<sp/>v5.5<sp/>approach)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M,<sp/>100,<sp/>10);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>event<sp/>queue<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>QueueHandle_t<sp/>event_queue<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a613c2456e38881c8c70d43c65b051415" kindref="member">GetEventQueue</ref>();</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event_queue)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>event<sp/>queue<sp/>handle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>handle<sp/>obtained<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>test<sp/>data<sp/>that<sp/>should<sp/>trigger<sp/>data<sp/>events<sp/>with<sp/>external<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;External<sp/>Loopback<sp/>Event<sp/>Test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_message),</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(test_message)),<sp/>1000);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>data<sp/>written<sp/>with<sp/>external<sp/>loopback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>events<sp/>to<sp/>be<sp/>processed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(300));</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>read<sp/>the<sp/>data<sp/>back<sp/>(should<sp/>trigger<sp/>more<sp/>events)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>read_buffer[64];</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a85b041ba28cc9309f7ddf2852f899364" kindref="member">Read</ref>(read_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_buffer),<sp/>500);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>result<sp/>with<sp/>external<sp/>loopback:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>are<sp/>events<sp/>in<sp/>the<sp/>queue<sp/>(simple<sp/>verification)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_event_t<sp/>event;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(event_queue,<sp/>&amp;event,<sp/>pdMS_TO_TICKS(100)))<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>received<sp/>from<sp/>queue:<sp/>type=%d&quot;</highlight><highlight class="normal">,<sp/>event.type);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>any<sp/>additional<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(200));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>break<sp/>signal<sp/>to<sp/>test<sp/>break<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a0e8ee47992f3d875c2e65fb61ce20449" kindref="member">SendBreak</ref>(100);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>signal<sp/>sent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(200));<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>break<sp/>event<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>break<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_event_t<sp/>event;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(event_queue,<sp/>&amp;event,<sp/>pdMS_TO_TICKS(100)))<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.type<sp/>==<sp/>UART_BREAK)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>event<sp/>received<sp/>from<sp/>queue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a613aeb96d7761d78fd0a5b093f855e6f" kindref="member">g_break_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6a4e79f5672d0edf471cbd1f4b5c1e491e" kindref="member">hf_uart_err_t::UART_ERR_UNSUPPORTED_OPERATION</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>signal<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>MCU<sp/>variant<sp/>(expected<sp/>on<sp/>ESP32-C6)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>test<sp/>-<sp/>break<sp/>events<sp/>won&apos;t<sp/>be<sp/>tested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Break<sp/>signal<sp/>failed:<sp/>%d<sp/>(continuing<sp/>test)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>test<sp/>-<sp/>break<sp/>events<sp/>won&apos;t<sp/>be<sp/>tested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>verification<sp/>results:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Event<sp/>received:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Break<sp/>event<sp/>received:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a613aeb96d7761d78fd0a5b093f855e6f" kindref="member">g_break_callback_triggered</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Event<sp/>queue<sp/>verification<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a77cc6cbaed3a439f7b4a10a8dfbd734f" kindref="member">test_uart_user_event_task</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>user-created<sp/>event<sp/>task<sp/>(ESP-IDF<sp/>v5.5<sp/>pattern)...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>user<sp/>event<sp/>task<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>user<sp/>event<sp/>task<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>before<sp/>test<sp/>to<sp/>ensure<sp/>clean<sp/>test<sp/>isolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>event<sp/>queue<sp/>is<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classEspUart_1a840292dc9845514c4b0ecc7ca7c477e6" kindref="member">IsEventQueueAvailable</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>not<sp/>available&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>available<sp/>for<sp/>user<sp/>task&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>interrupts<sp/>for<sp/>event-driven<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>uint32_t<sp/>intr_mask<sp/>=<sp/>UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(intr_mask,<sp/>100,<sp/>10);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>RX<sp/>interrupts<sp/>(modern<sp/>ESP-IDF<sp/>v5.5<sp/>approach)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M,<sp/>100,<sp/>10);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>loopback<sp/>for<sp/>reliable<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a7508989a3ffb01571ae8cfb0cc61b6b6" kindref="member">SetLoopback</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>loopback:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)<sp/>for<sp/>reliable<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>with<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>line<sp/>pattern<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1af5e4768bcbdb44ca149f891c34240eea" kindref="member">EnablePatternDetection</ref>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>1,<sp/>9,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>pattern<sp/>detection:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a15bd8e2881fa195b4e4cdb6b07267c87" kindref="member">ResetPatternQueue</ref>(16);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>pattern<sp/>queue:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>test<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a388be974de32dcf4f7b9a12c610df22a" kindref="member">g_pattern_detected</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" kindref="member">g_pattern_position</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a0540d12d9e183b74357739e1a645a5f0" kindref="member">g_stop_event_task</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>user<sp/>event<sp/>task<sp/>(proper<sp/>ESP-IDF<sp/>v5.5<sp/>pattern)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>BaseType_t<sp/>task_result<sp/>=<sp/>xTaskCreate(<ref refid="UartComprehensiveTest_8cpp_1adbdbd4300e13490f7d2251d21ae89a00" kindref="member">user_uart_event_task</ref>,<sp/></highlight><highlight class="stringliteral">&quot;user_uart_events&quot;</highlight><highlight class="normal">,<sp/>4096,<sp/>uart.get(),</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10,<sp/>&amp;<ref refid="UartComprehensiveTest_8cpp_1a1df9dec14ff53faf4a841209bfeb08cd" kindref="member">g_user_event_task_handle</ref>);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task_result<sp/>!=<sp/>pdPASS)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>user<sp/>event<sp/>task&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;User<sp/>event<sp/>task<sp/>created<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>task<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>test<sp/>data<sp/>with<sp/>line<sp/>ending<sp/>to<sp/>trigger<sp/>pattern<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_line<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_line),</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(test_line)),<sp/>1000);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>line<sp/>sent:<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>test_line);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>pattern<sp/>detection<sp/>and<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(500));</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>another<sp/>test<sp/>with<sp/>multiple<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>multi_line<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Line1\nLine2\nLine3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(multi_line),</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(multi_line)),<sp/>1000);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Multi-line<sp/>test<sp/>sent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(500));</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>the<sp/>user<sp/>event<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a0540d12d9e183b74357739e1a645a5f0" kindref="member">g_stop_event_task</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(200));<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>task<sp/>to<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;User<sp/>event<sp/>task<sp/>test<sp/>results:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Event<sp/>callback<sp/>triggered:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ac3a97a9cce4f8118dad6f861e57c9a44" kindref="member">g_event_callback_triggered</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Pattern<sp/>detected:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a388be974de32dcf4f7b9a12c610df22a" kindref="member">g_pattern_detected</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Pattern<sp/>position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a700282edfc752965feef2c250a82fb88" kindref="member">g_pattern_position</ref>);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>User<sp/>event<sp/>task<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EVENT-DRIVEN<sp/>PATTERN<sp/>DETECTION<sp/>TEST<sp/>(Comprehensive<sp/>Event<sp/>Queue<sp/>Testing)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a371a3496edbd32ad6106bbfa596c2e60" kindref="member">test_uart_event_driven_pattern_detection</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>EVENT-DRIVEN<sp/>UART<sp/>pattern<sp/>detection<sp/>(ESP-IDF<sp/>v5.5<sp/>comprehensive)...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>UART<sp/>instance<sp/>for<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>event-driven<sp/>pattern<sp/>detection<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>event-driven<sp/>pattern<sp/>detection<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffers<sp/>before<sp/>test<sp/>to<sp/>ensure<sp/>clean<sp/>test<sp/>isolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a60939a4607d6135ab5e07ed81eaeccbe" kindref="member">flush_uart_buffers</ref>(uart.get());</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>external<sp/>loopback<sp/>(jumper<sp/>between<sp/>pins<sp/>20<sp/>and<sp/>21)<sp/>for<sp/>event-driven<sp/>testing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>event<sp/>queue<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>QueueHandle_t<sp/>event_queue<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a613c2456e38881c8c70d43c65b051415" kindref="member">GetEventQueue</ref>();</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event_queue)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>not<sp/>available<sp/>for<sp/>event-driven<sp/>testing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>queue<sp/>obtained<sp/>successfully<sp/>for<sp/>pattern<sp/>detection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>interrupts<sp/>for<sp/>comprehensive<sp/>event<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a64fac40cd1b92d1c3f0c4ca2d79bb9d6" kindref="member">ConfigureInterrupts</ref>(</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UART_RXFIFO_FULL_INT_ENA_M<sp/>|<sp/>UART_RXFIFO_TOUT_INT_ENA_M<sp/>|<sp/>UART_TXFIFO_EMPTY_INT_ENA_M,<sp/>32,<sp/>5);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>interrupts<sp/>for<sp/>event-driven<sp/>testing:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>line<sp/>pattern<sp/>detection<sp/>with<sp/>proper<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1af5e4768bcbdb44ca149f891c34240eea" kindref="member">EnablePatternDetection</ref>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>1,<sp/>9,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>pattern<sp/>detection:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a15bd8e2881fa195b4e4cdb6b07267c87" kindref="member">ResetPatternQueue</ref>(32);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>pattern<sp/>queue:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event-driven<sp/>pattern<sp/>detection<sp/>enabled<sp/>and<sp/>configured&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pattern_detected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pattern_position<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>events_received<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_events<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pattern_events<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>other_events<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_data<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Command1\nCommand2\nCommand3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_patterns<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_timeout_ms<sp/>=<sp/>5000;<sp/></highlight><highlight class="comment">//<sp/>5<sp/>second<sp/>timeout<sp/>for<sp/>comprehensive<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>test<sp/>data:<sp/>&apos;%s&apos;<sp/>(expecting<sp/>%d<sp/>patterns)&quot;</highlight><highlight class="normal">,<sp/>test_data,<sp/>expected_patterns);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>test<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aae3b52313f5bcf520d34457140a23112" kindref="member">Write</ref>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(test_data),</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(test_data)),<sp/>1000);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>test<sp/>data:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>data<sp/>sent<sp/>successfully,<sp/>monitoring<sp/>event<sp/>queue...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>delay<sp/>to<sp/>allow<sp/>data<sp/>to<sp/>be<sp/>processed<sp/>and<sp/>prevent<sp/>buffer<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(200));</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Monitor<sp/>event<sp/>queue<sp/>with<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/>uint64_t<sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/>uint64_t<sp/>timeout_us<sp/>=<sp/>test_timeout_ms<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((esp_timer_get_time()<sp/>-<sp/>start_time)<sp/>&lt;<sp/>timeout_us)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_event_t<sp/>event;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>receive<sp/>event<sp/>from<sp/>queue<sp/>with<sp/>short<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(event_queue,<sp/>&amp;event,<sp/>pdMS_TO_TICKS(100)))<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>events_received++;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(event.type)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_DATA:<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_events++;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_DATA<sp/>event<sp/>received<sp/>-<sp/>size:<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>event.size);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>data<sp/>to<sp/>clear<sp/>the<sp/>buffer<sp/>and<sp/>trigger<sp/>more<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>read_buffer[256];</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>read_result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a85b041ba28cc9309f7ddf2852f899364" kindref="member">Read</ref>(read_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_buffer),<sp/>100);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>data<sp/>from<sp/>UART<sp/>buffer<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>small<sp/>delay<sp/>to<sp/>prevent<sp/>overwhelming<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PATTERN_DET:<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern_events++;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_PATTERN_DET<sp/>event<sp/>received!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>pattern<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern_position<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1aebf9c60f56ae3b5190d89a3f0c1aa7be" kindref="member">PopPatternPosition</ref>();</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern_position<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern_detected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Pattern<sp/>detected<sp/>at<sp/>position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>pattern_position);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>up<sp/>to<sp/>and<sp/>including<sp/>the<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_len<sp/>=<sp/>pattern_position<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Include<sp/>the<sp/>pattern<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>pattern_buffer[256];</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>available<sp/>data<sp/>before<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffered_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_t<sp/>len_result<sp/>=</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart_get_buffered_data_len(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uart_port_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(uart-&gt;<ref refid="classBaseUart_1ac3cbd2017d912e1ef8a1c64627bdcbf4" kindref="member">GetPort</ref>()),<sp/>&amp;buffered_len);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len_result<sp/>==<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Buffered<sp/>data<sp/>length:<sp/>%zu,<sp/>reading<sp/>up<sp/>to:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>buffered_len,<sp/>read_len);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_len<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffered_len))<sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Adjusting<sp/>read<sp/>length<sp/>from<sp/>%d<sp/>to<sp/>%zu<sp/>(available<sp/>data)&quot;</highlight><highlight class="normal">,<sp/>read_len,</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffered_len);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_len<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffered_len);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6" kindref="member">hf_uart_err_t</ref><sp/>read_result<sp/>=<sp/>uart-&gt;<ref refid="classEspUart_1a85b041ba28cc9309f7ddf2852f899364" kindref="member">Read</ref>(pattern_buffer,<sp/>read_len,<sp/>100);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>==<sp/><ref refid="BaseUart_8h_1a2d1602c74bec15db56875b8f2925c5b6ab1d931babc3d80897766d05cd169cbe4" kindref="member">hf_uart_err_t::UART_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Pattern<sp/>data<sp/>read<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>pattern<sp/>position&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FIFO_OVF:<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_FIFO_OVF<sp/>event<sp/>-<sp/>clearing<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a0d4beb1af47d1581fd753a0ade58378b" kindref="member">FlushRx</ref>();</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueReset(event_queue);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BUFFER_FULL:<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_BUFFER_FULL<sp/>event<sp/>-<sp/>clearing<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a0d4beb1af47d1581fd753a0ade58378b" kindref="member">FlushRx</ref>();</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueReset(event_queue);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_BREAK:<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_BREAK<sp/>event<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_PARITY_ERR:<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_PARITY_ERR<sp/>event<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_FRAME_ERR:<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_FRAME_ERR<sp/>event<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_DATA_BREAK:<sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_DATA_BREAK<sp/>event<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_WAKEUP:<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_WAKEUP<sp/>event<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>UART_EVENT_MAX:<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART_EVENT_MAX<sp/>event<sp/>received<sp/>(should<sp/>not<sp/>happen)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other_events++;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>UART<sp/>event<sp/>type:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>event.type);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we&apos;ve<sp/>received<sp/>enough<sp/>pattern<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern_events<sp/>&gt;=<sp/>expected_patterns)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>expected<sp/>number<sp/>of<sp/>pattern<sp/>events<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>expected_patterns);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>to<sp/>prevent<sp/>tight<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10));</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>timeout<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>uint64_t<sp/>elapsed_time<sp/>=<sp/>(esp_timer_get_time()<sp/>-<sp/>start_time)<sp/>/<sp/>1000;<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event<sp/>monitoring<sp/>completed<sp/>in<sp/>%llu<sp/>ms&quot;</highlight><highlight class="normal">,<sp/>elapsed_time);</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>comprehensive<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Event-driven<sp/>pattern<sp/>detection<sp/>results:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Total<sp/>events<sp/>received:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>events_received);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Data<sp/>events:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>data_events);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Pattern<sp/>events:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>pattern_events);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Other<sp/>events:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>other_events);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Pattern<sp/>detected:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>pattern_detected<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Pattern<sp/>position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>pattern_position);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>patterns:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>expected_patterns);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>uart-&gt;<ref refid="classEspUart_1a41b46b421647bc6181d207651590375f" kindref="member">DisablePatternDetection</ref>();</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>test<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test_passed<sp/>=<sp/>(pattern_events<sp/>&gt;=<sp/>expected_patterns)<sp/>&amp;&amp;<sp/>pattern_detected;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_passed)<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Event-driven<sp/>pattern<sp/>detection<sp/>test<sp/>completed<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[FAILED]<sp/>Event-driven<sp/>pattern<sp/>detection<sp/>test<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected:<sp/>%d<sp/>patterns,<sp/>Received:<sp/>%d<sp/>patterns&quot;</highlight><highlight class="normal">,<sp/>expected_patterns,</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern_events);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Pattern<sp/>detected:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>pattern_detected<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;YES&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_passed;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1ae72ee127a4e8aa04256bba3a41f99d72" kindref="member">test_uart_cleanup</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>UART<sp/>cleanup...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>UART<sp/>instance<sp/>just<sp/>to<sp/>test<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><ref refid="structhf__uart__config__t" kindref="compound">hf_uart_config_t</ref><sp/>config<sp/>=<sp/><ref refid="LoggerComprehensiveTest_8cpp_1a7561dcdad310ef1e8b65ded24f9cef36" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uart<sp/>=<sp/>std::make_unique&lt;EspUart&gt;(config);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart)<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>UART<sp/>instance<sp/>for<sp/>cleanup<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!uart-&gt;<ref refid="classBaseUart_1a3551794eb6e958cbdf8c15aec49c4433" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>UART<sp/>for<sp/>cleanup<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>instance<sp/>created<sp/>and<sp/>initialized<sp/>for<sp/>cleanup<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>destructor<sp/>will<sp/>be<sp/>called<sp/>when<sp/>the<sp/>unique_ptr<sp/>is<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>uart.reset();</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>UART<sp/>cleanup<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAIN<sp/>TEST<sp/>EXECUTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="UartComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" kindref="member">app_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╔════════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>UART<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╚════════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Target:<sp/>ESP32-C6<sp/>DevKit-M-1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>ESP-IDF:<sp/>v5.5+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Features:<sp/>UART,<sp/>Baud<sp/>Rate<sp/>Configuration,<sp/>Flow<sp/>Control,<sp/>Pattern<sp/>Detection,<sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Buffer<sp/>Operations,<sp/>Advanced<sp/>Features,<sp/>Communication<sp/>Modes,<sp/>Async<sp/>Operations,<sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Callbacks,<sp/>Statistics<sp/>and<sp/>Diagnostics,<sp/>printf<sp/>Support,<sp/>Error<sp/>Handling,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>ESP32-C6<sp/>Features,<sp/>Performance,<sp/>Callback<sp/>Verification,<sp/>User<sp/>Event<sp/>Task,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Event-Driven<sp/>Pattern<sp/>Detection,<sp/>Cleanup<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Architecture:<sp/>noexcept<sp/>(no<sp/>exception<sp/>handling)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╚════════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>progression<sp/>indicator<sp/>is<sp/>automatically<sp/>initialized<sp/>by<sp/>the<sp/>test<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>test<sp/>section<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a200bb35a3a48c625b9cb8d2511d6bd87" kindref="member">print_test_section_status</ref>(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>all<sp/>UART<sp/>tests<sp/>based<sp/>on<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>CORE<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor/Destructor<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>constructor/destructor<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;uart_construction&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ac8e0d768a7b27970a27fd6f47b35a278" kindref="member">test_uart_construction</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;uart_initialization&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a96732d2453431f2a10801aca28f87ef2" kindref="member">test_uart_initialization</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>Communication<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>basic<sp/>communication<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;basic_communication&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ae7d6a88afbea00b65d07f2f16489ee09" kindref="member">test_uart_basic_communication</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;baud_rate_configuration&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a54ed1f691466c4f1be25f4244b503215" kindref="member">test_uart_baud_rate_configuration</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporarily<sp/>skip<sp/>flow<sp/>control<sp/>test<sp/>due<sp/>to<sp/>ESP32-C6<sp/>compatibility<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RUN_TEST_IN_TASK(&quot;flow_control&quot;,<sp/>test_uart_flow_control,<sp/>8192,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a5dae68800c6d4c45ad3c26ae338538ad" kindref="member">ENABLE_BASIC_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>BASIC<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>Operations<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>buffer<sp/>operations<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;buffer_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1adeb9395ef6454af2b1e913407b9f7cea" kindref="member">test_uart_buffer_operations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>ADVANCED<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advanced<sp/>Features<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>advanced<sp/>feature<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>pattern<sp/>detection<sp/>test<sp/>in<sp/>a<sp/>separate<sp/>task<sp/>with<sp/>larger<sp/>stack<sp/>for<sp/>event<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;pattern_detection&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a6b520324bac3af608d188cf27d87b09b" kindref="member">test_uart_pattern_detection</ref>,<sp/>8192,<sp/>5);</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;advanced_features&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ab5c278ed08ee85a09c9121529e14b1e5" kindref="member">test_uart_advanced_features</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;communication_modes&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1aa317317d3687febfd06a80dbec71dd12" kindref="member">test_uart_communication_modes</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;async_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a1115c7fc5d104b77f83335969c3d34b9" kindref="member">test_uart_async_operations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a0a8d4d070d9a30498e4b478604a72dfa" kindref="member">ENABLE_CALLBACK_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>CALLBACK<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback<sp/>and<sp/>Support<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>callback<sp/>and<sp/>support<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;callbacks&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1abd61d20bea3c0c5a2f29ac2d209b750b" kindref="member">test_uart_callbacks</ref>,<sp/>8192,<sp/>1);<sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;statistics_diagnostics&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a5917129d95ebe007f1077769fede64f1" kindref="member">test_uart_statistics_diagnostics</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;printf_support&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ae5a428b08a1c71ebdd8dfc1e60410b09" kindref="member">test_uart_printf_support</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;error_handling&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1afdc0b960eadfff575ebbed04ee6e8558" kindref="member">test_uart_error_handling</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1aaf2cc16434e0f7cca58940f8804c59b1" kindref="member">ENABLE_ESP_SPECIFIC_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>ESP-SPECIFIC<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>specific<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>ESP32-C6<sp/>specific<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;esp32c6_features&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ae941fce65170b2d06aeb7cabc286f459" kindref="member">test_uart_esp32c6_features</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;performance&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ae9f081767d0cc270b345c2ed1dbc84d2" kindref="member">test_uart_performance</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;callback_verification&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ac4369d3c587d1df18e5a81e894f1a202" kindref="member">test_uart_callback_verification</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="UartComprehensiveTest_8cpp_1a987327fdfab23d745976f9d14327f810" kindref="member">ENABLE_EVENT_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>EVENT<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>Event<sp/>Task<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>user<sp/>event<sp/>task<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;user_event_task&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a77cc6cbaed3a439f7b4a10a8dfbd734f" kindref="member">test_uart_user_event_task</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comprehensive<sp/>Event-Driven<sp/>Pattern<sp/>Detection<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>comprehensive<sp/>event-driven<sp/>pattern<sp/>detection<sp/>test...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>test<sp/>runs<sp/>with<sp/>5-second<sp/>timeout<sp/>and<sp/>comprehensive<sp/>event<sp/>monitoring&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;It<sp/>will<sp/>test<sp/>the<sp/>complete<sp/>event<sp/>queue<sp/>behavior<sp/>for<sp/>pattern<sp/>detection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;event_driven_pattern_detection&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a371a3496edbd32ad6106bbfa596c2e60" kindref="member">test_uart_event_driven_pattern_detection</ref>,</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(<ref refid="UartComprehensiveTest_8cpp_1a1e04670c744f4deed0f91ee0315a0ecc" kindref="member">ENABLE_CLEANUP_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>CLEANUP<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>cleanup<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;cleanup&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1ae72ee127a4e8aa04256bba3a41f99d72" kindref="member">test_uart_cleanup</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab7e4c076755ecdf2ad6212cb8f6578ab" kindref="member">print_test_summary</ref>(<ref refid="UartComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART&quot;</highlight><highlight class="normal">,<sp/><ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UART<sp/>comprehensive<sp/>testing<sp/>completed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;System<sp/>will<sp/>continue<sp/>running.<sp/>Press<sp/>RESET<sp/>to<sp/>restart<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Post-test<sp/>banner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╔════════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>UART<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╚════════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>progression<sp/>indicator<sp/>is<sp/>automatically<sp/>cleaned<sp/>up<sp/>by<sp/>the<sp/>test<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="UartComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;System<sp/>up<sp/>and<sp/>running<sp/>for<sp/>%d<sp/>seconds&quot;</highlight><highlight class="normal">,<sp/>esp_timer_get_time()<sp/>/<sp/>1000000);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10000));</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="examples/esp32/main/UartComprehensiveTest.cpp"/>
  </compounddef>
</doxygen>
