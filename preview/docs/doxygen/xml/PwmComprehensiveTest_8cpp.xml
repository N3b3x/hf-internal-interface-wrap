<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="PwmComprehensiveTest_8cpp" kind="file" language="C++">
    <compoundname>PwmComprehensiveTest.cpp</compoundname>
    <includes refid="TestFramework_8h" local="yes">TestFramework.h</includes>
    <includes refid="BasePwm_8h" local="yes">base/BasePwm.h</includes>
    <includes refid="EspGpio_8h" local="yes">mcu/esp32/EspGpio.h</includes>
    <includes refid="EspPwm_8h" local="yes">mcu/esp32/EspPwm.h</includes>
    <includes local="no">array</includes>
    <incdepgraph>
      <node id="1">
        <label>examples/esp32/main/PwmComprehensiveTest.cpp</label>
        <link refid="PwmComprehensiveTest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TestFramework.h</label>
        <link refid="TestFramework_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>BaseGpio.h</label>
        <link refid="BaseGpio_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>base/BasePwm.h</label>
        <link refid="BasePwm_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>mcu/esp32/EspGpio.h</label>
        <link refid="EspGpio_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>mcu/esp32/EspPwm.h</label>
        <link refid="EspPwm_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>EspTypes_Base.h</label>
        <link refid="EspTypes__Base_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>EspTypes_GPIO.h</label>
        <link refid="EspTypes__GPIO_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>utils/EspTypes_PWM.h</label>
        <link refid="EspTypes__PWM_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>../../utils/McuSelect.h</label>
        <link refid="McuSelect_8h"/>
      </node>
      <node id="25">
        <label>RtosMutex.h</label>
        <link refid="RtosMutex_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>array</label>
      </node>
      <node id="21">
        <label>atomic</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="13">
        <label>driver/gpio.h</label>
      </node>
      <node id="29">
        <label>driver/ledc.h</label>
      </node>
      <node id="14">
        <label>esp_attr.h</label>
      </node>
      <node id="3">
        <label>esp_log.h</label>
      </node>
      <node id="4">
        <label>esp_timer.h</label>
      </node>
      <node id="5">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="6">
        <label>freertos/queue.h</label>
      </node>
      <node id="7">
        <label>freertos/semphr.h</label>
      </node>
      <node id="8">
        <label>freertos/task.h</label>
      </node>
      <node id="16">
        <label>functional</label>
      </node>
      <node id="11">
        <label>limits</label>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
      <node id="28">
        <label>string</label>
      </node>
      <node id="17">
        <label>string_view</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;PWM_Test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="41" column="19" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" prot="public" static="yes" mutable="no">
        <type><ref refid="structTestResults" kindref="compound">TestResults</ref></type>
        <definition>TestResults g_test_results</definition>
        <argsstring></argsstring>
        <name>g_test_results</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="42" column="20" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CORE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CORE_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="50" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a3b87425d773ae21581c79757b028a305" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CONFIGURATION_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CONFIGURATION_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="51" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a05671e7c3b2a396d167591bc71f6f3aa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CHANNEL_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CHANNEL_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="53" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a96d016e653ce6543b0f33c810fbd99ae" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CONTROL_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CONTROL_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="54" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ADVANCED_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ADVANCED_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="55" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1aaf2cc16434e0f7cca58940f8804c59b1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ESP_SPECIFIC_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ESP_SPECIFIC_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="57" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1ae22f0bc7e64b36b6e5a363bb7476c300" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_RESOLUTION_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_RESOLUTION_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="59" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a7b508df4d2c3c64ab4a9ad64bac43490" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_DIAGNOSTIC_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_DIAGNOSTIC_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="60" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a607ec39049dad2c67f0ab145e0311397" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_STRESS_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_STRESS_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="61" column="23" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" prot="public" static="yes" mutable="no">
        <type>volatile bool</type>
        <definition>volatile bool g_fade_callback_called[HF_PWM_MAX_CHANNELS]</definition>
        <argsstring>[HF_PWM_MAX_CHANNELS]</argsstring>
        <name>g_fade_callback_called</name>
        <initializer>= {false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1329" column="22" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1329" bodyend="1329"/>
      </memberdef>
      <memberdef kind="variable" id="PwmComprehensiveTest_8cpp_1a555d212042ea711aa643fc49c6aea024" prot="public" static="yes" mutable="no">
        <type>volatile <ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
        <definition>volatile hf_channel_id_t g_last_fade_channel</definition>
        <argsstring></argsstring>
        <name>g_last_fade_channel</name>
        <initializer>= 0xFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1330" column="33" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1330" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref></type>
        <definition>hf_pwm_unit_config_t create_test_config</definition>
        <argsstring>() noexcept</argsstring>
        <name>create_test_config</name>
        <briefdescription>
<para>Create a default PWM configuration for testing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Configured PWM unit configuration for basic testing</para>
</simplesect>
Creates a standard test configuration with:<itemizedlist>
<listitem><para>Basic PWM mode (no fade)</para>
</listitem><listitem><para>APB clock source (80MHz)</para>
</listitem><listitem><para>Interrupts enabled</para>
</listitem><listitem><para>Fade functionality disabled for basic testing </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="77" column="22" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a08fef0b80847f218eb81531069b0ca89" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref></type>
        <definition>hf_pwm_unit_config_t create_fade_test_config</definition>
        <argsstring>() noexcept</argsstring>
        <name>create_fade_test_config</name>
        <briefdescription>
<para>Create a PWM configuration specifically for fade testing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="91" column="22" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="91" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a45787397a6d50d49ef7cd5735893a675" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref></type>
        <definition>hf_pwm_unit_config_t create_basic_with_fade_config</definition>
        <argsstring>() noexcept</argsstring>
        <name>create_basic_with_fade_config</name>
        <briefdescription>
<para>Create a PWM configuration for basic mode with fade enabled (for channel enable operations) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="106" column="22" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="106" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref></type>
        <definition>hf_pwm_channel_config_t create_test_channel_config</definition>
        <argsstring>(hf_gpio_num_t gpio_pin, hf_u32_t frequency_hz=HF_PWM_DEFAULT_FREQUENCY, hf_u8_t resolution_bits=HF_PWM_DEFAULT_RESOLUTION) noexcept</argsstring>
        <name>create_test_channel_config</name>
        <param>
          <type><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref></type>
          <declname>gpio_pin</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
          <defval><ref refid="EspTypes__PWM_8h_1ae522afd7305f23439344ed06a817091c" kindref="member">HF_PWM_DEFAULT_FREQUENCY</ref></defval>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
          <defval><ref refid="EspTypes__PWM_8h_1a92cb7b8188635483e620a8cf14826a04" kindref="member">HF_PWM_DEFAULT_RESOLUTION</ref></defval>
        </param>
        <briefdescription>
<para>Create a default channel configuration for testing with explicit resolution control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO pin number for PWM output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM frequency in Hz (default: 1kHz) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM resolution in bits (default: 10-bit) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Configured PWM channel configuration for testing</para>
</simplesect>
Creates a standard channel configuration with:<itemizedlist>
<listitem><para>50% initial duty cycle</para>
</listitem><listitem><para>APB clock source preference</para>
</listitem><listitem><para>Basic PWM mode</para>
</listitem><listitem><para>No output inversion</para>
</listitem><listitem><para>Low priority (non-critical) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="131" column="25" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="131" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a2208a634124362f28a999541273e19a7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref></type>
        <definition>hf_pwm_channel_config_t create_test_channel_config_with_duty</definition>
        <argsstring>(hf_gpio_num_t gpio_pin, float duty_percentage, hf_u32_t frequency_hz=HF_PWM_DEFAULT_FREQUENCY, hf_u8_t resolution_bits=HF_PWM_DEFAULT_RESOLUTION) noexcept</argsstring>
        <name>create_test_channel_config_with_duty</name>
        <param>
          <type><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref></type>
          <declname>gpio_pin</declname>
        </param>
        <param>
          <type>float</type>
          <declname>duty_percentage</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
          <defval><ref refid="EspTypes__PWM_8h_1ae522afd7305f23439344ed06a817091c" kindref="member">HF_PWM_DEFAULT_FREQUENCY</ref></defval>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
          <defval><ref refid="EspTypes__PWM_8h_1a92cb7b8188635483e620a8cf14826a04" kindref="member">HF_PWM_DEFAULT_RESOLUTION</ref></defval>
        </param>
        <briefdescription>
<para>Create channel configuration with specific duty cycle percentage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="163" column="25" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="163" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a6c0ea104bbc969773b0f0fc01ce59427" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_constructor_default</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_constructor_default</name>
        <briefdescription>
<para>Test PWM constructor variations and object creation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all constructor tests pass, false otherwise</para>
</simplesect>
Validates proper object construction without hardware initialization:<itemizedlist>
<listitem><para>Default constructor with minimal configuration</para>
</listitem><listitem><para>Constructor with explicit unit configuration</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>No hardware initialization occurs during construction (lazy initialization pattern) </para>
</simplesect>
<simplesect kind="warning"><para>All constructors must complete without exceptions (noexcept specification) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="191" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="191" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a41856ae7947b93a6270aeb52871efcdc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_destructor_cleanup</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_destructor_cleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="206" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="206" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1ad71f1413a26f4b0370ba42830f528d3f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_initialization_states</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_initialization_states</name>
        <briefdescription>
<para>Test PWM initialization state management and lifecycle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all initialization state tests pass, false otherwise</para>
</simplesect>
Validates proper initialization state transitions:<itemizedlist>
<listitem><para>Initial uninitialized state after construction</para>
</listitem><listitem><para>Manual initialization with Initialize() method</para>
</listitem><listitem><para>Double initialization protection (returns ALREADY_INITIALIZED)</para>
</listitem><listitem><para>Proper deinitialization with Deinitialize() method</para>
</listitem><listitem><para>State consistency throughout lifecycle</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Tests the explicit initialization path (not lazy initialization) </para>
</simplesect>
<simplesect kind="warning"><para>All state transitions must be atomic and thread-safe </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="248" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="248" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a9b5608cb08732b47ed3fcc5876d432a1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_lazy_initialization</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_lazy_initialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="295" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="295" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1afe02537ea9fba65fe574969bebc62a93" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_mode_configuration</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_mode_configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="337" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="337" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a0551324b7cb1ff7a6e773d33ae6ec63b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_clock_source_configuration</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_clock_source_configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="376" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="376" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1ae94920ac9ac5ef7b7e19227a543aa897" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_channel_configuration</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_channel_configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="446" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="446" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a2eb3a0fe3d5de0753e21fc501eb747b2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_channel_enable_disable</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_channel_enable_disable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="518" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="518" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a11f709a7441945bedb2ad074efaf6a56" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_duty_cycle_control</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_duty_cycle_control</name>
        <briefdescription>
<para>Test comprehensive duty cycle control functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all duty cycle tests pass, false otherwise</para>
</simplesect>
Validates precise duty cycle control across full range:<itemizedlist>
<listitem><para><bold>Float Interface:</bold> Tests 0%, 25%, 50%, 75%, 100% duty cycles</para>
</listitem><listitem><para><bold>Raw Interface:</bold> Tests raw values 0, 256, 512, 768, 1023 (10-bit)</para>
</listitem><listitem><para><bold>Input Validation:</bold> Tests rejection of invalid values (-0.1, 1.1)</para>
</listitem><listitem><para><bold>Accuracy Verification:</bold> Confirms readback values match set values</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Uses GPIO 2 for PWM output with 1kHz frequency @ 10-bit resolution </para>
</simplesect>
<simplesect kind="warning"><para>Duty cycle accuracy should be within ±1% of commanded value</para>
</simplesect>
<simplesect kind="see"><para><ref refid="PwmComprehensiveTest_8cpp_1a8cc5aa996f5e4b3f05b78e15c919c290" kindref="member">test_resolution_specific_duty_cycles()</ref> for resolution-specific testing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="597" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="597" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1aea28a233901023f44d7a08da1b2ee9bd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_frequency_control</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_frequency_control</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="665" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="665" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a6796ed18fb6c3ac50a1693b5e42978d8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_phase_shift_control</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_phase_shift_control</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="719" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="719" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a02ccbe5f6ff3043080fad263164442e7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_synchronized_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_synchronized_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="781" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="781" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1acc4bc44ec78fcec6b27c2fa6be8ce89b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_complementary_outputs</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_complementary_outputs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="839" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="839" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a294dc78c7a9fbc19a1fa82d4e098894a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_hardware_fade</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_hardware_fade</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="885" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="885" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1afa9cc9b2b8decba4deb1bcff1be6dd5e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_idle_level_control</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_idle_level_control</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="963" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="963" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1ab38a32943c773daa1ec468e36a96e3d2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_timer_management</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_timer_management</name>
        <briefdescription>
<para>Test comprehensive LEDC timer resource management. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all timer management tests pass, false otherwise</para>
</simplesect>
Validates advanced timer allocation and management features:</para>
<para><bold>Phase 1: Basic Timer Allocation</bold><itemizedlist>
<listitem><para>Tests automatic timer assignment for different frequency/resolution combinations</para>
</listitem><listitem><para>Validates timer sharing optimization for compatible frequencies</para>
</listitem><listitem><para>Confirms proper timer resource tracking</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 2: Timer Exhaustion Scenarios</bold><itemizedlist>
<listitem><para>Tests behavior when all timers are allocated with incompatible combinations</para>
</listitem><listitem><para>Validates proper error reporting (TIMER_CONFLICT)</para>
</listitem><listitem><para>Confirms system stability under resource pressure</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 3: Compatible Frequency Reuse</bold><itemizedlist>
<listitem><para>Tests timer sharing for frequencies within tolerance (±5%)</para>
</listitem><listitem><para>Validates resource optimization and efficiency</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 4: Timer Recovery</bold><itemizedlist>
<listitem><para>Tests timer resource recovery after channel release</para>
</listitem><listitem><para>Validates automatic cleanup and reallocation</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 5: Forced Timer Assignment</bold><itemizedlist>
<listitem><para>Tests manual timer assignment with ForceTimerAssignment()</para>
</listitem><listitem><para>Validates override of automatic allocation</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 6: Diagnostics Validation</bold><itemizedlist>
<listitem><para>Tests statistics and diagnostics reporting accuracy</para>
</listitem><listitem><para>Validates resource usage tracking</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This test exercises the core LEDC timer management algorithms </para>
</simplesect>
<simplesect kind="warning"><para>Timer allocation behavior may vary between ESP32 variants</para>
</simplesect>
<simplesect kind="see"><para>FindOrAllocateTimer() for <ref refid="group__timer" kindref="compound">Timer Module</ref> allocation implementation </para>
</simplesect>
<simplesect kind="see"><para>ForceTimerAssignment() for manual <ref refid="group__timer" kindref="compound">Timer Module</ref> control </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1040" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1040" bodyend="1203"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1ad9eec9feb6f6252773b3a945a31576de" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_status_reporting</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_status_reporting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1209" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1209" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1ac6ee19f88b989b8170183b9c6f96f7a8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_statistics_and_diagnostics</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_statistics_and_diagnostics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1267" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1267" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a4d72f44075be125be5c74a61dd49d3e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fade_callback_ch0</definition>
        <argsstring>(hf_channel_id_t channel_id)</argsstring>
        <name>test_fade_callback_ch0</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1332" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1332" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a9c947f6df5f2cf6a81fb36c7c06ae780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_fade_callback_ch1</definition>
        <argsstring>(hf_channel_id_t channel_id)</argsstring>
        <name>test_fade_callback_ch1</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1339" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1339" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1ac279348bbae6927b73186a65e9f7536e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_callbacks</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_callbacks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1346" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1346" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a0388efdb95291842f5888945249ee804" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_basic_mode_without_fade</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_basic_mode_without_fade</name>
        <briefdescription>
<para>Test basic mode without fade functionality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1426" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1426" bodyend="1461"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a53bd3b7c698049eee1ab5ec7bb6f6dff" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_fade_mode_functionality</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_fade_mode_functionality</name>
        <briefdescription>
<para>Test fade mode functionality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1466" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1466" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a8cc5aa996f5e4b3f05b78e15c919c290" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_resolution_specific_duty_cycles</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_resolution_specific_duty_cycles</name>
        <briefdescription>
<para>Test resolution-specific duty cycle accuracy (NEW CRITICAL TEST) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1529" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1529" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a6b01aa170c426e6d376fb80186362494" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_frequency_resolution_validation</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_frequency_resolution_validation</name>
        <briefdescription>
<para>Test frequency/resolution validation (NEW CRITICAL TEST) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1618" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1618" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1aaef554a318adc1d66d07e793bb4c59be" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_enhanced_validation_system</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_enhanced_validation_system</name>
        <briefdescription>
<para>Test enhanced validation system with clock source awareness (NEW) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all validation system tests pass, false otherwise</para>
</simplesect>
Comprehensive validation of the LEDC peripheral constraint system:</para>
<para><bold>Phase 1: Clock Source Validation</bold><itemizedlist>
<listitem><para>Tests APB clock (80MHz) with various frequency/resolution combinations</para>
</listitem><listitem><para>Validates hardware constraint formula: freq × (2^resolution) ≤ clock_freq</para>
</listitem><listitem><para>Verifies proper error reporting for invalid combinations</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 2: Dynamic Resolution Calculation</bold><itemizedlist>
<listitem><para>Tests maximum achievable resolution for given frequencies</para>
</listitem><listitem><para>Validates theoretical vs. practical resolution limits</para>
</listitem><listitem><para>Confirms hardware constraint calculations</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 3: Enhanced Duty Cycle Validation</bold><itemizedlist>
<listitem><para>Tests overflow protection for different resolutions</para>
</listitem><listitem><para>Validates automatic clamping of out-of-range values</para>
</listitem><listitem><para>Confirms resolution-specific duty cycle ranges</para>
</listitem></itemizedlist>
</para>
<para><bold>Phase 4: Auto-Fallback Functionality</bold><itemizedlist>
<listitem><para>Tests automatic resolution adjustment for problematic combinations</para>
</listitem><listitem><para>Validates fallback resolution selection algorithms</para>
</listitem><listitem><para>Confirms graceful handling of impossible combinations</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This test validates the core LEDC peripheral constraint system </para>
</simplesect>
<simplesect kind="warning"><para>Tests may fail on ESP32 variants with different LEDC capabilities</para>
</simplesect>
<simplesect kind="see"><para><ref refid="PwmComprehensiveTest_8cpp_1a6b01aa170c426e6d376fb80186362494" kindref="member">test_frequency_resolution_validation()</ref> for basic constraint testing </para>
</simplesect>
<simplesect kind="see"><para>SetFrequencyWithAutoFallback() for automatic resolution adjustment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1724" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1724" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a78255391f2dd8215198f46bc83601df4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_percentage_consistency_across_resolutions</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_percentage_consistency_across_resolutions</name>
        <briefdescription>
<para>Test percentage consistency across different resolutions (NEW) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="1917" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="1917" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1aea88426d552b48deec0d8006279bef54" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_resolution_control_methods</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_resolution_control_methods</name>
        <briefdescription>
<para>Test direct resolution control methods (NEW) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="2016" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="2016" bodyend="2146"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a8bb3bdb1657c2758fb3049465f9ebd52" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_resolution_aware_duty_calculations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_resolution_aware_duty_calculations</name>
        <briefdescription>
<para>Test resolution-aware duty cycle calculations (NEW) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="2151" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="2151" bodyend="2241"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1aaddaa643d024a35a1d341f5230405cfe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_edge_cases</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_edge_cases</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="2247" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="2247" bodyend="2300"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a3324381fcc00abcf4d6b91b96eed3019" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_stress_scenarios</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_stress_scenarios</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="2302" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="2302" bodyend="2477"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a7b8e8682b04fa66fab4fd296bda2e832" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_timer_health_check_and_recovery</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_timer_health_check_and_recovery</name>
        <briefdescription>
<para>Test timer health check and recovery mechanisms (NEW) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="2482" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="2482" bodyend="2629"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a687562e8e2d6d9b6bd37d9d1fa638ed3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_safe_eviction_policies</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_safe_eviction_policies</name>
        <briefdescription>
<para>Test safe eviction policies (NEW CRITICAL SAFETY TEST) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="2634" column="6" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="2634" bodyend="2759"/>
      </memberdef>
      <memberdef kind="function" id="PwmComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void app_main</definition>
        <argsstring>(void)</argsstring>
        <name>app_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/PwmComprehensiveTest.cpp" line="2765" column="17" bodyfile="examples/esp32/main/PwmComprehensiveTest.cpp" bodystart="2765" bodyend="2945"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Comprehensive PWM testing suite for ESP32 family (noexcept) </para>
    </briefdescription>
    <detaileddescription>
<para>This comprehensive test suite validates all functionality of the <ref refid="classEspPwm" kindref="compound">EspPwm</ref> class across different ESP32 variants, with particular focus on LEDC peripheral capabilities and constraints:</para>
<sect2 id="PwmComprehensiveTest_8cpp_1autotoc_md21">
<title>Test Coverage:</title><para><itemizedlist>
<listitem><para><bold>Lifecycle Management:</bold> Constructor/Destructor, Initialize/Deinitialize</para>
</listitem><listitem><para><bold>Configuration:</bold> Modes, clock sources, unit configuration</para>
</listitem><listitem><para><bold>Channel Management:</bold> Configure, enable/disable, validation</para>
</listitem><listitem><para><bold>PWM Control:</bold> Duty cycle, frequency, resolution control</para>
</listitem><listitem><para><bold>Advanced Features:</bold> Synchronized operations, complementary outputs</para>
</listitem><listitem><para><bold>ESP32-Specific:</bold> Hardware fade, idle levels, timer management</para>
</listitem><listitem><para><bold>LEDC Validation:</bold> Clock source constraints, frequency/resolution limits</para>
</listitem><listitem><para><bold>Resource Management:</bold> Timer allocation, eviction policies, health checks</para>
</listitem><listitem><para><bold>Status &amp; Diagnostics:</bold> Statistics, error reporting, capability detection</para>
</listitem><listitem><para><bold>Callbacks:</bold> Fade callback mechanisms (ESP-IDF LEDC native support only)</para>
</listitem><listitem><para><bold>Edge Cases &amp; Stress:</bold> Boundary conditions, resource exhaustion, recovery</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="PwmComprehensiveTest_8cpp_1autotoc_md22">
<title>Hardware Requirements:</title><para><itemizedlist>
<listitem><para>ESP32 development board (any variant: ESP32, ESP32-S2/S3, ESP32-C3/C6, ESP32-H2)</para>
</listitem><listitem><para>GPIO pins for PWM output testing (configurable)</para>
</listitem><listitem><para>Optional: Logic analyzer or oscilloscope for signal verification</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="PwmComprehensiveTest_8cpp_1autotoc_md23">
<title>Test Progression Indicator:</title><para>GPIO14 toggles HIGH/LOW after each test completion for visual feedback. This allows monitoring test progress without serial output.</para>
<para><simplesect kind="note"><para>This test suite is designed to be variant-agnostic and will adapt to the specific LEDC capabilities of the target ESP32 variant. </para>
</simplesect>
</para>
</sect2>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="TestFramework_8h" kindref="compound">TestFramework.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="BasePwm_8h" kindref="compound">base/BasePwm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspGpio_8h" kindref="compound">mcu/esp32/EspGpio.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>GPIO<sp/>support<sp/>for<sp/>test<sp/>progression<sp/>indicator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspPwm_8h" kindref="compound">mcu/esp32/EspPwm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PWM_Test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structTestResults" kindref="compound">TestResults</ref><sp/><ref refid="PwmComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>SECTION<sp/>CONFIGURATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable/disable<sp/>specific<sp/>test<sp/>categories<sp/>by<sp/>setting<sp/>to<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Core<sp/>PWM<sp/>functionality<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Constructor/destructor,<sp/>lifecycle,<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a3b87425d773ae21581c79757b028a305" kindref="member">ENABLE_CONFIGURATION_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mode,<sp/>clock<sp/>source,<sp/>basic<sp/>mode<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a05671e7c3b2a396d167591bc71f6f3aa" kindref="member">ENABLE_CHANNEL_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>management,<sp/>enable/disable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a96d016e653ce6543b0f33c810fbd99ae" kindref="member">ENABLE_CONTROL_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Duty<sp/>cycle,<sp/>frequency,<sp/>phase<sp/>shift<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Synchronized<sp/>operations,<sp/>complementary<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1aaf2cc16434e0f7cca58940f8804c59b1" kindref="member">ENABLE_ESP_SPECIFIC_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Hardware<sp/>fade,<sp/>idle<sp/>levels,<sp/>timer<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1ae22f0bc7e64b36b6e5a363bb7476c300" kindref="member">ENABLE_RESOLUTION_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Resolution-specific<sp/>duty<sp/>cycles,<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a7b508df4d2c3c64ab4a9ad64bac43490" kindref="member">ENABLE_DIAGNOSTIC_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Status<sp/>reporting,<sp/>statistics,<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a607ec39049dad2c67f0ab145e0311397" kindref="member">ENABLE_STRESS_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Edge<sp/>cases,<sp/>stress<sp/>scenarios,<sp/>safety<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HELPER<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1aee1e74ef4f6da7c224819db84bc9d873" kindref="member">unit_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1ab6c9882bb8695dbdfd685af69dfdf35a" kindref="member">mode</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faa1c0cd5d0cf074aff5336fcd076047c66" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_BASIC</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1af2993dd547218552aad3ef5cfa324415" kindref="member">base_clock_hz</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1afc05cebb7e350df0e040f5ee863e733b" kindref="member">HF_PWM_APB_CLOCK_HZ</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1a00ac0384b3ff94e53be3f31e95a8e1c4" kindref="member">clock_source</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a2fb4f97b7c1b78586a5f9f8365272822" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1a37b2e0c51eb2962a80131fefe9d64d58" kindref="member">enable_fade</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>mode<sp/>without<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1acaf1bbe7d4fbe729846cd9e2f1ac7a85" kindref="member">enable_interrupts</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/><ref refid="PwmComprehensiveTest_8cpp_1a08fef0b80847f218eb81531069b0ca89" kindref="member">create_fade_test_config</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1aee1e74ef4f6da7c224819db84bc9d873" kindref="member">unit_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1ab6c9882bb8695dbdfd685af69dfdf35a" kindref="member">mode</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faafcaebf50ed45950d02944973268665f3" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_FADE</ref>;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>FADE<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1af2993dd547218552aad3ef5cfa324415" kindref="member">base_clock_hz</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1afc05cebb7e350df0e040f5ee863e733b" kindref="member">HF_PWM_APB_CLOCK_HZ</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1a00ac0384b3ff94e53be3f31e95a8e1c4" kindref="member">clock_source</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a7d16cfde99618b306f8de171107ba44c" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1a37b2e0c51eb2962a80131fefe9d64d58" kindref="member">enable_fade</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>fade<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1acaf1bbe7d4fbe729846cd9e2f1ac7a85" kindref="member">enable_interrupts</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/><ref refid="PwmComprehensiveTest_8cpp_1a45787397a6d50d49ef7cd5735893a675" kindref="member">create_basic_with_fade_config</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1aee1e74ef4f6da7c224819db84bc9d873" kindref="member">unit_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1ab6c9882bb8695dbdfd685af69dfdf35a" kindref="member">mode</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faa1c0cd5d0cf074aff5336fcd076047c66" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_BASIC</ref>;<sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1af2993dd547218552aad3ef5cfa324415" kindref="member">base_clock_hz</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1afc05cebb7e350df0e040f5ee863e733b" kindref="member">HF_PWM_APB_CLOCK_HZ</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1a00ac0384b3ff94e53be3f31e95a8e1c4" kindref="member">clock_source</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a7d16cfde99618b306f8de171107ba44c" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1a37b2e0c51eb2962a80131fefe9d64d58" kindref="member">enable_fade</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>fade<sp/>for<sp/>channel<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1acaf1bbe7d4fbe729846cd9e2f1ac7a85" kindref="member">enable_interrupts</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio_pin,<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency_hz<sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ae522afd7305f23439344ed06a817091c" kindref="member">HF_PWM_DEFAULT_FREQUENCY</ref>,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution_bits<sp/>=<sp/><ref refid="EspTypes__PWM_8h_1a92cb7b8188635483e620a8cf14826a04" kindref="member">HF_PWM_DEFAULT_RESOLUTION</ref>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1a79a176f4a93105a6cea52b834202573d" kindref="member">gpio_pin</ref><sp/>=<sp/>gpio_pin;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1a6a2e4e26bb3b33d74a96f73768195b87" kindref="member">timer_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1aa8d425a4003718321869192e7cf61845" kindref="member">speed_mode</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faa1c0cd5d0cf074aff5336fcd076047c66" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_BASIC</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Explicit<sp/>frequency<sp/>and<sp/>resolution<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1ae0d6701420e415a74e1e3c2212dc9b7b" kindref="member">frequency_hz</ref><sp/>=<sp/>frequency_hz;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1af84dfd13ad00faa211f888d3f7855de9" kindref="member">resolution_bits</ref><sp/>=<sp/>resolution_bits;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1a2dd704d7a0507d01b0464d176e264d4b" kindref="member">clock_source</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a2fb4f97b7c1b78586a5f9f8365272822" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>50%<sp/>duty<sp/>cycle<sp/>for<sp/>the<sp/>specified<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>resolution_bits)<sp/>/<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>50%<sp/>duty<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1a0f289853bfbcf35b09a8e2244f62fbd7" kindref="member">intr_type</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1a58935b1b2788129ca9d313445ab9e5b4a911e18551ea86207c7c63892582c354a" kindref="member">hf_pwm_intr_type_t::HF_PWM_INTR_DISABLE</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1a730bf242f726cb01055534f8de47b826" kindref="member">invert_output</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1aa34ec457627357c1c82ab1696ef2786e" kindref="member">hpoint</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1a7feb007616457c057dfa7b257aadce2e" kindref="member">idle_level</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1ad61ccb65c601b8310da94658089b633a" kindref="member">output_invert</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1aefd3b546b1a76f6c4e64c8166b4622a0" kindref="member">is_critical</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1ac5f48dc824d8b32f7ab403dca3d8b0ce" kindref="member">priority</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ad8fbde8152ecafefd714f3a7eb8344c1a4a2343657e145cb3dab4f445d2c29b1f" kindref="member">hf_pwm_channel_priority_t::PRIORITY_LOW</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/><ref refid="PwmComprehensiveTest_8cpp_1a2208a634124362f28a999541273e19a7" kindref="member">create_test_channel_config_with_duty</ref>(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio_pin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duty_percentage,<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency_hz<sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ae522afd7305f23439344ed06a817091c" kindref="member">HF_PWM_DEFAULT_FREQUENCY</ref>,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution_bits<sp/>=<sp/><ref refid="EspTypes__PWM_8h_1a92cb7b8188635483e620a8cf14826a04" kindref="member">HF_PWM_DEFAULT_RESOLUTION</ref>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>config<sp/>=</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(gpio_pin,<sp/>frequency_hz,<sp/>resolution_bits);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>raw<sp/>duty<sp/>value<sp/>for<sp/>the<sp/>specified<sp/>percentage<sp/>and<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>max_duty<sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>resolution_bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(duty_percentage<sp/>*<sp/>max_duty);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSTRUCTOR/DESTRUCTOR<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a6c0ea104bbc969773b0f0fc01ce59427" kindref="member">test_constructor_default</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>default<sp/>constructor...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>constructors<sp/>without<sp/>exception<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm1;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Default<sp/>constructor<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>constructor<sp/>with<sp/>unit<sp/>config</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm2(config);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Constructor<sp/>with<sp/>config<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a41856ae7947b93a6270aeb52871efcdc" kindref="member">test_destructor_cleanup</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>destructor<sp/>cleanup...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>and<sp/>configure<sp/>a<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM<sp/>for<sp/>destructor<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>configured,<sp/>testing<sp/>destructor<sp/>cleanup...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>pwm<sp/>should<sp/>be<sp/>destroyed<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Destructor<sp/>cleanup<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIFECYCLE<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1ad71f1413a26f4b0370ba42830f528d3f" kindref="member">test_initialization_states</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>initialization<sp/>states...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>initial<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>initially&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>manual<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.Initialize();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Manual<sp/>initialization<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>should<sp/>be<sp/>initialized<sp/>after<sp/>Initialize()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>double<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.Initialize();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9acb0980fa63fee3ca282d1a98cff45f9e" kindref="member">hf_pwm_err_t::PWM_ERR_ALREADY_INITIALIZED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Double<sp/>initialization<sp/>should<sp/>return<sp/>ALREADY_INITIALIZED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>deinitialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.Deinitialize();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Deinitialization<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>after<sp/>Deinitialize()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Initialization<sp/>states<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a9b5608cb08732b47ed3fcc5876d432a1" kindref="member">test_lazy_initialization</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>lazy<sp/>initialization...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PWM<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>initially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>initially&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>EnsureInitialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EnsureInitialized()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>should<sp/>be<sp/>initialized<sp/>after<sp/>EnsureInitialized()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>EnsureDeinitialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureDeinitialized())<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EnsureDeinitialized()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>after<sp/>EnsureDeinitialized()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Lazy<sp/>initialization<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONFIGURATION<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1afe02537ea9fba65fe574969bebc62a93" kindref="member">test_mode_configuration</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>mode<sp/>configuration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>basic<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetMode(<ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faa1c0cd5d0cf074aff5336fcd076047c66" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_BASIC</ref>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>basic<sp/>mode:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.GetMode()<sp/>!=<sp/><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faa1c0cd5d0cf074aff5336fcd076047c66" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_BASIC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Mode<sp/>not<sp/>set<sp/>correctly<sp/>to<sp/>BASIC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>fade<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetMode(<ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faafcaebf50ed45950d02944973268665f3" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_FADE</ref>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>fade<sp/>mode:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.GetMode()<sp/>!=<sp/><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3faafcaebf50ed45950d02944973268665f3" kindref="member">hf_pwm_mode_t::HF_PWM_MODE_FADE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Mode<sp/>not<sp/>set<sp/>correctly<sp/>to<sp/>FADE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Mode<sp/>configuration<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a0551324b7cb1ff7a6e773d33ae6ec63b" kindref="member">test_clock_source_configuration</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>per-channel<sp/>clock<sp/>source<sp/>configuration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP32<sp/>clock<sp/>source<sp/>constraints:<sp/>Most<sp/>variants<sp/>require<sp/>shared<sp/>clock<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>clock<sp/>source<sp/>configuration<sp/>(APB<sp/>80MHz<sp/>with<sp/>compatible<sp/>frequencies)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>channels<sp/>with<sp/>APB<sp/>clock<sp/>source<sp/>-<sp/>frequencies<sp/>designed<sp/>for<sp/>timer<sp/>sharing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ClockSourceTest<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio_pin{};</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frequency{};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>resolution{};</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>std::array&lt;ClockSourceTest,<sp/>4&gt;<sp/>tests<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>1000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;1kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{3,<sp/>2000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;2kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{4,<sp/>4000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;4kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{5,<sp/>8000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;8kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tests.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test<sp/>=<sp/>tests[i];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>previous<sp/>configuration<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsChannelEnabled(i))<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pwm.DeconfigureChannel(i);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>with<sp/>APB<sp/>clock<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(test.gpio_pin);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae0d6701420e415a74e1e3c2212dc9b7b" kindref="member">frequency_hz</ref><sp/>=<sp/>test.frequency;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1af84dfd13ad00faa211f888d3f7855de9" kindref="member">resolution_bits</ref><sp/>=<sp/>test.resolution;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1a2dd704d7a0507d01b0464d176e264d4b" kindref="member">clock_source</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a2fb4f97b7c1b78586a5f9f8365272822" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(i,<sp/>ch_config);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>%lu<sp/>(%s):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>test.description,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(i);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>%lu<sp/>(%s):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>test.description,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Channel<sp/>%lu:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>test.description);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));<sp/></highlight><highlight class="comment">//<sp/>Reduced<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Clock<sp/>source<sp/>configuration<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CHANNEL<sp/>MANAGEMENT<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1ae94920ac9ac5ef7b7e19227a543aa897" kindref="member">test_channel_configuration</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>channel<sp/>configuration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>configuring<sp/>multiple<sp/>channels<sp/>with<sp/>different<sp/>resolutions<sp/>(avoid<sp/>GPIO3<sp/>-&gt;<sp/>use<sp/>GPIO6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>instead)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ChannelTestConfig<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>pin{};</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency{};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution{};</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duty_percentage{};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>std::array&lt;ChannelTestConfig,<sp/>4&gt;<sp/>test_configs<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>1000,<sp/>8,<sp/>0.25F},<sp/><sp/></highlight><highlight class="comment">//<sp/>GPIO2:<sp/>1kHz<sp/>@<sp/>8-bit,<sp/>25%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{6,<sp/>2000,<sp/>10,<sp/>0.50F},<sp/></highlight><highlight class="comment">//<sp/>GPIO6:<sp/>2kHz<sp/>@<sp/>10-bit,<sp/>50%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{4,<sp/>1500,<sp/>12,<sp/>0.75F},<sp/></highlight><highlight class="comment">//<sp/>GPIO4:<sp/>1.5kHz<sp/>@<sp/>12-bit,<sp/>75%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{5,<sp/>3000,<sp/>9,<sp/>0.33F}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GPIO5:<sp/>3kHz<sp/>@<sp/>9-bit,<sp/>33%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>4;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test_cfg<sp/>=<sp/>test_configs[ch];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a2208a634124362f28a999541273e19a7" kindref="member">create_test_channel_config_with_duty</ref>(</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_cfg.pin,<sp/>test_cfg.duty_percentage,<sp/>test_cfg.frequency,<sp/>test_cfg.resolution);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(ch,<sp/>ch_config);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ch,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>configuration<sp/>was<sp/>applied<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>actual_resolution<sp/>=<sp/>pwm.GetResolution(ch);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>actual_frequency<sp/>=<sp/>pwm.GetFrequency(ch);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_resolution<sp/>!=<sp/>test_cfg.resolution)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>%d<sp/>resolution<sp/>mismatch:<sp/>expected<sp/>%d,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>ch,<sp/>test_cfg.resolution,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_resolution);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_frequency<sp/>!=<sp/>test_cfg.frequency)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>%d<sp/>frequency<sp/>mismatch:<sp/>expected<sp/>%lu,<sp/>got<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>ch,<sp/>test_cfg.frequency,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_frequency);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>%d<sp/>configured<sp/>successfully:<sp/>%lu<sp/>Hz<sp/>@<sp/>%d-bit,<sp/>%.1f%%<sp/>duty&quot;</highlight><highlight class="normal">,<sp/>ch,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_frequency,<sp/>actual_resolution,<sp/>test_cfg.duty_percentage<sp/>*<sp/>100.0F);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>channel<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>invalid_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(10);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(<ref refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" kindref="member">EspPwm::MAX_CHANNELS</ref>,<sp/>invalid_config);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>channel<sp/>should<sp/>not<sp/>be<sp/>configurable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Channel<sp/>configuration<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a2eb3a0fe3d5de0753e21fc501eb747b2" kindref="member">test_channel_enable_disable</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>channel<sp/>enable/disable...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>a<sp/>channel<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>for<sp/>enable/disable<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>channel<sp/>should<sp/>not<sp/>be<sp/>enabled<sp/>initially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsChannelEnabled(0))<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>should<sp/>not<sp/>be<sp/>enabled<sp/>initially&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>enable<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.IsChannelEnabled(0))<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>should<sp/>be<sp/>enabled<sp/>after<sp/>EnableChannel()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>disable<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.DisableChannel(0);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>channel:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsChannelEnabled(0))<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>should<sp/>not<sp/>be<sp/>enabled<sp/>after<sp/>DisableChannel()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>channel<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(<ref refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" kindref="member">EspPwm::MAX_CHANNELS</ref>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>channel<sp/>should<sp/>not<sp/>be<sp/>enableable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Channel<sp/>enable/disable<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PWM<sp/>CONTROL<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a11f709a7441945bedb2ad074efaf6a56" kindref="member">test_duty_cycle_control</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>duty<sp/>cycle<sp/>control...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>and<sp/>enable<sp/>a<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>duty<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>std::array&lt;float,<sp/>5&gt;<sp/>test_duties<sp/>=<sp/>{{0.0F,<sp/>0.25F,<sp/>0.5F,<sp/>0.75F,<sp/>1.0F}};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>duty<sp/>cycle<sp/>control...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duty<sp/>:<sp/>test_duties)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>duty);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>duty<sp/>cycle<sp/>%.2f:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>duty,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>actual_duty<sp/>=<sp/>pwm.GetDutyCycle(0);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(actual_duty<sp/>-<sp/>duty)<sp/>&gt;<sp/>0.01f)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>small<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>mismatch:<sp/>expected<sp/>%.2f,<sp/>got<sp/>%.2f&quot;</highlight><highlight class="normal">,<sp/>duty,<sp/>actual_duty);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>%.2f<sp/>set<sp/>successfully&quot;</highlight><highlight class="normal">,<sp/>duty);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));<sp/></highlight><highlight class="comment">//<sp/>Brief<sp/>delay<sp/>for<sp/>observation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>raw<sp/>duty<sp/>cycle<sp/>setting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>std::array&lt;hf_u32_t,<sp/>5&gt;<sp/>raw_values<sp/>=<sp/>{{0,<sp/>256,<sp/>512,<sp/>768,<sp/>1023}};<sp/></highlight><highlight class="comment">//<sp/>For<sp/>10-bit<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>raw_val<sp/>:<sp/>raw_values)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetDutyCycleRaw(0,<sp/>raw_val);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>raw<sp/>duty<sp/>cycle<sp/>%lu:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>raw_val,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Raw<sp/>duty<sp/>cycle<sp/>%lu<sp/>set<sp/>successfully&quot;</highlight><highlight class="normal">,<sp/>raw_val);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>duty<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>-0.1F);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Negative<sp/>duty<sp/>cycle<sp/>should<sp/>not<sp/>be<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>1.1f);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>&gt;<sp/>1.0<sp/>should<sp/>not<sp/>be<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Duty<sp/>cycle<sp/>control<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1aea28a233901023f44d7a08da1b2ee9bd" kindref="member">test_frequency_control</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>frequency<sp/>control...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>and<sp/>enable<sp/>a<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>std::array&lt;hf_frequency_hz_t,<sp/>6&gt;<sp/>test_frequencies<sp/>=<sp/>{{100,<sp/>500,<sp/>1000,<sp/>5000,<sp/>10000,<sp/>20000}};</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref><sp/>freq<sp/>:<sp/>test_frequencies)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetFrequency(0,<sp/>freq);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>frequency<sp/>%lu:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>freq,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref><sp/>actual_freq<sp/>=<sp/>pwm.GetFrequency(0);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>some<sp/>tolerance<sp/>for<sp/>frequency<sp/>accuracy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)actual_freq<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)freq)<sp/>&gt;<sp/>freq<sp/>*<sp/>0.05)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>5%<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Frequency<sp/>mismatch:<sp/>expected<sp/>%lu,<sp/>got<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>freq,<sp/>actual_freq);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Frequency<sp/>%lu<sp/>Hz<sp/>set<sp/>successfully<sp/>(actual:<sp/>%lu<sp/>Hz)&quot;</highlight><highlight class="normal">,<sp/>freq,<sp/>actual_freq);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetFrequency(0,<sp/>0);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Zero<sp/>frequency<sp/>should<sp/>not<sp/>be<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetFrequency(0,<sp/><ref refid="EspTypes__PWM_8h_1aefdd9851ea138af7ce3b87a861c9f8b7" kindref="member">HF_PWM_MAX_FREQUENCY</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Frequency<sp/>above<sp/>maximum<sp/>should<sp/>not<sp/>be<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Frequency<sp/>control<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a6796ed18fb6c3ac50a1693b5e42978d8" kindref="member">test_phase_shift_control</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>phase<sp/>shift<sp/>control...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>and<sp/>enable<sp/>channels<sp/>(avoid<sp/>GPIO3<sp/>-&gt;<sp/>use<sp/>GPIO6<sp/>instead)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>3;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>test_pin<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2<sp/>+<sp/>ch);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_pin<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_pin<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(test_pin);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.ConfigureChannel(ch,<sp/>ch_config);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.EnableChannel(ch);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>if<sp/>phase<sp/>shift<sp/>is<sp/>supported<sp/>by<sp/>trying<sp/>to<sp/>set<sp/>a<sp/>valid<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetPhaseShift(0,<sp/>0.0F);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a8c40029a485dd3c141eba9732f61564d" kindref="member">hf_pwm_err_t::PWM_ERR_INVALID_PARAMETER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>LEDC<sp/>doesn&apos;t<sp/>support<sp/>phase<sp/>shift<sp/>-<sp/>skip<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>shift<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>hardware<sp/>-<sp/>skipping<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SKIPPED]<sp/>Phase<sp/>shift<sp/>control<sp/>test<sp/>(hardware<sp/>limitation)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>true<sp/>to<sp/>indicate<sp/>test<sp/>was<sp/>handled<sp/>appropriately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>phase<sp/>shift<sp/>is<sp/>supported,<sp/>so<sp/>run<sp/>the<sp/>full<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>std::array&lt;float,<sp/>4&gt;<sp/>test_phases<sp/>=<sp/>{{0.0F,<sp/>90.0F,<sp/>180.0F,<sp/>270.0F}};</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phase<sp/>=<sp/>test_phases[i];</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetPhaseShift(i,<sp/>phase);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>phase<sp/>shift<sp/>%.1f<sp/>for<sp/>channel<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>phase,<sp/>i,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>shift<sp/>%.1f<sp/>degrees<sp/>set<sp/>for<sp/>channel<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>phase,<sp/>i);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>phase<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetPhaseShift(0,<sp/>400.0F);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>shift<sp/>&gt;<sp/>360<sp/>degrees<sp/>should<sp/>not<sp/>be<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Phase<sp/>shift<sp/>control<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADVANCED<sp/>FEATURES<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a02ccbe5f6ff3043080fad263164442e7" kindref="member">test_synchronized_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>synchronized<sp/>operations...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>multiple<sp/>channels<sp/>(avoid<sp/>GPIO3<sp/>-&gt;<sp/>use<sp/>GPIO6<sp/>instead)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>4;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>test_pin<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2<sp/>+<sp/>ch);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_pin<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_pin<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(test_pin);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>300<sp/>+<sp/>(ch<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.ConfigureChannel(ch,<sp/>ch_config);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.EnableChannel(ch);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>StartAll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.StartAll();</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;StartAll<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;StartAll<sp/>executed<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(500));</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>UpdateAll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.UpdateAll();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UpdateAll<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;UpdateAll<sp/>executed<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(500));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>StopAll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Stopping<sp/>all<sp/>channels&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.StopAll();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;StopAll<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;StopAll<sp/>executed<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Synchronized<sp/>operations<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1acc4bc44ec78fcec6b27c2fa6be8ce89b" kindref="member">test_complementary_outputs</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>complementary<sp/>outputs...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>primary<sp/>and<sp/>complementary<sp/>channels<sp/>(avoid<sp/>GPIO3<sp/>-&gt;<sp/>use<sp/>GPIO6<sp/>instead)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>primary_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>comp_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(6);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>primary_config);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(1,<sp/>comp_config);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>complementary<sp/>output<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>deadtime_ns<sp/>=<sp/>1000;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>microsecond<sp/>deadtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetComplementaryOutput(0,<sp/>1,<sp/>deadtime_ns);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>complementary<sp/>output:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(1);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>duty<sp/>cycles<sp/>with<sp/>complementary<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>std::array&lt;float,<sp/>3&gt;<sp/>test_duties<sp/>=<sp/>{{0.2F,<sp/>0.5F,<sp/>0.8F}};</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duty<sp/>:<sp/>test_duties)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.SetDutyCycle(0,<sp/>duty);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Complementary<sp/>output<sp/>test<sp/>with<sp/>duty<sp/>cycle<sp/>%.1f&quot;</highlight><highlight class="normal">,<sp/>duty);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(300));</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Complementary<sp/>outputs<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP32-SPECIFIC<sp/>FEATURES<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a294dc78c7a9fbc19a1fa82d4e098894a" kindref="member">test_hardware_fade</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>hardware<sp/>fade<sp/>functionality...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a08fef0b80847f218eb81531069b0ca89" kindref="member">create_fade_test_config</ref>();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>and<sp/>enable<sp/>a<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>initial<sp/>duty<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>pwm.SetDutyCycle(0,<sp/>0.1F);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>fade<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FadeTest<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target_duty{};</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>fade_time_ms{};</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>std::array&lt;FadeTest,<sp/>4&gt;<sp/>fade_tests<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0.8F,<sp/>1000},<sp/></highlight><highlight class="comment">//<sp/>Fade<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0.2F,<sp/>800},<sp/><sp/></highlight><highlight class="comment">//<sp/>Fade<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0.9F,<sp/>1200},<sp/></highlight><highlight class="comment">//<sp/>Fade<sp/>up<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0.0F,<sp/>500}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fade<sp/>to<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test<sp/>:<sp/>fade_tests)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>fade<sp/>to<sp/>%.1f<sp/>over<sp/>%lu<sp/>ms&quot;</highlight><highlight class="normal">,<sp/>test.target_duty,<sp/>test.fade_time_ms);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetHardwareFade(0,<sp/>test.target_duty,<sp/>test.fade_time_ms);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>start<sp/>fade:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>fade<sp/>is<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.IsFadeActive(0))<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Fade<sp/>should<sp/>be<sp/>active<sp/>after<sp/>SetHardwareFade&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>fade<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(test.fade_time_ms<sp/>+<sp/>200));</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>fade<sp/>completed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsFadeActive(0))<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Warning:<sp/>Fade<sp/>still<sp/>active<sp/>after<sp/>expected<sp/>completion<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Fade<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>stop<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>pwm.SetHardwareFade(0,<sp/>0.5F,<sp/>2000);<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>long<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(200));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.StopHardwareFade(0);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>stop<sp/>fade:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsFadeActive(0))<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Fade<sp/>should<sp/>not<sp/>be<sp/>active<sp/>after<sp/>StopHardwareFade&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Hardware<sp/>fade<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1afa9cc9b2b8decba4deb1bcff1be6dd5e" kindref="member">test_idle_level_control</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>idle<sp/>level<sp/>control...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>idle<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>std::array&lt;hf_u8_t,<sp/>2&gt;<sp/>idle_levels<sp/>=<sp/>{{0,<sp/>1}};</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>idle_level<sp/>:<sp/>idle_levels)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetIdleLevel(0,<sp/>idle_level);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>idle<sp/>level<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>idle_level,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Idle<sp/>level<sp/>%d<sp/>set<sp/>successfully&quot;</highlight><highlight class="normal">,<sp/>idle_level);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>idle<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetIdleLevel(0,<sp/>2);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>idle<sp/>level<sp/>should<sp/>not<sp/>be<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Idle<sp/>level<sp/>control<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1ab38a32943c773daa1ec468e36a96e3d2" kindref="member">test_timer_management</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>timer<sp/>management...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>1:<sp/>Test<sp/>basic<sp/>timer<sp/>allocation<sp/>with<sp/>different<sp/>frequency/resolution<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>1:<sp/>Testing<sp/>basic<sp/>timer<sp/>allocation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TimerTestConfig<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel{};</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio{};</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency{};</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution{};</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>combinations<sp/>are<sp/>designed<sp/>to<sp/>require<sp/>separate<sp/>timers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>std::array&lt;TimerTestConfig,<sp/>4&gt;<sp/>timer_configs<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0,<sp/>2,<sp/>1000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Timer<sp/>allocation<sp/>test:<sp/>1kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>get<sp/>timer<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>6,<sp/>2000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;Timer<sp/>allocation<sp/>test:<sp/>2kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>get<sp/>timer<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>4,<sp/>5000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Timer<sp/>allocation<sp/>test:<sp/>5kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>get<sp/>timer<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{3,<sp/>5,<sp/>10000,<sp/>9,<sp/></highlight><highlight class="stringliteral">&quot;Timer<sp/>allocation<sp/>test:<sp/>10kHz<sp/>@<sp/>9-bit&quot;</highlight><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>get<sp/>timer<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>which<sp/>timers<sp/>are<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>timer_used[4]<sp/>=<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cfg<sp/>:<sp/>timer_configs)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Configuring<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cfg.description);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(cfg.gpio,<sp/>cfg.frequency,<sp/>cfg.resolution);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>cfg.channel;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(cfg.channel,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cfg.channel,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(cfg.channel);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer_id<sp/>&lt;<sp/>0<sp/>||<sp/>timer_id<sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>timer<sp/>assignment<sp/>for<sp/>channel<sp/>%d:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cfg.channel,<sp/>timer_id);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>timer_used[timer_id]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Channel<sp/>%d<sp/>assigned<sp/>to<sp/>timer<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cfg.channel,<sp/>timer_id);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>multiple<sp/>timers<sp/>are<sp/>being<sp/>used<sp/>(not<sp/>all<sp/>on<sp/>same<sp/>timer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timers_in_use<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer_used[i])</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timers_in_use++;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>timers<sp/>in<sp/>use:<sp/>%d/4&quot;</highlight><highlight class="normal">,<sp/>timers_in_use);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timers_in_use<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>at<sp/>least<sp/>3<sp/>different<sp/>timers<sp/>to<sp/>be<sp/>used,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>timers_in_use);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>2:<sp/>Test<sp/>timer<sp/>exhaustion<sp/>-<sp/>try<sp/>to<sp/>allocate<sp/>a<sp/>5th<sp/>unique<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>2:<sp/>Testing<sp/>timer<sp/>exhaustion<sp/>scenario&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>fifth_config<sp/>=</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(7,<sp/>15000,<sp/>8);<sp/></highlight><highlight class="comment">//<sp/>Unique<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>fifth_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(4,<sp/>fifth_config);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(4);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>5th<sp/>combination<sp/>allocated<sp/>successfully<sp/>to<sp/>timer<sp/>%d<sp/>(reuse<sp/>or<sp/>eviction)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_id);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>5th<sp/>combination<sp/>correctly<sp/>rejected:<sp/>%s<sp/>(expected<sp/>when<sp/>all<sp/>timers<sp/>exhausted)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>acceptable<sp/>-<sp/>it<sp/>means<sp/>all<sp/>timers<sp/>are<sp/>exhausted<sp/>with<sp/>incompatible<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a4533c63ed435003d191c5491f1b78a4c" kindref="member">hf_pwm_err_t::PWM_ERR_TIMER_CONFLICT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a65560e8910ad09e2b2e58ed304a115d4" kindref="member">hf_pwm_err_t::PWM_ERR_FREQUENCY_TOO_HIGH</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>TIMER_CONFLICT<sp/>or<sp/>FREQUENCY_TOO_HIGH<sp/>error,<sp/>got:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>3:<sp/>Test<sp/>compatible<sp/>frequency<sp/>reuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>3:<sp/>Testing<sp/>compatible<sp/>frequency<sp/>reuse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>compatible_config<sp/>=</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(8,<sp/>1050,<sp/>8);<sp/></highlight><highlight class="comment">//<sp/>Within<sp/>5%<sp/>of<sp/>1000Hz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>compatible_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(5,<sp/>compatible_config);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(5);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Compatible<sp/>frequency<sp/>configuration<sp/>succeeded,<sp/>using<sp/>timer<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>timer_id);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Compatible<sp/>frequency<sp/>configuration<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>4:<sp/>Test<sp/>channel<sp/>release<sp/>and<sp/>timer<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>4:<sp/>Testing<sp/>timer<sp/>recovery<sp/>after<sp/>channel<sp/>release&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>channel<sp/>3<sp/>to<sp/>potentially<sp/>free<sp/>up<sp/>timer<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>pwm.DisableChannel(3);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>retry<sp/>the<sp/>previously<sp/>failed<sp/>5th<sp/>combination<sp/>if<sp/>it<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Retrying<sp/>5th<sp/>combination<sp/>after<sp/>releasing<sp/>channel<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(4,<sp/>fifth_config);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(4);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>5th<sp/>combination<sp/>succeeded<sp/>after<sp/>timer<sp/>recovery,<sp/>using<sp/>timer<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>timer_id);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;5th<sp/>combination<sp/>still<sp/>failed<sp/>after<sp/>recovery:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>5:<sp/>Test<sp/>forced<sp/>timer<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>5:<sp/>Testing<sp/>forced<sp/>timer<sp/>assignment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.ForceTimerAssignment(0,<sp/>3);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>force<sp/>timer<sp/>assignment:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>int8_t<sp/>forced_timer_id<sp/>=<sp/>pwm.GetTimerAssignment(0);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(forced_timer_id<sp/>!=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Forced<sp/>timer<sp/>assignment<sp/>failed:<sp/>expected<sp/>3,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>forced_timer_id);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Forced<sp/>timer<sp/>assignment<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>6:<sp/>Validate<sp/>diagnostics<sp/>and<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>6:<sp/>Validating<sp/>diagnostics<sp/>and<sp/>statistics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref><sp/>diagnostics;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.GetDiagnostics(diagnostics);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Diagnostics:<sp/>Active<sp/>timers=%d,<sp/>Active<sp/>channels=%d&quot;</highlight><highlight class="normal">,<sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1a696547f39aed2a095016a1fc6b6880bf" kindref="member">active_timers</ref>,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1ac3c08b7a63d3b14a1c4012f9123f459a" kindref="member">active_channels</ref>);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref><sp/>statistics;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.GetStatistics(statistics);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Statistics:<sp/>Error<sp/>count=%lu,<sp/>Last<sp/>activity=%llu&quot;</highlight><highlight class="normal">,<sp/>statistics.<ref refid="structhf__pwm__statistics__t_1a5efca3ae84ea2ae93a06d099cc9e0c7b" kindref="member">error_count</ref>,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics.<ref refid="structhf__pwm__statistics__t_1a86bbb93e18e2e3dfede40f48cc6b7a18" kindref="member">last_activity_timestamp</ref>);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Enhanced<sp/>timer<sp/>management<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STATUS<sp/>AND<sp/>DIAGNOSTICS<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1ad9eec9feb6f6252773b3a945a31576de" kindref="member">test_status_reporting</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>status<sp/>reporting...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a45787397a6d50d49ef7cd5735893a675" kindref="member">create_basic_with_fade_config</ref>();<sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>mode<sp/>with<sp/>fade<sp/>for<sp/>channel<sp/>enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>and<sp/>enable<sp/>a<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>600;<sp/></highlight><highlight class="comment">//<sp/>~60%<sp/>for<sp/>10-bit<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>channel<sp/>status<sp/>reporting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__status__t" kindref="compound">hf_pwm_channel_status_t</ref><sp/>status;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.GetChannelStatus(0,<sp/>status);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>channel<sp/>status:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status.<ref refid="structhf__pwm__channel__status__t_1a8a4271296226416f1ed7b3b4c2391fc2" kindref="member">enabled</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>status<sp/>should<sp/>show<sp/>enabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status.<ref refid="structhf__pwm__channel__status__t_1a27d5ea959206f0db1d7cf3f339c47400" kindref="member">configured</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>status<sp/>should<sp/>show<sp/>configured&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>status:<sp/>enabled=%d,<sp/>configured=%d,<sp/>duty=%.2f,<sp/>freq=%lu&quot;</highlight><highlight class="normal">,<sp/>status.<ref refid="structhf__pwm__channel__status__t_1a8a4271296226416f1ed7b3b4c2391fc2" kindref="member">enabled</ref>,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.<ref refid="structhf__pwm__channel__status__t_1a27d5ea959206f0db1d7cf3f339c47400" kindref="member">configured</ref>,<sp/>status.<ref refid="structhf__pwm__channel__status__t_1a0b93adfffd66ff1743a83203f4380b33" kindref="member">current_duty_cycle</ref>,<sp/>status.<ref refid="structhf__pwm__channel__status__t_1afb9bf06a6ebdcfb6cfa73032dfb7bc1f" kindref="member">current_frequency</ref>);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>capabilities<sp/>reporting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__capabilities__t" kindref="compound">hf_pwm_capabilities_t</ref><sp/>capabilities;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.GetCapabilities(capabilities);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>capabilities:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>capabilities<sp/>retrieved<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>error<sp/>reporting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>last_error<sp/>=<sp/>pwm.GetLastError(0);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Last<sp/>error<sp/>for<sp/>channel<sp/>0:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(last_error));</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Status<sp/>reporting<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1ac6ee19f88b989b8170183b9c6f96f7a8" kindref="member">test_statistics_and_diagnostics</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>statistics<sp/>and<sp/>diagnostics...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a45787397a6d50d49ef7cd5735893a675" kindref="member">create_basic_with_fade_config</ref>();<sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>mode<sp/>with<sp/>fade<sp/>for<sp/>channel<sp/>enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>some<sp/>operations<sp/>to<sp/>generate<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.SetDutyCycle(0,<sp/>0.2F<sp/>+<sp/>(i<sp/>*<sp/>0.15F));</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.SetFrequency(0,<sp/>1000<sp/>+<sp/>(i<sp/>*<sp/>500));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>pwm.DisableChannel(0);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>statistics<sp/>reporting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref><sp/>statistics;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.GetStatistics(statistics);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>statistics:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Statistics<sp/>-<sp/>Duty<sp/>updates:<sp/>%lu,<sp/>Freq<sp/>changes:<sp/>%lu,<sp/>Channel<sp/>enables:<sp/>%lu,<sp/>Channel<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;disables:<sp/>%lu&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics.<ref refid="structhf__pwm__statistics__t_1ae747cee52098f97c109af47e3ec1528b" kindref="member">duty_updates_count</ref>,<sp/>statistics.<ref refid="structhf__pwm__statistics__t_1a2fa9cfabb66cf6ccbdadcfbd78c59095" kindref="member">frequency_changes_count</ref>,</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics.<ref refid="structhf__pwm__statistics__t_1aebf52d83fb8b3a8581a0b8a3cd0113bc" kindref="member">channel_enables_count</ref>,<sp/>statistics.<ref refid="structhf__pwm__statistics__t_1aaeb614849916a187a0c2c13bb97b657a" kindref="member">channel_disables_count</ref>);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>diagnostics<sp/>reporting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref><sp/>diagnostics;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.GetDiagnostics(diagnostics);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>diagnostics:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>ESP_LOGI(</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Diagnostics<sp/>-<sp/>Hardware<sp/>init:<sp/>%d,<sp/>Fade<sp/>ready:<sp/>%d,<sp/>Active<sp/>channels:<sp/>%d,<sp/>Active<sp/>timers:<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1aa908bfc2c0658b5310c31e83d6be0bed" kindref="member">hardware_initialized</ref>,<sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1a2cb06f85138f6abb317379fbba33e0f1" kindref="member">fade_functionality_ready</ref>,</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1ac3c08b7a63d3b14a1c4012f9123f459a" kindref="member">active_channels</ref>,<sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1a696547f39aed2a095016a1fc6b6880bf" kindref="member">active_timers</ref>);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Statistics<sp/>and<sp/>diagnostics<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CALLBACK<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>variables<sp/>for<sp/>fade<sp/>callback<sp/>testing<sp/>(ESP-IDF<sp/>LEDC<sp/>native<sp/>support<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[<ref refid="EspTypes__PWM_8h_1a86d24d14ec124f4012f812f9853993f0" kindref="member">HF_PWM_MAX_CHANNELS</ref>]<sp/>=<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/><ref refid="PwmComprehensiveTest_8cpp_1a555d212042ea711aa643fc49c6aea024" kindref="member">g_last_fade_channel</ref><sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a4d72f44075be125be5c74a61dd49d3e7" kindref="member">test_fade_callback_ch0</ref>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel_id)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MINIMAL<sp/>ISR-safe<sp/>callback<sp/>-<sp/>only<sp/>set<sp/>flags!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[channel_id]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a555d212042ea711aa643fc49c6aea024" kindref="member">g_last_fade_channel</ref><sp/>=<sp/>channel_id;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NO<sp/>ESP_LOG<sp/>calls<sp/>in<sp/>ISR<sp/>context<sp/>-<sp/>they<sp/>can<sp/>cause<sp/>stack<sp/>overflow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a9c947f6df5f2cf6a81fb36c7c06ae780" kindref="member">test_fade_callback_ch1</ref>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel_id)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MINIMAL<sp/>ISR-safe<sp/>callback<sp/>-<sp/>only<sp/>set<sp/>flags!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[channel_id]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a555d212042ea711aa643fc49c6aea024" kindref="member">g_last_fade_channel</ref><sp/>=<sp/>channel_id;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NO<sp/>ESP_LOG<sp/>calls<sp/>in<sp/>ISR<sp/>context<sp/>-<sp/>they<sp/>can<sp/>cause<sp/>stack<sp/>overflow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1ac279348bbae6927b73186a65e9f7536e" kindref="member">test_callbacks</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>FADE<sp/>CALLBACK<sp/>functionality<sp/>(ESP-IDF<sp/>LEDC<sp/>native<sp/>support<sp/>only)...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a08fef0b80847f218eb81531069b0ca89" kindref="member">create_fade_test_config</ref>();<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>fade<sp/>mode<sp/>for<sp/>callback<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__pwm__unit__config__t_1acaf1bbe7d4fbe729846cd9e2f1ac7a85" kindref="member">enable_interrupts</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>fade<sp/>callback<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="EspTypes__PWM_8h_1a86d24d14ec124f4012f812f9853993f0" kindref="member">HF_PWM_MAX_CHANNELS</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a555d212042ea711aa643fc49c6aea024" kindref="member">g_last_fade_channel</ref><sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channels<sp/>for<sp/>fade<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch0_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch1_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(4);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch0_config);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(1,<sp/>ch1_config);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>per-channel<sp/>fade<sp/>callbacks<sp/>(ESP-IDF<sp/>LEDC<sp/>native<sp/>support)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>pwm.SetChannelFadeCallback(0,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a4d72f44075be125be5c74a61dd49d3e7" kindref="member">test_fade_callback_ch0</ref>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>pwm.SetChannelFadeCallback(1,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a9c947f6df5f2cf6a81fb36c7c06ae780" kindref="member">test_fade_callback_ch1</ref>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(1);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>hardware<sp/>fade<sp/>operations<sp/>to<sp/>trigger<sp/>callbacks...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>fade<sp/>operations<sp/>that<sp/>will<sp/>trigger<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>pwm.SetHardwareFade(0,<sp/>0.8f,<sp/>1000);<sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>0:<sp/>fade<sp/>to<sp/>80%<sp/>over<sp/>1<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>pwm.SetHardwareFade(1,<sp/>0.3f,<sp/>800);<sp/><sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>1:<sp/>fade<sp/>to<sp/>30%<sp/>over<sp/>0.8<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>fade<sp/>operations<sp/>to<sp/>complete<sp/>and<sp/>callbacks<sp/>to<sp/>trigger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>fade<sp/>operations<sp/>to<sp/>complete...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1500));<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>longer<sp/>than<sp/>the<sp/>longest<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test_passed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[FAIL]<sp/>Channel<sp/>0<sp/>fade<sp/>callback<sp/>was<sp/>not<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>test_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Channel<sp/>0<sp/>fade<sp/>callback<sp/>was<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[1])<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[FAIL]<sp/>Channel<sp/>1<sp/>fade<sp/>callback<sp/>was<sp/>not<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>test_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Channel<sp/>1<sp/>fade<sp/>callback<sp/>was<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>callback<sp/>clearing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>pwm.SetChannelFadeCallback(0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[0]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>pwm.SetHardwareFade(0,<sp/>0.1F,<sp/>200);<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>trigger<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(400));</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="PwmComprehensiveTest_8cpp_1a25e8835f5e4b4c08802ab0904db6ec4d" kindref="member">g_fade_callback_called</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[FAIL]<sp/>Channel<sp/>0<sp/>callback<sp/>was<sp/>called<sp/>after<sp/>being<sp/>cleared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>test_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Channel<sp/>0<sp/>callback<sp/>correctly<sp/>cleared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Fade<sp/>callback<sp/>test<sp/>completed<sp/>-<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_passed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASSED&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_passed;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a0388efdb95291842f5888945249ee804" kindref="member">test_basic_mode_without_fade</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>basic<sp/>mode<sp/>without<sp/>fade...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();<sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>mode<sp/>without<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>configure<sp/>channels<sp/>without<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>in<sp/>basic<sp/>mode<sp/>without<sp/>fade&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>set<sp/>duty<sp/>cycles<sp/>without<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>0.5F);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>duty<sp/>cycle<sp/>in<sp/>basic<sp/>mode<sp/>without<sp/>fade&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>set<sp/>frequency<sp/>without<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetFrequency(0,<sp/>2000);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>frequency<sp/>in<sp/>basic<sp/>mode<sp/>without<sp/>fade&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Basic<sp/>mode<sp/>without<sp/>fade<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a53bd3b7c698049eee1ab5ec7bb6f6dff" kindref="member">test_fade_mode_functionality</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>fade<sp/>mode<sp/>functionality...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a08fef0b80847f218eb81531069b0ca89" kindref="member">create_fade_test_config</ref>();<sp/></highlight><highlight class="comment">//<sp/>Fade<sp/>mode<sp/>with<sp/>fade<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>configure<sp/>channels<sp/>in<sp/>fade<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>in<sp/>fade<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>enable<sp/>channels<sp/>in<sp/>fade<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>in<sp/>fade<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>set<sp/>duty<sp/>cycles<sp/>in<sp/>fade<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>0.5F);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>duty<sp/>cycle<sp/>in<sp/>fade<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>we<sp/>can<sp/>use<sp/>hardware<sp/>fade<sp/>in<sp/>fade<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetHardwareFade(0,<sp/>0.8F,<sp/>1000);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>hardware<sp/>fade<sp/>in<sp/>fade<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>a<sp/>bit<sp/>for<sp/>fade<sp/>to<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>fade<sp/>is<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.IsFadeActive(0))<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Fade<sp/>should<sp/>be<sp/>active<sp/>in<sp/>fade<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>the<sp/>fade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.StopHardwareFade(0);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>stop<sp/>hardware<sp/>fade<sp/>in<sp/>fade<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Fade<sp/>mode<sp/>functionality<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a8cc5aa996f5e4b3f05b78e15c919c290" kindref="member">test_resolution_specific_duty_cycles</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>resolution-specific<sp/>duty<sp/>cycle<sp/>accuracy...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channel<sp/>with<sp/>known<sp/>raw<sp/>duty<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>512;<sp/></highlight><highlight class="comment">//<sp/>Exactly<sp/>50%<sp/>for<sp/>10-bit<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>for<sp/>resolution<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>for<sp/>resolution<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>multiple<sp/>duty<sp/>cycles<sp/>with<sp/>precise<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DutyCycleTest<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>percentage;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>expected_raw_10bit;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>std::array&lt;DutyCycleTest,<sp/>5&gt;<sp/>duty_tests<sp/>=<sp/>{{{0.0F,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0%<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.25F,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;25%<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.5F,<sp/>511,<sp/></highlight><highlight class="stringliteral">&quot;50%<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.75F,<sp/>767,<sp/></highlight><highlight class="stringliteral">&quot;75%<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1.0F,<sp/>1023,<sp/></highlight><highlight class="stringliteral">&quot;100%<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">}}};</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>duty<sp/>cycle<sp/>accuracy<sp/>with<sp/>10-bit<sp/>resolution<sp/>(max=1023)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test<sp/>:<sp/>duty_tests)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>%s<sp/>(%.2f)&quot;</highlight><highlight class="normal">,<sp/>test.description,<sp/>test.percentage);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>test.percentage);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>duty<sp/>cycle<sp/>reads<sp/>back<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>actual_duty<sp/>=<sp/>pwm.GetDutyCycle(0);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>expected_duty<sp/>=<sp/>test.percentage;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>0.002F;<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>0.2%<sp/>tolerance<sp/>for<sp/>rounding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(actual_duty<sp/>-<sp/>expected_duty)<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>mismatch<sp/>for<sp/>%s:<sp/>expected<sp/>%.4f,<sp/>got<sp/>%.4f<sp/>(diff=%.4f)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.description,<sp/>expected_duty,<sp/>actual_duty,<sp/>abs(actual_duty<sp/>-<sp/>expected_duty));</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>raw<sp/>duty<sp/>cycle<sp/>setting<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycleRaw(0,<sp/>test.expected_raw_10bit);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>raw<sp/>duty<sp/>cycle<sp/>%lu:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.expected_raw_10bit,</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_duty<sp/>=<sp/>pwm.GetDutyCycle(0);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(actual_duty<sp/>-<sp/>expected_duty)<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Raw<sp/>duty<sp/>cycle<sp/>mismatch<sp/>for<sp/>%s:<sp/>expected<sp/>%.4f,<sp/>got<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>test.description,</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_duty,<sp/>actual_duty);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>verified:<sp/>%.4f%%<sp/>(raw=%lu)&quot;</highlight><highlight class="normal">,<sp/>test.description,<sp/>actual_duty<sp/>*<sp/>100.0F,</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.expected_raw_10bit);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Resolution-specific<sp/>duty<sp/>cycle<sp/>accuracy<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a6b01aa170c426e6d376fb80186362494" kindref="member">test_frequency_resolution_validation</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>frequency/resolution<sp/>validation...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>a<sp/>basic<sp/>channel<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2,<sp/>1000,<sp/>10);<sp/></highlight><highlight class="comment">//<sp/>Explicit<sp/>1kHz<sp/>@<sp/>10-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>for<sp/>frequency<sp/>validation<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>for<sp/>frequency<sp/>validation<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>valid<sp/>frequency/resolution<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FreqResTest<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frequency{};</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_succeed{};</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>std::array&lt;FreqResTest,<sp/>10&gt;<sp/>freq_tests<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CORRECTED:<sp/>Based<sp/>on<sp/>pure<sp/>theoretical<sp/>ESP32-C6<sp/>LEDC<sp/>limits<sp/>(you&apos;re<sp/>right!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>1.024<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{5000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>5.12<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{10000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>10.24<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{20000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;20<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>20.48<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{25000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;25<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>25.6<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{30000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;30<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>30.72<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{40000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;40<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>40.96<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{50000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;50<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>51.2<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{78000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;78<sp/>kHz<sp/>@<sp/>10-bit<sp/>(valid<sp/>-<sp/>79.872<sp/>MHz<sp/>&lt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{100000,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;100<sp/>kHz<sp/>@<sp/>10-bit<sp/>(should<sp/>fail<sp/>-<sp/>102.4<sp/>MHz<sp/>&gt;<sp/>80MHz)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test<sp/>:<sp/>freq_tests)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetFrequency(0,<sp/>test.frequency);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test.should_succeed)<sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>success<sp/>for<sp/>%s<sp/>but<sp/>got:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>succeeded<sp/>as<sp/>expected&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>for<sp/>%s<sp/>but<sp/>got<sp/>success&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>failed<sp/>as<sp/>expected:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Frequency/resolution<sp/>validation<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1aaef554a318adc1d66d07e793bb4c59be" kindref="member">test_enhanced_validation_system</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>enhanced<sp/>validation<sp/>system<sp/>with<sp/>clock<sp/>source<sp/>awareness...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>a<sp/>basic<sp/>channel<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2,<sp/>1000,<sp/>10);<sp/></highlight><highlight class="comment">//<sp/>Explicit<sp/>1kHz<sp/>@<sp/>10-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>for<sp/>enhanced<sp/>validation<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>for<sp/>enhanced<sp/>validation<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>Clock<sp/>source<sp/>aware<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>1:<sp/>Testing<sp/>clock<sp/>source<sp/>aware<sp/>validation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>ESP32-C6<sp/>requires<sp/>all<sp/>timers<sp/>to<sp/>use<sp/>same<sp/>clock<sp/>source<sp/>AND<sp/>compatible<sp/>dividers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>frequencies<sp/>that<sp/>can<sp/>share<sp/>the<sp/>same<sp/>timer<sp/>or<sp/>use<sp/>compatible<sp/>dividers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>use<sp/>frequencies<sp/>that<sp/>can<sp/>share<sp/>timers<sp/>or<sp/>use<sp/>the<sp/>same<sp/>divider<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ClockSourceTest<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frequency{};</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>resolution{};</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_succeed{};</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>std::array&lt;ClockSourceTest,<sp/>4&gt;<sp/>clock_tests<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>APB<sp/>clock<sp/>source<sp/>(80MHz)<sp/>-<sp/>use<sp/>frequencies<sp/>that<sp/>can<sp/>share<sp/>timers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{20000,<sp/>10,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;20kHz@10bit<sp/>with<sp/>APB<sp/>clock<sp/>(80MHz)<sp/>-<sp/>should<sp/>succeed<sp/>[20kHz<sp/>x<sp/>1024<sp/>=<sp/>20.48<sp/>MHz<sp/>(25.6%<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{40000,<sp/>10,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;40kHz@10bit<sp/>with<sp/>APB<sp/>clock<sp/>(80MHz)<sp/>-<sp/>should<sp/>succeed<sp/>[40kHz<sp/>x<sp/>1024<sp/>=<sp/>40.96<sp/>MHz<sp/>(51.2%<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{60000,<sp/>10,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;60kHz@10bit<sp/>with<sp/>APB<sp/>clock<sp/>(80MHz)<sp/>-<sp/>should<sp/>succeed<sp/>[60kHz<sp/>x<sp/>1024<sp/>=<sp/>61.44<sp/>MHz<sp/>(76.8%<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{80000,<sp/>10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;80kHz@10bit<sp/>with<sp/>APB<sp/>clock<sp/>(80MHz)<sp/>-<sp/>should<sp/>fail<sp/>[80kHz<sp/>x<sp/>1024<sp/>=<sp/>81.92<sp/>MHz<sp/>(102.4%<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test<sp/>:<sp/>clock_tests)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>a<sp/>new<sp/>channel<sp/>with<sp/>APB<sp/>clock<sp/>source<sp/>(80MHz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>clock_test_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/>test.frequency,<sp/>test.resolution);<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>GPIO<sp/>3<sp/>for<sp/>clock<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_test_config.<ref refid="structhf__pwm__channel__config__t_1a2dd704d7a0507d01b0464d176e264d4b" kindref="member">clock_source</ref><sp/>=<sp/><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a2fb4f97b7c1b78586a5f9f8365272822" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB</ref>;<sp/></highlight><highlight class="comment">//<sp/>APB<sp/>clock<sp/>(80MHz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>channel<sp/>configuration<sp/>with<sp/>APB<sp/>clock<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(1,<sp/>clock_test_config);<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>channel<sp/>1<sp/>for<sp/>clock<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test.should_succeed)<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>success<sp/>for<sp/>%s<sp/>but<sp/>got:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description,</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>succeeded<sp/>as<sp/>expected&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>failure<sp/>for<sp/>%s<sp/>but<sp/>got<sp/>success&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>failed<sp/>as<sp/>expected:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Deconfiguring<sp/>channel<sp/>1<sp/>before<sp/>reconfiguration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.DeconfigureChannel(1);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>a<sp/>bit<sp/>for<sp/>cleanup<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2:<sp/>Dynamic<sp/>resolution<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>2:<sp/>Testing<sp/>dynamic<sp/>resolution<sp/>calculation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResolutionTest<sp/>{</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frequency;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>expected_max_resolution;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>std::array&lt;ResolutionTest,<sp/>7&gt;<sp/>res_tests<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1000,<sp/>14,</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1kHz<sp/>should<sp/>support<sp/>up<sp/>to<sp/>14-bit<sp/>resolution<sp/>[1kHz<sp/>x<sp/>16383<sp/>=<sp/>16.383<sp/>MHz<sp/>(20.48%<sp/>of<sp/>80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{5000,<sp/>13,</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;5kHz<sp/>should<sp/>support<sp/>up<sp/>to<sp/>13-bit<sp/>resolution<sp/>[5kHz<sp/>x<sp/>8191<sp/>=<sp/>40.955<sp/>MHz<sp/>(51.2%<sp/>of<sp/>80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{10000,<sp/>12,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;10kHz<sp/>should<sp/>support<sp/>up<sp/>to<sp/>12-bit<sp/>resolution<sp/>[10kHz<sp/>x<sp/>4095<sp/>=<sp/>40.95<sp/>MHz<sp/>(51.2%<sp/>of<sp/>80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{20000,<sp/>11,</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;20kHz<sp/>should<sp/>support<sp/>up<sp/>to<sp/>11-bit<sp/>resolution<sp/>[20kHz<sp/>x<sp/>2047<sp/>=<sp/>40.94<sp/>MHz<sp/>(51.2%<sp/>of<sp/>80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{40000,<sp/>10,</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;40kHz<sp/>should<sp/>support<sp/>up<sp/>to<sp/>10-bit<sp/>resolution<sp/>[40kHz<sp/>x<sp/>1023<sp/>=<sp/>40.92<sp/>MHz<sp/>(51.2%<sp/>of<sp/>80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{78125,<sp/>10,</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;78.125kHz<sp/>should<sp/>support<sp/>exactly<sp/>10-bit<sp/>resolution<sp/>[78.125kHz<sp/>x<sp/>1023<sp/>=<sp/>79.872<sp/>MHz<sp/>(99.84%<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{156250,<sp/>9,</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;156.25kHz<sp/>should<sp/>support<sp/>exactly<sp/>9-bit<sp/>resolution<sp/>[156.25kHz<sp/>x<sp/>511<sp/>=<sp/>79.872<sp/>MHz<sp/>(99.84%<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;80MHz)]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test<sp/>:<sp/>res_tests)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>by<sp/>trying<sp/>to<sp/>configure<sp/>a<sp/>channel<sp/>with<sp/>the<sp/>expected<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>test_config<sp/>=</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(4,<sp/>test.frequency,</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.expected_max_resolution);<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>GPIO<sp/>4<sp/>for<sp/>validation<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwm.ConfigureChannel(5,<sp/>test_config);<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>channel<sp/>5<sp/>for<sp/>validation<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s:<sp/>max<sp/>resolution<sp/>=<sp/>%d<sp/>bits<sp/>(validated)&quot;</highlight><highlight class="normal">,<sp/>test.description,</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.expected_max_resolution);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pwm.DisableChannel(5);<sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>max<sp/>resolution<sp/>%d<sp/>for<sp/>%s<sp/>failed<sp/>configuration&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.expected_max_resolution,<sp/>test.description);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>3:<sp/>Enhanced<sp/>duty<sp/>cycle<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>3:<sp/>Testing<sp/>enhanced<sp/>duty<sp/>cycle<sp/>validation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>duty<sp/>cycle<sp/>overflow<sp/>protection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetFrequencyAndResolution(0,<sp/>1000,<sp/>8);<sp/></highlight><highlight class="comment">//<sp/>8-bit<sp/>resolution<sp/>(0-255)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>1kHz<sp/>@<sp/>8-bit<sp/>for<sp/>duty<sp/>cycle<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>valid<sp/>duty<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/>std::array&lt;uint32_t,<sp/>3&gt;<sp/>valid_duties<sp/>=<sp/>{{0,<sp/>127,<sp/>255}};<sp/></highlight><highlight class="comment">//<sp/>0%,<sp/>50%,<sp/>100%<sp/>for<sp/>8-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>duty<sp/>:<sp/>valid_duties)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycleRaw(0,<sp/>duty);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Valid<sp/>duty<sp/>cycle<sp/>%lu<sp/>failed<sp/>for<sp/>8-bit<sp/>resolution&quot;</highlight><highlight class="normal">,<sp/>duty);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Valid<sp/>duty<sp/>cycle<sp/>%lu/255<sp/>accepted&quot;</highlight><highlight class="normal">,<sp/>duty);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>duty<sp/>cycle<sp/>(should<sp/>be<sp/>clamped)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycleRaw(0,<sp/>300);<sp/></highlight><highlight class="comment">//<sp/>&gt;<sp/>255<sp/>for<sp/>8-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>clamping<sp/>failed<sp/>-<sp/>should<sp/>clamp<sp/>300<sp/>to<sp/>255&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Invalid<sp/>duty<sp/>cycle<sp/>300<sp/>was<sp/>properly<sp/>clamped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4:<sp/>Auto-fallback<sp/>resolution<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>4:<sp/>Testing<sp/>auto-fallback<sp/>resolution<sp/>functionality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>case<sp/>where<sp/>preferred<sp/>resolution<sp/>is<sp/>too<sp/>high<sp/>-<sp/>use<sp/>public<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>fallback_config<sp/>=</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(5,<sp/>100000,<sp/>12);<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>GPIO<sp/>5<sp/>for<sp/>fallback<sp/>tests<sp/>-<sp/>100kHz<sp/>@<sp/>12-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>auto-fallback<sp/>and<sp/>try<sp/>to<sp/>configure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/>pwm.EnableAutoFallback();</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>fallback_result<sp/>=<sp/>pwm.SetFrequencyWithAutoFallback(5,<sp/>100000,<sp/>12);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fallback_result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>actual_res<sp/>=<sp/>pwm.GetResolution(5);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Auto-fallback:<sp/>100kHz<sp/>@<sp/>12-bit<sp/>→<sp/>%d<sp/>bits&quot;</highlight><highlight class="normal">,<sp/>actual_res);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.DisableChannel(5);<sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Auto-fallback<sp/>failed<sp/>for<sp/>100kHz<sp/>@<sp/>12-bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/>pwm.DisableAutoFallback();</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Enhanced<sp/>validation<sp/>system<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a78255391f2dd8215198f46bc83601df4" kindref="member">test_percentage_consistency_across_resolutions</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>percentage<sp/>consistency<sp/>across<sp/>different<sp/>resolutions...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>resolution<sp/>combinations<sp/>with<sp/>explicit<sp/>resolution<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResolutionTest<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>frequency;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>resolution_bits;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>std::array&lt;ResolutionTest,<sp/>6&gt;<sp/>res_tests<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;1kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Low<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;1kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1000,<sp/>12,<sp/></highlight><highlight class="stringliteral">&quot;1kHz<sp/>@<sp/>12-bit&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>High<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{5000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;5kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Medium<sp/>frequency,<sp/>low<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{5000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;5kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>Medium<sp/>frequency,<sp/>default<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{10000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;10kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>High<sp/>frequency,<sp/>low<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>percentages<sp/>to<sp/>verify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/>std::array&lt;float,<sp/>7&gt;<sp/>test_percentages<sp/>=<sp/>{{0.0F,<sp/>0.1F,<sp/>0.25F,<sp/>0.5F,<sp/>0.75F,<sp/>0.9F,<sp/>1.0F}};</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>res_test<sp/>:<sp/>res_tests)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>res_test.description);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channel<sp/>with<sp/>explicit<sp/>frequency<sp/>and<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2,<sp/>res_test.frequency,<sp/>res_test.resolution_bits);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>at<sp/>0%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>res_test.description);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>res_test.description);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>resolution<sp/>was<sp/>set<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>actual_resolution<sp/>=<sp/>pwm.GetResolution(0);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_resolution<sp/>!=<sp/>res_test.resolution_bits)<sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Resolution<sp/>mismatch<sp/>for<sp/>%s:<sp/>expected<sp/>%d,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>res_test.description,</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_test.resolution_bits,<sp/>actual_resolution);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>each<sp/>percentage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>percentage<sp/>:<sp/>test_percentages)<sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Setting<sp/>%.1f%%<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">,<sp/>percentage<sp/>*<sp/>100.0F);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>percentage);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>%.1f%%<sp/>duty<sp/>cycle<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>percentage<sp/>*<sp/>100.0F,</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_test.description);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>percentage<sp/>reads<sp/>back<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>actual_percentage<sp/>=<sp/>pwm.GetDutyCycle(0);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>expected<sp/>tolerance<sp/>based<sp/>on<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>1.0F<sp/>/<sp/>(1U<sp/>&lt;&lt;<sp/>res_test.resolution_bits);<sp/></highlight><highlight class="comment">//<sp/>One<sp/>step<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tolerance<sp/>+=<sp/>0.001F;<sp/></highlight><highlight class="comment">//<sp/>Add<sp/>small<sp/>floating<sp/>point<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(actual_percentage<sp/>-<sp/>percentage)<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Percentage<sp/>mismatch<sp/>for<sp/>%s<sp/>at<sp/>%.1f%%:<sp/>expected<sp/>%.4f,<sp/>got<sp/>%.4f<sp/>(tolerance=%.4f)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_test.description,<sp/>percentage<sp/>*<sp/>100.0F,<sp/>percentage,<sp/>actual_percentage,<sp/>tolerance);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>✓<sp/>%.1f%%<sp/>verified:<sp/>actual=%.4f%%<sp/>(diff=%.4f%%,<sp/>tolerance=%.4f%%)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percentage<sp/>*<sp/>100.0F,<sp/>actual_percentage<sp/>*<sp/>100.0F,</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs(actual_percentage<sp/>-<sp/>percentage)<sp/>*<sp/>100.0F,<sp/>tolerance<sp/>*<sp/>100.0F);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>passed<sp/>all<sp/>percentage<sp/>tests&quot;</highlight><highlight class="normal">,<sp/>res_test.description);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Percentage<sp/>consistency<sp/>across<sp/>resolutions<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1aea88426d552b48deec0d8006279bef54" kindref="member">test_resolution_control_methods</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>direct<sp/>resolution<sp/>control<sp/>methods...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channel<sp/>with<sp/>default<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2,<sp/>1000,<sp/>10);<sp/></highlight><highlight class="comment">//<sp/>1kHz<sp/>@<sp/>10-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>for<sp/>resolution<sp/>control<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>for<sp/>resolution<sp/>control<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>initial<sp/>duty<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>0.5F);<sp/></highlight><highlight class="comment">//<sp/>50%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>initial<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>GetResolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>uint8_t<sp/>initial_resolution<sp/>=<sp/>pwm.GetResolution(0);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_resolution<sp/>!=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>resolution<sp/>should<sp/>be<sp/>10<sp/>bits,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>initial_resolution);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>GetResolution()<sp/>returned<sp/>correct<sp/>initial<sp/>resolution:<sp/>%d<sp/>bits&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_resolution);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>SetResolution<sp/>-<sp/>change<sp/>to<sp/>8-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Changing<sp/>resolution<sp/>from<sp/>10-bit<sp/>to<sp/>8-bit...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetResolution(0,<sp/>8);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>resolution<sp/>to<sp/>8<sp/>bits:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>resolution<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/>uint8_t<sp/>new_resolution<sp/>=<sp/>pwm.GetResolution(0);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_resolution<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Resolution<sp/>should<sp/>be<sp/>8<sp/>bits<sp/>after<sp/>change,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>new_resolution);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Resolution<sp/>successfully<sp/>changed<sp/>to<sp/>8<sp/>bits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>duty<sp/>cycle<sp/>percentage<sp/>is<sp/>preserved<sp/>(should<sp/>still<sp/>be<sp/>~50%)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duty_after_resolution_change<sp/>=<sp/>pwm.GetDutyCycle(0);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(duty_after_resolution_change<sp/>-<sp/>0.5F)<sp/>&gt;<sp/>0.02F)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>2%<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>not<sp/>preserved<sp/>after<sp/>resolution<sp/>change:<sp/>expected<sp/>~50%%,<sp/>got<sp/>%.2f%%&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duty_after_resolution_change<sp/>*<sp/>100.0F);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Duty<sp/>cycle<sp/>preserved<sp/>after<sp/>resolution<sp/>change:<sp/>%.2f%%&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duty_after_resolution_change<sp/>*<sp/>100.0F);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>SetResolution<sp/>-<sp/>change<sp/>to<sp/>12-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Changing<sp/>resolution<sp/>from<sp/>8-bit<sp/>to<sp/>12-bit...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetResolution(0,<sp/>12);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>resolution<sp/>to<sp/>12<sp/>bits:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>resolution<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>new_resolution<sp/>=<sp/>pwm.GetResolution(0);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_resolution<sp/>!=<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Resolution<sp/>should<sp/>be<sp/>12<sp/>bits<sp/>after<sp/>change,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>new_resolution);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Resolution<sp/>successfully<sp/>changed<sp/>to<sp/>12<sp/>bits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>SetFrequencyAndResolution<sp/>-<sp/>atomic<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>atomic<sp/>frequency<sp/>and<sp/>resolution<sp/>change...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetFrequencyAndResolution(0,<sp/>2000,<sp/>9);<sp/></highlight><highlight class="comment">//<sp/>2kHz<sp/>@<sp/>9-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>frequency<sp/>and<sp/>resolution<sp/>atomically:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>both<sp/>parameters<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/>uint32_t<sp/>new_frequency<sp/>=<sp/>pwm.GetFrequency(0);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/>new_resolution<sp/>=<sp/>pwm.GetResolution(0);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_frequency<sp/>!=<sp/>2000)<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Frequency<sp/>should<sp/>be<sp/>2000<sp/>Hz<sp/>after<sp/>atomic<sp/>change,<sp/>got<sp/>%lu&quot;</highlight><highlight class="normal">,<sp/>new_frequency);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_resolution<sp/>!=<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Resolution<sp/>should<sp/>be<sp/>9<sp/>bits<sp/>after<sp/>atomic<sp/>change,<sp/>got<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>new_resolution);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Atomic<sp/>frequency<sp/>and<sp/>resolution<sp/>change<sp/>successful:<sp/>%lu<sp/>Hz<sp/>@<sp/>%d<sp/>bits&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_frequency,<sp/>new_resolution);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>resolution<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>invalid<sp/>resolution<sp/>handling...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Too<sp/>low<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetResolution(0,<sp/>3);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>reject<sp/>resolution<sp/>below<sp/>4<sp/>bits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Correctly<sp/>rejected<sp/>resolution<sp/>below<sp/>4<sp/>bits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Too<sp/>high<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetResolution(0,<sp/>15);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>reject<sp/>resolution<sp/>above<sp/>%d<sp/>bits&quot;</highlight><highlight class="normal">,<sp/><ref refid="EspTypes__PWM_8h_1ae635150b452b279b29b65f799961d51f" kindref="member">HF_PWM_MAX_RESOLUTION</ref>);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Correctly<sp/>rejected<sp/>resolution<sp/>above<sp/>%d<sp/>bits&quot;</highlight><highlight class="normal">,<sp/><ref refid="EspTypes__PWM_8h_1ae635150b452b279b29b65f799961d51f" kindref="member">HF_PWM_MAX_RESOLUTION</ref>);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Resolution<sp/>control<sp/>methods<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a8bb3bdb1657c2758fb3049465f9ebd52" kindref="member">test_resolution_aware_duty_calculations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>resolution-aware<sp/>duty<sp/>cycle<sp/>calculations...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>resolutions<sp/>with<sp/>precise<sp/>duty<sp/>cycle<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResolutionDutyTest<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>resolution_bits{};</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duty_percentage{};</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>expected_raw_value{};</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>std::array&lt;ResolutionDutyTest,<sp/>9&gt;<sp/>tests<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{8,<sp/>0.5F,<sp/>127,<sp/></highlight><highlight class="stringliteral">&quot;8-bit<sp/>@<sp/>50%&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>255/2<sp/>≈<sp/>127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{8,<sp/>0.25F,<sp/>63,<sp/></highlight><highlight class="stringliteral">&quot;8-bit<sp/>@<sp/>25%&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>255/4<sp/>≈<sp/>63</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{8,<sp/>1.0F,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;8-bit<sp/>@<sp/>100%&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{10,<sp/>0.5F,<sp/>511,<sp/></highlight><highlight class="stringliteral">&quot;10-bit<sp/>@<sp/>50%&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1023/2<sp/>≈<sp/>511</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{10,<sp/>0.25F,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;10-bit<sp/>@<sp/>25%&quot;</highlight><highlight class="normal">},<sp/><sp/></highlight><highlight class="comment">//<sp/>1023/4<sp/>≈<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{10,<sp/>1.0F,<sp/>1023,<sp/></highlight><highlight class="stringliteral">&quot;10-bit<sp/>@<sp/>100%&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>1023</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{12,<sp/>0.5F,<sp/>2047,<sp/></highlight><highlight class="stringliteral">&quot;12-bit<sp/>@<sp/>50%&quot;</highlight><highlight class="normal">},<sp/><sp/></highlight><highlight class="comment">//<sp/>4095/2<sp/>≈<sp/>2047</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{12,<sp/>0.25F,<sp/>1023,<sp/></highlight><highlight class="stringliteral">&quot;12-bit<sp/>@<sp/>25%&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>4095/4<sp/>≈<sp/>1023</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{12,<sp/>1.0F,<sp/>4095,<sp/></highlight><highlight class="stringliteral">&quot;12-bit<sp/>@<sp/>100%&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>4095</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test<sp/>:<sp/>tests)<sp/>{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channel<sp/>with<sp/>specific<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2,<sp/>1000,<sp/>test.resolution_bits);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>at<sp/>0%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>channel<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>channel<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>duty<sp/>cycle<sp/>as<sp/>percentage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>test.duty_percentage);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>duty<sp/>cycle<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>duty<sp/>cycle<sp/>reads<sp/>back<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>actual_duty<sp/>=<sp/>pwm.GetDutyCycle(0);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>1.0F<sp/>/<sp/>(1U<sp/>&lt;&lt;<sp/>test.resolution_bits);<sp/></highlight><highlight class="comment">//<sp/>One<sp/>step<sp/>tolerance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(actual_duty<sp/>-<sp/>test.duty_percentage)<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>mismatch<sp/>for<sp/>%s:<sp/>expected<sp/>%.4f,<sp/>got<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>test.description,</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.duty_percentage,<sp/>actual_duty);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>raw<sp/>duty<sp/>cycle<sp/>setting<sp/>with<sp/>expected<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycleRaw(0,<sp/>test.expected_raw_value);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>raw<sp/>duty<sp/>cycle<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test.description);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>raw<sp/>value<sp/>produces<sp/>expected<sp/>percentage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>actual_duty<sp/>=<sp/>pwm.GetDutyCycle(0);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(actual_duty<sp/>-<sp/>test.duty_percentage)<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Raw<sp/>duty<sp/>cycle<sp/>mismatch<sp/>for<sp/>%s:<sp/>expected<sp/>%.4f,<sp/>got<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>test.description,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.duty_percentage,<sp/>actual_duty);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>verified:<sp/>%.4f%%<sp/>(raw=%lu)&quot;</highlight><highlight class="normal">,<sp/>test.description,<sp/>actual_duty<sp/>*<sp/>100.0F,</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test.expected_raw_value);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Resolution-aware<sp/>duty<sp/>calculations<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EDGE<sp/>CASES<sp/>AND<sp/>STRESS<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1aaddaa643d024a35a1d341f5230405cfe" kindref="member">test_edge_cases</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>edge<sp/>cases...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a45787397a6d50d49ef7cd5735893a675" kindref="member">create_basic_with_fade_config</ref>();<sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>mode<sp/>with<sp/>fade<sp/>for<sp/>channel<sp/>enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>boundary<sp/>duty<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>pwm.ConfigureChannel(0,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>minimum<sp/>and<sp/>maximum<sp/>duty<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>0.0F);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>minimum<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(0,<sp/>1.0F);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>maximum<sp/>duty<sp/>cycle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>boundary<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetFrequency(0,<sp/><ref refid="EspTypes__PWM_8h_1ab59b928c49e8f4ef0dbc7c1bac390c93" kindref="member">HF_PWM_MIN_FREQUENCY</ref>);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>minimum<sp/>frequency&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>a<sp/>high<sp/>but<sp/>achievable<sp/>frequency<sp/>(20<sp/>kHz<sp/>is<sp/>reasonable<sp/>for<sp/>ESP32-C6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetFrequency(0,<sp/>20000);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>high<sp/>frequency&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>channel<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(<ref refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" kindref="member">EspPwm::MAX_CHANNELS</ref>,<sp/>0.5F);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>channel<sp/>operation<sp/>should<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Edge<sp/>cases<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a3324381fcc00abcf4d6b91b96eed3019" kindref="member">test_stress_scenarios</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>stress<sp/>scenarios...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a45787397a6d50d49ef7cd5735893a675" kindref="member">create_basic_with_fade_config</ref>();<sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>mode<sp/>with<sp/>fade<sp/>for<sp/>channel<sp/>enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>1:<sp/>Timer<sp/>exhaustion<sp/>stress<sp/>test<sp/>with<sp/>different<sp/>frequency/resolution<sp/>combinations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>1:<sp/>Timer<sp/>exhaustion<sp/>stress<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StressConfig<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel{};</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio{};</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency{};</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution{};</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channels<sp/>with<sp/>different<sp/>combinations<sp/>to<sp/>stress<sp/>timer<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>std::array&lt;StressConfig,<sp/>6&gt;<sp/>stress_configs<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{{0,<sp/>2,<sp/>1000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>channel<sp/>0:<sp/>1kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>6,<sp/>2500,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>channel<sp/>1:<sp/>2.5kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>4,<sp/>5000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>channel<sp/>2:<sp/>5kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,<sp/>5,<sp/>7500,<sp/>9,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>channel<sp/>3:<sp/>7.5kHz<sp/>@<sp/>9-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,<sp/>7,<sp/>12000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>channel<sp/>4:<sp/>12kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,<sp/>8,<sp/>15000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>channel<sp/>5:<sp/>15kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">}}};</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_configs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_failures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cfg<sp/>:<sp/>stress_configs)<sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Configuring<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cfg.description);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(cfg.gpio,<sp/>cfg.frequency,<sp/>cfg.resolution);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>cfg.channel;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIX:<sp/>Calculate<sp/>duty<sp/>based<sp/>on<sp/>resolution<sp/>to<sp/>prevent<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>max_duty<sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>cfg.resolution)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>std::min(200U<sp/>+<sp/>(cfg.channel<sp/>*<sp/>50U),<sp/>max_duty);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(cfg.channel,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_configs++;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(cfg.channel);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>succeeded,<sp/>assigned<sp/>to<sp/>timer<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cfg.description,<sp/>timer_id);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pwm.EnableChannel(cfg.channel);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_failures++;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>failed<sp/>as<sp/>expected:<sp/>%s<sp/>(timer<sp/>exhaustion)&quot;</highlight><highlight class="normal">,<sp/>cfg.description,</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Timer<sp/>stress<sp/>test:<sp/>%d<sp/>successful,<sp/>%d<sp/>failed<sp/>(expected<sp/>due<sp/>to<sp/>timer<sp/>limits)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successful_configs,<sp/>expected_failures);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>2:<sp/>Rapid<sp/>configuration/release<sp/>cycles<sp/>to<sp/>test<sp/>timer<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>2:<sp/>Rapid<sp/>allocation/release<sp/>cycles&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cycle<sp/>=<sp/>0;<sp/>cycle<sp/>&lt;<sp/>5;<sp/>cycle++)<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Allocation<sp/>cycle<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cycle<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channels<sp/>with<sp/>varying<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>4;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>test_pin<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2<sp/>+<sp/>ch);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_pin<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_pin<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution<sp/>=<sp/>8<sp/>+<sp/>(ch<sp/>%<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>Varying<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(test_pin,</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000<sp/>+<sp/>(ch<sp/>*<sp/>500)<sp/>+<sp/>(cycle<sp/>*<sp/>100),<sp/></highlight><highlight class="comment">//<sp/>Varying<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolution<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Varying<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>duty<sp/>based<sp/>on<sp/>resolution<sp/>to<sp/>prevent<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>max_duty<sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>resolution)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>std::min(100U<sp/>+<sp/>(ch<sp/>*<sp/>30U),<sp/>max_duty);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(ch,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pwm.EnableChannel(ch);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Brief<sp/>operation<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>all<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>4;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pwm.DisableChannel(ch);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>timer<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>3:<sp/>Rapid<sp/>duty<sp/>cycle<sp/>changes<sp/>on<sp/>active<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>3:<sp/>Rapid<sp/>duty<sp/>cycle<sp/>stress<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration<sp/>=<sp/>0;<sp/>iteration<sp/>&lt;<sp/>20;<sp/>iteration++)<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>successful_configs;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsChannelEnabled(ch))<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>duty<sp/>=<sp/>0.1F<sp/>+<sp/>(iteration<sp/>*<sp/>0.04F);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(duty<sp/>&gt;<sp/>1.0F)</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duty<sp/>=<sp/>1.0F;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetDutyCycle(ch,<sp/>duty);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Duty<sp/>cycle<sp/>change<sp/>failed<sp/>for<sp/>channel<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ch,</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10));</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>4:<sp/>Rapid<sp/>frequency<sp/>changes<sp/>to<sp/>stress<sp/>timer<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>4:<sp/>Rapid<sp/>frequency<sp/>change<sp/>stress<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration<sp/>=<sp/>0;<sp/>iteration<sp/>&lt;<sp/>10;<sp/>iteration++)<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>successful_configs;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.IsChannelEnabled(ch))<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref><sp/>freq<sp/>=<sp/>500<sp/>+<sp/>(iteration<sp/>*<sp/>200);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.SetFrequency(ch,<sp/>freq);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Frequency<sp/>change<sp/>failed<sp/>for<sp/>channel<sp/>%d<sp/>to<sp/>%lu<sp/>Hz:<sp/>%s<sp/>(expected<sp/>for<sp/>some<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;combinations)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch,<sp/>freq,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>5:<sp/>Test<sp/>synchronized<sp/>operations<sp/>with<sp/>active<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>5:<sp/>Synchronized<sp/>operations<sp/>stress<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>pwm.StartAll();</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>pwm.UpdateAll();</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>pwm.StopAll();</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>6:<sp/>Validate<sp/>system<sp/>state<sp/>after<sp/>stress<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>6:<sp/>Post-stress<sp/>validation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref><sp/>diagnostics;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.GetDiagnostics(diagnostics);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Post-stress<sp/>diagnostics:<sp/>Active<sp/>timers=%d,<sp/>Active<sp/>channels=%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1a696547f39aed2a095016a1fc6b6880bf" kindref="member">active_timers</ref>,<sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1ac3c08b7a63d3b14a1c4012f9123f459a" kindref="member">active_channels</ref>);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref><sp/>statistics;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.GetStatistics(statistics);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Post-stress<sp/>statistics:<sp/>Errors=%lu,<sp/>Duty<sp/>updates=%lu,<sp/>Freq<sp/>changes=%lu&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics.<ref refid="structhf__pwm__statistics__t_1a5efca3ae84ea2ae93a06d099cc9e0c7b" kindref="member">error_count</ref>,<sp/>statistics.<ref refid="structhf__pwm__statistics__t_1ae747cee52098f97c109af47e3ec1528b" kindref="member">duty_updates_count</ref>,</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics.<ref refid="structhf__pwm__statistics__t_1a2fa9cfabb66cf6ccbdadcfbd78c59095" kindref="member">frequency_changes_count</ref>);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Enhanced<sp/>stress<sp/>scenarios<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a7b8e8682b04fa66fab4fd296bda2e832" kindref="member">test_timer_health_check_and_recovery</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>timer<sp/>health<sp/>check<sp/>and<sp/>recovery<sp/>mechanisms...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>1:<sp/>Create<sp/>a<sp/>scenario<sp/>that<sp/>requires<sp/>health<sp/>check<sp/>intervention</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>1:<sp/>Setting<sp/>up<sp/>timer<sp/>allocation<sp/>scenario&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">HealthCheckConfig<sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel{};</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio{};</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency{};</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution{};</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channels<sp/>to<sp/>use<sp/>all<sp/>available<sp/>timers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/>std::array&lt;HealthCheckConfig,<sp/>4&gt;<sp/>health_configs<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{{0,<sp/>2,<sp/>1000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>test:<sp/>1kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>6,<sp/>3000,<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>test:<sp/>3kHz<sp/>@<sp/>10-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>4,<sp/>8000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>test:<sp/>8kHz<sp/>@<sp/>8-bit&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,<sp/>5,<sp/>15000,<sp/>9,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>test:<sp/>15kHz<sp/>@<sp/>9-bit&quot;</highlight><highlight class="normal">}}};</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>successful<sp/>configurations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>configured_channels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cfg<sp/>:<sp/>health_configs)<sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Configuring<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cfg.description);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(cfg.gpio,<sp/>cfg.frequency,<sp/>cfg.resolution);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>cfg.channel;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(cfg.channel,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>configured_channels++;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(cfg.channel);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>configured<sp/>successfully,<sp/>timer<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cfg.description,<sp/>timer_id);</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pwm.EnableChannel(cfg.channel);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cfg.description,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>2:<sp/>Disable<sp/>some<sp/>channels<sp/>to<sp/>create<sp/>orphaned<sp/>timer<sp/>scenario</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>2:<sp/>Creating<sp/>orphaned<sp/>timer<sp/>scenario&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configured_channels<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>channels<sp/>1<sp/>and<sp/>3<sp/>to<sp/>potentially<sp/>create<sp/>orphaned<sp/>timers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.DisableChannel(1);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.DisableChannel(3);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Disabled<sp/>channels<sp/>1<sp/>and<sp/>3<sp/>to<sp/>create<sp/>potential<sp/>orphaned<sp/>timers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>3:<sp/>Try<sp/>to<sp/>allocate<sp/>new<sp/>channels<sp/>that<sp/>should<sp/>trigger<sp/>health<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>3:<sp/>Testing<sp/>health<sp/>check<sp/>trigger<sp/>scenarios&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NewAllocationTest<sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel{};</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio{};</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency{};</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution{};</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>std::array&lt;NewAllocationTest,<sp/>2&gt;<sp/>new_configs<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>7,<sp/>20000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>allocation:<sp/>20kHz<sp/>@<sp/>8-bit<sp/>(should<sp/>trigger<sp/>health<sp/>check)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{5,<sp/>8,<sp/>25000,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>allocation:<sp/>25kHz<sp/>@<sp/>8-bit<sp/>(may<sp/>fail<sp/>due<sp/>to<sp/>limits)&quot;</highlight><highlight class="normal">}}};</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cfg<sp/>:<sp/>new_configs)<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cfg.description);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(cfg.gpio,<sp/>cfg.frequency,<sp/>cfg.resolution);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>cfg.channel;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(cfg.channel,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(cfg.channel);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>succeeded<sp/>(health<sp/>check<sp/>likely<sp/>worked),<sp/>timer<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cfg.description,</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_id);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pwm.EnableChannel(cfg.channel);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>failed:<sp/>%s<sp/>(may<sp/>be<sp/>due<sp/>to<sp/>hardware<sp/>limits)&quot;</highlight><highlight class="normal">,<sp/>cfg.description,</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>4:<sp/>Test<sp/>recovery<sp/>after<sp/>complete<sp/>channel<sp/>release</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>4:<sp/>Testing<sp/>recovery<sp/>after<sp/>complete<sp/>channel<sp/>release&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>all<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>ch<sp/>=<sp/>0;<sp/>ch<sp/>&lt;<sp/>6;<sp/>ch++)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.DisableChannel(ch);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>potential<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>allocate<sp/>fresh<sp/>channels<sp/>(should<sp/>succeed<sp/>if<sp/>health<sp/>check<sp/>works)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>recovery_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(2,<sp/>5000,<sp/>10);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/>recovery_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>recovery_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>512;<sp/></highlight><highlight class="comment">//<sp/>50%<sp/>for<sp/>10-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(0,<sp/>recovery_config);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Recovery<sp/>allocation<sp/>succeeded<sp/>-<sp/>health<sp/>check<sp/>mechanism<sp/>working&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm.EnableChannel(0);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Recovery<sp/>allocation<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>5:<sp/>Validate<sp/>final<sp/>system<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>5:<sp/>Final<sp/>system<sp/>state<sp/>validation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref><sp/>diagnostics;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.GetDiagnostics(diagnostics);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Final<sp/>diagnostics:<sp/>Active<sp/>timers=%d,<sp/>Active<sp/>channels=%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1a696547f39aed2a095016a1fc6b6880bf" kindref="member">active_timers</ref>,<sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1ac3c08b7a63d3b14a1c4012f9123f459a" kindref="member">active_channels</ref>);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>cleanup,<sp/>we<sp/>should<sp/>have<sp/>minimal<sp/>active<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diagnostics.<ref refid="structhf__pwm__diagnostics__t_1a696547f39aed2a095016a1fc6b6880bf" kindref="member">active_timers</ref><sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;More<sp/>active<sp/>timers<sp/>than<sp/>expected:<sp/>%d<sp/>(health<sp/>check<sp/>may<sp/>not<sp/>be<sp/>optimal)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagnostics.<ref refid="structhf__pwm__diagnostics__t_1a696547f39aed2a095016a1fc6b6880bf" kindref="member">active_timers</ref>);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref><sp/>statistics;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.GetStatistics(statistics);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Final<sp/>statistics:<sp/>Total<sp/>errors=%lu,<sp/>Channel<sp/>enables=%lu&quot;</highlight><highlight class="normal">,<sp/>statistics.<ref refid="structhf__pwm__statistics__t_1a5efca3ae84ea2ae93a06d099cc9e0c7b" kindref="member">error_count</ref>,</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics.<ref refid="structhf__pwm__statistics__t_1aebf52d83fb8b3a8581a0b8a3cd0113bc" kindref="member">channel_enables_count</ref>);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Timer<sp/>health<sp/>check<sp/>and<sp/>recovery<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a687562e8e2d6d9b6bd37d9d1fa638ed3" kindref="member">test_safe_eviction_policies</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>safe<sp/>eviction<sp/>policies...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref><sp/>config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1a50bb580ecff427d931bb593fe6642647" kindref="member">create_test_config</ref>();</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><ref refid="classEspPwm" kindref="compound">EspPwm</ref><sp/>pwm(config);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.EnsureInitialized())<sp/>{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>1:<sp/>Test<sp/>STRICT_NO_EVICTION<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>1:<sp/>Testing<sp/>STRICT_NO_EVICTION<sp/>policy<sp/>(default)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>default<sp/>policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwm.GetEvictionPolicy()<sp/>!=<sp/><ref refid="EspTypes__PWM_8h_1ac87a4c9f233c95c6036c956aa21fdf72a149573f7fc27bf6e07f0d47846625809" kindref="member">hf_pwm_eviction_policy_t::STRICT_NO_EVICTION</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Default<sp/>eviction<sp/>policy<sp/>should<sp/>be<sp/>STRICT_NO_EVICTION&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Default<sp/>eviction<sp/>policy<sp/>is<sp/>STRICT_NO_EVICTION<sp/>(safe)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>channels<sp/>to<sp/>fill<sp/>all<sp/>timers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EvictionTestConfig<sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel{};</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__GPIO_8h_1a7c9e2e1aa654eb2d62d13b1c9129eadc" kindref="member">hf_gpio_num_t</ref><sp/>gpio{};</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>frequency{};</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>resolution{};</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_critical{};</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description{};</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>std::array&lt;EvictionTestConfig,<sp/>4&gt;<sp/>eviction_configs<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0,<sp/>2,<sp/>1000,<sp/>8,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Critical<sp/>motor<sp/>control&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="comment">//<sp/>Critical<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>6,<sp/>3000,<sp/>10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LED<sp/>indicator&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-critical<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>4,<sp/>8000,<sp/>8,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Status<sp/>LED&quot;</highlight><highlight class="normal">},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-critical<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{3,<sp/>5,<sp/>15000,<sp/>9,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Safety<sp/>shutdown<sp/>system&quot;</highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Critical<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>}};</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>all<sp/>channels<sp/>and<sp/>mark<sp/>critical<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cfg<sp/>:<sp/>eviction_configs)<sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>ch_config<sp/>=</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(cfg.gpio,<sp/>cfg.frequency,<sp/>cfg.resolution);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>cfg.channel;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>128;<sp/></highlight><highlight class="comment">//<sp/>Safe<sp/>duty<sp/>for<sp/>all<sp/>resolutions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1aefd3b546b1a76f6c4e64c8166b4622a0" kindref="member">is_critical</ref><sp/>=<sp/>cfg.is_critical;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1ac5f48dc824d8b32f7ab403dca3d8b0ce" kindref="member">priority</ref><sp/>=<sp/>cfg.is_critical<sp/>?<sp/><ref refid="EspTypes__PWM_8h_1ad8fbde8152ecafefd714f3a7eb8344c1a5f9223804ac004dc2fad18afc18a3951" kindref="member">hf_pwm_channel_priority_t::PRIORITY_CRITICAL</ref></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="EspTypes__PWM_8h_1ad8fbde8152ecafefd714f3a7eb8344c1a860a24d0e7b2fcadbbb258aad2708ad7" kindref="member">hf_pwm_channel_priority_t::PRIORITY_NORMAL</ref>;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/>ch_config.<ref refid="structhf__pwm__channel__config__t_1a527f5098ffbb707a1c337c63d0d22c42" kindref="member">description</ref><sp/>=<sp/>cfg.description;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(cfg.channel,<sp/>ch_config);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pwm.EnableChannel(cfg.channel);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(cfg.channel);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>%s<sp/>configured<sp/>on<sp/>timer<sp/>%d<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>cfg.description,<sp/>timer_id,</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg.is_critical<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;CRITICAL&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;normal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>allocate<sp/>a<sp/>5th<sp/>channel<sp/>that<sp/>would<sp/>require<sp/>eviction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref><sp/>conflict_config<sp/>=<sp/><ref refid="PwmComprehensiveTest_8cpp_1af405691c29e4988fe137763d85b5638e" kindref="member">create_test_channel_config</ref>(7,<sp/>20000,<sp/>8);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/>conflict_config.<ref refid="structhf__pwm__channel__config__t_1ae342069b991c2d0834df2342534fb9ca" kindref="member">channel_id</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>conflict_config.<ref refid="structhf__pwm__channel__config__t_1ad2ddbd9698b451c8a02f9455686947e8" kindref="member">duty_initial</ref><sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(4,<sp/>conflict_config);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;STRICT_NO_EVICTION<sp/>should<sp/>have<sp/>prevented<sp/>allocation<sp/>requiring<sp/>eviction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>STRICT_NO_EVICTION<sp/>correctly<sp/>denied<sp/>allocation<sp/>requiring<sp/>eviction:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>2:<sp/>Test<sp/>ALLOW_EVICTION_NON_CRITICAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>2:<sp/>Testing<sp/>ALLOW_EVICTION_NON_CRITICAL<sp/>policy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetEvictionPolicy(<ref refid="EspTypes__PWM_8h_1ac87a4c9f233c95c6036c956aa21fdf72adf490f88b592696d2f33a4e4d137e0a0" kindref="member">hf_pwm_eviction_policy_t::ALLOW_EVICTION_NON_CRITICAL</ref>);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>eviction<sp/>policy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>the<sp/>same<sp/>allocation<sp/>-<sp/>should<sp/>now<sp/>succeed<sp/>by<sp/>evicting<sp/>non-critical<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.ConfigureChannel(4,<sp/>conflict_config);</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>timer_id<sp/>=<sp/>pwm.GetTimerAssignment(4);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>ALLOW_EVICTION_NON_CRITICAL<sp/>successfully<sp/>allocated<sp/>channel<sp/>4<sp/>to<sp/>timer<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer_id);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>critical<sp/>channels<sp/>are<sp/>still<sp/>working</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.IsChannelEnabled(0)<sp/>||<sp/>!pwm.IsChannelEnabled(3))<sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Critical<sp/>channels<sp/>should<sp/>still<sp/>be<sp/>enabled<sp/>after<sp/>non-critical<sp/>eviction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Critical<sp/>channels<sp/>(0,3)<sp/>still<sp/>enabled<sp/>after<sp/>non-critical<sp/>eviction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Non-critical<sp/>eviction<sp/>failed<sp/>(acceptable):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BasePwm_8h_1ad8292f4a3edf6781ea0e0eccb6ef07d0" kindref="member">HfPwmErrToString</ref>(result));</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>3:<sp/>Test<sp/>channel<sp/>protection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>3:<sp/>Testing<sp/>channel<sp/>protection<sp/>mechanisms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>channel<sp/>1<sp/>as<sp/>critical<sp/>and<sp/>try<sp/>to<sp/>cause<sp/>eviction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetChannelCritical(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>mark<sp/>channel<sp/>1<sp/>as<sp/>critical&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pwm.IsChannelCritical(1))<sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>1<sp/>should<sp/>be<sp/>marked<sp/>as<sp/>critical&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Channel<sp/>1<sp/>successfully<sp/>marked<sp/>as<sp/>critical&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Phase<sp/>4:<sp/>Reset<sp/>to<sp/>safe<sp/>policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Phase<sp/>4:<sp/>Resetting<sp/>to<sp/>safe<sp/>policy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>pwm.SetEvictionPolicy(<ref refid="EspTypes__PWM_8h_1ac87a4c9f233c95c6036c956aa21fdf72a149573f7fc27bf6e07f0d47846625809" kindref="member">hf_pwm_eviction_policy_t::STRICT_NO_EVICTION</ref>);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9a94f41578c634bed720c918a30d471d74" kindref="member">hf_pwm_err_t::PWM_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>to<sp/>safe<sp/>eviction<sp/>policy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Successfully<sp/>reset<sp/>to<sp/>STRICT_NO_EVICTION<sp/>policy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Safe<sp/>eviction<sp/>policies<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAIN<sp/>TEST<sp/>EXECUTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="PwmComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" kindref="member">app_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╔════════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>PWM<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╚════════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Target:<sp/>ESP32-C6<sp/>DevKit-M-1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>ESP-IDF:<sp/>v5.5+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Features:<sp/>PWM,<sp/>Duty<sp/>Cycle<sp/>Control,<sp/>Frequency<sp/>Control,<sp/>Phase<sp/>Shift<sp/>Control,<sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Complementary<sp/>Outputs,<sp/>Hardware<sp/>Fade,<sp/>Idle<sp/>Level<sp/>Control,<sp/>Timer<sp/>Management,<sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Status<sp/>Reporting,<sp/>Statistics<sp/>and<sp/>Diagnostics,<sp/>Callbacks,<sp/>Edge<sp/>Cases,<sp/>Stress<sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Tests,<sp/>ESP32-Specific<sp/>Features,<sp/>Error<sp/>Handling,<sp/>Performance,<sp/>Utility<sp/>Functions,║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Cleanup,<sp/>Edge<sp/>Cases,<sp/>Stress<sp/>Tests,<sp/>ESP32-Specific<sp/>Features,<sp/>Error<sp/>Handling,<sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Performance,<sp/>Utility<sp/>Functions,<sp/>Cleanup,<sp/>Edge<sp/>Cases,<sp/>Stress<sp/>Tests<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Architecture:<sp/>noexcept<sp/>(no<sp/>exception<sp/>handling)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╚════════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>progression<sp/>indicator<sp/>is<sp/>automatically<sp/>initialized<sp/>by<sp/>the<sp/>test<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>test<sp/>section<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a200bb35a3a48c625b9cb8d2511d6bd87" kindref="member">print_test_section_status</ref>(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>all<sp/>PWM<sp/>tests<sp/>based<sp/>on<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>CORE<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor/Destructor<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>constructor/destructor<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;constructor_default&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a6c0ea104bbc969773b0f0fc01ce59427" kindref="member">test_constructor_default</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;destructor_cleanup&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a41856ae7947b93a6270aeb52871efcdc" kindref="member">test_destructor_cleanup</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lifecycle<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>lifecycle<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;initialization_states&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1ad71f1413a26f4b0370ba42830f528d3f" kindref="member">test_initialization_states</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;lazy_initialization&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a9b5608cb08732b47ed3fcc5876d432a1" kindref="member">test_lazy_initialization</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a3b87425d773ae21581c79757b028a305" kindref="member">ENABLE_CONFIGURATION_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>CONFIGURATION<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configuration<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>configuration<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;mode_configuration&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1afe02537ea9fba65fe574969bebc62a93" kindref="member">test_mode_configuration</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;clock_source_configuration&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a0551324b7cb1ff7a6e773d33ae6ec63b" kindref="member">test_clock_source_configuration</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;basic_mode_without_fade&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a0388efdb95291842f5888945249ee804" kindref="member">test_basic_mode_without_fade</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a05671e7c3b2a396d167591bc71f6f3aa" kindref="member">ENABLE_CHANNEL_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>CHANNEL<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Channel<sp/>Management<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>channel<sp/>management<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;channel_configuration&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1ae94920ac9ac5ef7b7e19227a543aa897" kindref="member">test_channel_configuration</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;channel_enable_disable&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a2eb3a0fe3d5de0753e21fc501eb747b2" kindref="member">test_channel_enable_disable</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a96d016e653ce6543b0f33c810fbd99ae" kindref="member">ENABLE_CONTROL_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>CONTROL<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PWM<sp/>Control<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>PWM<sp/>control<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;duty_cycle_control&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a11f709a7441945bedb2ad074efaf6a56" kindref="member">test_duty_cycle_control</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;frequency_control&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1aea28a233901023f44d7a08da1b2ee9bd" kindref="member">test_frequency_control</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;phase_shift_control&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a6796ed18fb6c3ac50a1693b5e42978d8" kindref="member">test_phase_shift_control</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>ADVANCED<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advanced<sp/>Features<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>advanced<sp/>feature<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;synchronized_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a02ccbe5f6ff3043080fad263164442e7" kindref="member">test_synchronized_operations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;complementary_outputs&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1acc4bc44ec78fcec6b27c2fa6be8ce89b" kindref="member">test_complementary_outputs</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1aaf2cc16434e0f7cca58940f8804c59b1" kindref="member">ENABLE_ESP_SPECIFIC_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>ESP-SPECIFIC<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP32-Specific<sp/>Features<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>ESP32-specific<sp/>feature<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;hardware_fade&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a294dc78c7a9fbc19a1fa82d4e098894a" kindref="member">test_hardware_fade</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;fade_mode_functionality&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a53bd3b7c698049eee1ab5ec7bb6f6dff" kindref="member">test_fade_mode_functionality</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;idle_level_control&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1afa9cc9b2b8decba4deb1bcff1be6dd5e" kindref="member">test_idle_level_control</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;timer_management&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1ab38a32943c773daa1ec468e36a96e3d2" kindref="member">test_timer_management</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1ae22f0bc7e64b36b6e5a363bb7476c300" kindref="member">ENABLE_RESOLUTION_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>RESOLUTION<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resolution<sp/>and<sp/>Validation<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>resolution<sp/>and<sp/>validation<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;resolution_specific_duty_cycles&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a8cc5aa996f5e4b3f05b78e15c919c290" kindref="member">test_resolution_specific_duty_cycles</ref>,</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;frequency_resolution_validation&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a6b01aa170c426e6d376fb80186362494" kindref="member">test_frequency_resolution_validation</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;enhanced_validation_system&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1aaef554a318adc1d66d07e793bb4c59be" kindref="member">test_enhanced_validation_system</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;percentage_consistency_across_resolutions&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a78255391f2dd8215198f46bc83601df4" kindref="member">test_percentage_consistency_across_resolutions</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;resolution_control_methods&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1aea88426d552b48deec0d8006279bef54" kindref="member">test_resolution_control_methods</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;resolution_aware_duty_calculations&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a8bb3bdb1657c2758fb3049465f9ebd52" kindref="member">test_resolution_aware_duty_calculations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a7b508df4d2c3c64ab4a9ad64bac43490" kindref="member">ENABLE_DIAGNOSTIC_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>DIAGNOSTIC<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Status<sp/>and<sp/>Diagnostics<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>status<sp/>and<sp/>diagnostics<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;status_reporting&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1ad9eec9feb6f6252773b3a945a31576de" kindref="member">test_status_reporting</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;statistics_and_diagnostics&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1ac6ee19f88b989b8170183b9c6f96f7a8" kindref="member">test_statistics_and_diagnostics</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Callback<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>callback<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;callbacks&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1ac279348bbae6927b73186a65e9f7536e" kindref="member">test_callbacks</ref>,<sp/>8192,<sp/>1);<sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="PwmComprehensiveTest_8cpp_1a607ec39049dad2c67f0ab145e0311397" kindref="member">ENABLE_STRESS_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>STRESS<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Edge<sp/>Cases<sp/>and<sp/>Stress<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>edge<sp/>cases<sp/>and<sp/>stress<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;edge_cases&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1aaddaa643d024a35a1d341f5230405cfe" kindref="member">test_edge_cases</ref>,<sp/>8192,<sp/>1);<sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;stress_scenarios&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a3324381fcc00abcf4d6b91b96eed3019" kindref="member">test_stress_scenarios</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advanced<sp/>Timer<sp/>Management<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>advanced<sp/>timer<sp/>management<sp/>tests...&quot;</highlight><highlight class="normal">);<sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timer_health_check_and_recovery&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a7b8e8682b04fa66fab4fd296bda2e832" kindref="member">test_timer_health_check_and_recovery</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Critical<sp/>Safety<sp/>Tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>critical<sp/>safety<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;safe_eviction_policies&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a687562e8e2d6d9b6bd37d9d1fa638ed3" kindref="member">test_safe_eviction_policies</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>final<sp/>summary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab7e4c076755ecdf2ad6212cb8f6578ab" kindref="member">print_test_summary</ref>(<ref refid="PwmComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP32<sp/>PWM<sp/>COMPREHENSIVE&quot;</highlight><highlight class="normal">,<sp/><ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;PWM<sp/>comprehensive<sp/>testing<sp/>completed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;System<sp/>will<sp/>continue<sp/>running.<sp/>Press<sp/>RESET<sp/>to<sp/>restart<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Post-test<sp/>banner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╔════════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>PWM<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="PwmComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;╚════════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>progression<sp/>indicator<sp/>is<sp/>automatically<sp/>cleaned<sp/>up<sp/>by<sp/>the<sp/>test<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10000));</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2945"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="examples/esp32/main/PwmComprehensiveTest.cpp"/>
  </compounddef>
</doxygen>
