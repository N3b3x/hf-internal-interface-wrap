<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classEspPwm" kind="class" language="C++" prot="public">
    <compoundname>EspPwm</compoundname>
    <basecompoundref refid="classBasePwm" prot="public" virt="non-virtual">BasePwm</basecompoundref>
    <includes refid="EspPwm_8h" local="no">EspPwm.h</includes>
    <innerclass refid="structEspPwm_1_1ChannelState" prot="private">EspPwm::ChannelState</innerclass>
    <innerclass refid="structEspPwm_1_1ComplementaryPair" prot="private">EspPwm::ComplementaryPair</innerclass>
    <innerclass refid="structEspPwm_1_1TimerState" prot="private">EspPwm::TimerState</innerclass>
    <innerclass refid="structEspPwm_1_1ValidationContext" prot="private">EspPwm::ValidationContext</innerclass>
    <innerclass refid="structEspPwm_1_1ValidationResult" prot="private">EspPwm::ValidationResult</innerclass>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classEspPwm_1a1595caab94f2f77924d128115eab0be2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t EspPwm::MAX_CHANNELS</definition>
        <argsstring></argsstring>
        <name>MAX_CHANNELS</name>
        <qualifiedname>EspPwm::MAX_CHANNELS</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1a86d24d14ec124f4012f812f9853993f0" kindref="member">HF_PWM_MAX_CHANNELS</ref></initializer>
        <briefdescription>
<para>Maximum PWM channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="101" column="28" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a625133f35c2449a53e048f63df138a89" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t EspPwm::MAX_TIMERS</definition>
        <argsstring></argsstring>
        <name>MAX_TIMERS</name>
        <qualifiedname>EspPwm::MAX_TIMERS</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1a188b45a8dc354e4753a2d2a3ade6b06e" kindref="member">HF_PWM_MAX_TIMERS</ref></initializer>
        <briefdescription>
<para>Maximum timer groups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="102" column="28" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a5ebf53a209f25236bafcb52fe0564d2a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t EspPwm::MAX_RESOLUTION</definition>
        <argsstring></argsstring>
        <name>MAX_RESOLUTION</name>
        <qualifiedname>EspPwm::MAX_RESOLUTION</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1ae635150b452b279b29b65f799961d51f" kindref="member">HF_PWM_MAX_RESOLUTION</ref></initializer>
        <briefdescription>
<para>Maximum resolution bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="103" column="28" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1af03e7350d2c885bbca5358ee3a183d10" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>constexpr hf_u32_t EspPwm::MIN_FREQUENCY</definition>
        <argsstring></argsstring>
        <name>MIN_FREQUENCY</name>
        <qualifiedname>EspPwm::MIN_FREQUENCY</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1ab59b928c49e8f4ef0dbc7c1bac390c93" kindref="member">HF_PWM_MIN_FREQUENCY</ref></initializer>
        <briefdescription>
<para>Minimum frequency (Hz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="104" column="29" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a9028b609b50b17802ce3b8da3ec39899" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>constexpr hf_u32_t EspPwm::MAX_FREQUENCY</definition>
        <argsstring></argsstring>
        <name>MAX_FREQUENCY</name>
        <qualifiedname>EspPwm::MAX_FREQUENCY</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1aefdd9851ea138af7ce3b87a861c9f8b7" kindref="member">HF_PWM_MAX_FREQUENCY</ref></initializer>
        <briefdescription>
<para>Maximum frequency (Hz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="105" column="29" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="105" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspPwm_1ae4c8b8e2abef78e240fc60451b6d793e" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspPwm::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspPwm::mutex_</qualifiedname>
        <briefdescription>
<para>Thread safety mutex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1080" column="21" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a62f5455c00a2bf6bee32c4edeb5b90d0" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspPwm::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>EspPwm::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization state (atomic for lazy init) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1081" column="15" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1adb2698a4d9441132c4f9ba23a4dc4678" prot="private" static="no" mutable="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspPwm::base_clock_hz_</definition>
        <argsstring></argsstring>
        <name>base_clock_hz_</name>
        <qualifiedname>EspPwm::base_clock_hz_</qualifiedname>
        <briefdescription>
<para>Base clock frequency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1082" column="12" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ac4da347398a044e97ecfd586a65d4470" prot="private" static="no" mutable="no">
        <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
        <definition>hf_pwm_clock_source_t EspPwm::clock_source_</definition>
        <argsstring></argsstring>
        <name>clock_source_</name>
        <qualifiedname>EspPwm::clock_source_</qualifiedname>
        <briefdescription>
<para>Current clock source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1083" column="25" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ab3341c72b5f1d413999dfc44fd8d80d2" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="structEspPwm_1_1ChannelState" kindref="compound">ChannelState</ref>, <ref refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" kindref="member">MAX_CHANNELS</ref> &gt;</type>
        <definition>std::array&lt;ChannelState, MAX_CHANNELS&gt; EspPwm::channels_</definition>
        <argsstring></argsstring>
        <name>channels_</name>
        <qualifiedname>EspPwm::channels_</qualifiedname>
        <briefdescription>
<para>Channel states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1085" column="14" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ad569f2cfbea460323ab5847717019d75" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="structEspPwm_1_1TimerState" kindref="compound">TimerState</ref>, <ref refid="classEspPwm_1a625133f35c2449a53e048f63df138a89" kindref="member">MAX_TIMERS</ref> &gt;</type>
        <definition>std::array&lt;TimerState, MAX_TIMERS&gt; EspPwm::timers_</definition>
        <argsstring></argsstring>
        <name>timers_</name>
        <qualifiedname>EspPwm::timers_</qualifiedname>
        <briefdescription>
<para>Timer states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1086" column="14" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1afdfcaf9396528e32f648a403fd4fb075" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="structEspPwm_1_1ComplementaryPair" kindref="compound">ComplementaryPair</ref>, <ref refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" kindref="member">MAX_CHANNELS</ref>/2 &gt;</type>
        <definition>std::array&lt;ComplementaryPair, MAX_CHANNELS / 2&gt; EspPwm::complementary_pairs_</definition>
        <argsstring></argsstring>
        <name>complementary_pairs_</name>
        <qualifiedname>EspPwm::complementary_pairs_</qualifiedname>
        <briefdescription>
<para>Complementary pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1087" column="14" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ad1b06777e74eedca37e5023ec23fc4ce" prot="private" static="no" mutable="no">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::last_global_error_</definition>
        <argsstring></argsstring>
        <name>last_global_error_</name>
        <qualifiedname>EspPwm::last_global_error_</qualifiedname>
        <briefdescription>
<para>Last global error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1089" column="16" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ab200d2d51794d3c3f6c18945132bc7e4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspPwm::fade_functionality_installed_</definition>
        <argsstring></argsstring>
        <name>fade_functionality_installed_</name>
        <qualifiedname>EspPwm::fade_functionality_installed_</qualifiedname>
        <briefdescription>
<para>LEDC fade functionality installed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1090" column="8" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ac2592dd4dbe1e99213a7d1d4c69e67fd" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref></type>
        <definition>hf_pwm_unit_config_t EspPwm::unit_config_</definition>
        <argsstring></argsstring>
        <name>unit_config_</name>
        <qualifiedname>EspPwm::unit_config_</qualifiedname>
        <briefdescription>
<para>Unit configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1093" column="24" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a364fe8d01eaea5c9664f43c8c2bd2dcb" prot="private" static="no" mutable="no">
        <type><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3fa" kindref="member">hf_pwm_mode_t</ref></type>
        <definition>hf_pwm_mode_t EspPwm::current_mode_</definition>
        <argsstring></argsstring>
        <name>current_mode_</name>
        <qualifiedname>EspPwm::current_mode_</qualifiedname>
        <briefdescription>
<para>Current operating mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1094" column="17" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1aefe4a2dfe1bccd062a299b1febb8aef8" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref></type>
        <definition>hf_pwm_statistics_t EspPwm::statistics_</definition>
        <argsstring></argsstring>
        <name>statistics_</name>
        <qualifiedname>EspPwm::statistics_</qualifiedname>
        <briefdescription>
<para>PWM statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1095" column="23" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a825cbef48b32048590def430ae108584" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref></type>
        <definition>hf_pwm_diagnostics_t EspPwm::diagnostics_</definition>
        <argsstring></argsstring>
        <name>diagnostics_</name>
        <qualifiedname>EspPwm::diagnostics_</qualifiedname>
        <briefdescription>
<para>PWM diagnostics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1096" column="24" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a1f3b42702956b65454339f9a61458806" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspPwm::auto_fallback_enabled_</definition>
        <argsstring></argsstring>
        <name>auto_fallback_enabled_</name>
        <qualifiedname>EspPwm::auto_fallback_enabled_</qualifiedname>
        <briefdescription>
<para>Whether to automatically try alternative resolutions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1097" column="8" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a1f1584998723762eec8692090592650f" prot="private" static="no" mutable="no">
        <type><ref refid="EspTypes__PWM_8h_1ac87a4c9f233c95c6036c956aa21fdf72" kindref="member">hf_pwm_eviction_policy_t</ref></type>
        <definition>hf_pwm_eviction_policy_t EspPwm::eviction_policy_</definition>
        <argsstring></argsstring>
        <name>eviction_policy_</name>
        <qualifiedname>EspPwm::eviction_policy_</qualifiedname>
        <briefdescription>
<para>Timer eviction policy (default: STRICT_NO_EVICTION) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1101" column="7" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ac60137ac8d1bee195299fd6b2fa88431" prot="private" static="no" mutable="no">
        <type><ref refid="EspTypes__PWM_8h_1aa88988c1a4ef6005d3f20421ecba42ed" kindref="member">hf_pwm_eviction_callback_t</ref></type>
        <definition>hf_pwm_eviction_callback_t EspPwm::eviction_callback_</definition>
        <argsstring></argsstring>
        <name>eviction_callback_</name>
        <qualifiedname>EspPwm::eviction_callback_</qualifiedname>
        <briefdescription>
<para>User callback for eviction consent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1102" column="30" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a2ae786082f476290ff5907881989d986" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* EspPwm::eviction_callback_user_data_</definition>
        <argsstring></argsstring>
        <name>eviction_callback_user_data_</name>
        <qualifiedname>EspPwm::eviction_callback_user_data_</qualifiedname>
        <briefdescription>
<para>User data for eviction callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1103" column="8" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspPwm_1ae8e7d6e7f4ca605d4d4a361dc7806fd0" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspPwm::EspPwm</definition>
        <argsstring>(const hf_pwm_unit_config_t &amp;config=hf_pwm_unit_config_t{}) noexcept</argsstring>
        <name>EspPwm</name>
        <qualifiedname>EspPwm::EspPwm</qualifiedname>
        <param>
          <type>const <ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref> &amp;</type>
          <declname>config</declname>
          <defval><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref>{}</defval>
        </param>
        <briefdescription>
<para>Constructor for ESP32C6 PWM controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM unit configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Uses lazy initialization - no hardware action until first operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="116" column="12" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="63" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aaac5ce3f95ae8c5fb96312ad9a779ce6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>EspPwm::~EspPwm</definition>
        <argsstring>() noexcept override</argsstring>
        <name>~EspPwm</name>
        <qualifiedname>EspPwm::~EspPwm</qualifiedname>
        <briefdescription>
<para>Destructor - ensures clean shutdown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="121" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1adda6756a1158a4cb37194c0690ac412f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspPwm::EspPwm</definition>
        <argsstring>(const EspPwm &amp;)=delete</argsstring>
        <name>EspPwm</name>
        <qualifiedname>EspPwm::EspPwm</qualifiedname>
        <param>
          <type>const <ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="124" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ae46e009618632e0db573912f71c94f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        <definition>EspPwm &amp; EspPwm::operator=</definition>
        <argsstring>(const EspPwm &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspPwm::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="125" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a0523ebf8e643c95ad9b3ced6ff077fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspPwm::EspPwm</definition>
        <argsstring>(EspPwm &amp;&amp;)=delete</argsstring>
        <name>EspPwm</name>
        <qualifiedname>EspPwm::EspPwm</qualifiedname>
        <param>
          <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="126" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aecba3137a0ead8abc259ab199648148b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        <definition>EspPwm &amp; EspPwm::operator=</definition>
        <argsstring>(EspPwm &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspPwm::operator=</qualifiedname>
        <param>
          <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aedb8649c68e856258d6278bf399aab05" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::Initialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspPwm::Initialize</qualifiedname>
        <reimplements refid="classBasePwm_1a4dba77ec0b1d096f85af2288f121f7f7">Initialize</reimplements>
        <briefdescription>
<para>Initialize the LEDC peripheral and PWM subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Performs comprehensive LEDC peripheral initialization:<itemizedlist>
<listitem><para>Initializes timer and channel state arrays</para>
</listitem><listitem><para>Sets up fade functionality if enabled in configuration</para>
</listitem><listitem><para>Validates ESP32 variant capabilities</para>
</listitem><listitem><para>Prepares resource management systems</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This method is called automatically by <ref refid="classBasePwm_1aa084e73274f2f1d1d67cff793eda1956" kindref="member">EnsureInitialized()</ref> (lazy initialization) </para>
</simplesect>
<simplesect kind="warning"><para>Multiple calls return PWM_ERR_ALREADY_INITIALIZED (safe to call repeatedly)</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classEspPwm_1a28c857a39efec61ad79770770fca878c" kindref="member">Deinitialize()</ref> for cleanup and resource release</para>
</simplesect>
() - ESP32-specific implementation using LEDC peripheral </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="150" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="85" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a28c857a39efec61ad79770770fca878c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::Deinitialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspPwm::Deinitialize</qualifiedname>
        <reimplements refid="classBasePwm_1a7d3dbe67ab0c23c738e2507f915137fb">Deinitialize</reimplements>
        <briefdescription>
<para>Deinitialize the LEDC peripheral and release all resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Performs comprehensive cleanup and resource release:<itemizedlist>
<listitem><para>Stops all active PWM channels with proper idle level setting</para>
</listitem><listitem><para>Releases and resets all LEDC timers with hardware cleanup</para>
</listitem><listitem><para>Resets all GPIO pins to default state</para>
</listitem><listitem><para>Uninstalls fade functionality to prevent conflicts</para>
</listitem><listitem><para>Clears all internal state and statistics</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Safe to call multiple times or on already deinitialized instances </para>
</simplesect>
<simplesect kind="warning"><para>All PWM outputs will stop and GPIOs will be reset to default state</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classEspPwm_1aedb8649c68e856258d6278bf399aab05" kindref="member">Initialize()</ref> for PWM subsystem initialization</para>
</simplesect>
() - ESP32-specific cleanup with LEDC peripheral reset </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="170" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="128" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a848d38996b427bf51215bf0c0147a328" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetMode</definition>
        <argsstring>(hf_pwm_mode_t mode) noexcept</argsstring>
        <name>SetMode</name>
        <qualifiedname>EspPwm::SetMode</qualifiedname>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3fa" kindref="member">hf_pwm_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set PWM operating mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operating mode (Basic or Fade) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="177" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="207" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a620e13937a4213f8c44219272302a1a7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3fa" kindref="member">hf_pwm_mode_t</ref></type>
        <definition>hf_pwm_mode_t EspPwm::GetMode</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetMode</name>
        <qualifiedname>EspPwm::GetMode</qualifiedname>
        <briefdescription>
<para>Get current PWM operating mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current operating mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="183" column="17" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4dc265e040617403e718d4d28ff66e56" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ConfigureChannel</definition>
        <argsstring>(hf_channel_id_t channel_id, const hf_pwm_channel_config_t &amp;config) noexcept</argsstring>
        <name>ConfigureChannel</name>
        <qualifiedname>EspPwm::ConfigureChannel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure a PWM channel with comprehensive LEDC feature support. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier (0 to MAX_CHANNELS-1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Complete channel configuration including GPIO, frequency, resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
This method configures a PWM channel with full LEDC peripheral integration:<itemizedlist>
<listitem><para><bold>Timer Assignment:</bold> Automatic or manual timer allocation with conflict resolution</para>
</listitem><listitem><para><bold>Frequency/Resolution Validation:</bold> Hardware constraint verification against clock source</para>
</listitem><listitem><para><bold>GPIO Configuration:</bold> Pin matrix validation and hardware setup</para>
</listitem><listitem><para><bold>Resource Management:</bold> Smart timer sharing and eviction policy enforcement</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>The channel must be enabled separately using <ref refid="classEspPwm_1a3bd515c8685db84d5ff92a475063d663" kindref="member">EnableChannel()</ref> </para>
</simplesect>
<simplesect kind="warning"><para>Invalid frequency/resolution combinations will be rejected with detailed error codes</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classEspPwm_1aa1e2001e94083e72e12e0bf1a6f34d77" kindref="member">SetFrequencyWithResolution()</ref> for explicit frequency/resolution control </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classEspPwm_1a3bd515c8685db84d5ff92a475063d663" kindref="member">EnableChannel()</ref> to activate the configured channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="207" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="236" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a416e064052b50ac0175651a5e191adc4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::DeconfigureChannel</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept</argsstring>
        <name>DeconfigureChannel</name>
        <qualifiedname>EspPwm::DeconfigureChannel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Deconfigure a channel and release all associated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to deconfigure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>This method:<orderedlist>
<listitem><para>Stops the channel if it&apos;s enabled</para>
</listitem><listitem><para>Releases timer resources if no other channels are using it</para>
</listitem><listitem><para>Resets GPIO pin to default state</para>
</listitem><listitem><para>Completely resets channel state to unconfigured </para>
</listitem></orderedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="220" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2773" bodyend="2841"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a3bd515c8685db84d5ff92a475063d663" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::EnableChannel</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept override</argsstring>
        <name>EnableChannel</name>
        <qualifiedname>EspPwm::EnableChannel</qualifiedname>
        <reimplements refid="classBasePwm_1af1c19d6ae43e3711a2a16dc39d8dbfa6">EnableChannel</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Enable a configured PWM channel to start signal generation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to enable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Activates PWM signal generation on the specified channel using the LEDC peripheral. The channel must be previously configured with <ref refid="classEspPwm_1a4dc265e040617403e718d4d28ff66e56" kindref="member">ConfigureChannel()</ref>.</para>
<para><simplesect kind="note"><para>Uses fade-compatible or basic LEDC functions based on current mode </para>
</simplesect>
<simplesect kind="warning"><para>Channel must be configured before enabling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="233" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="342" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a8ff1addad40e1a81afa83a975b136e89" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::DisableChannel</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept override</argsstring>
        <name>DisableChannel</name>
        <qualifiedname>EspPwm::DisableChannel</qualifiedname>
        <reimplements refid="classBasePwm_1a88b6b8a4d9ea7c9172846aa4e9cc572d">DisableChannel</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Disable a PWM channel and stop signal generation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Stops PWM signal generation and sets output to configured idle level. Timer resources are automatically managed and released if unused.</para>
<para><simplesect kind="note"><para>GPIO pin will be set to the configured idle level (0 or 1) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="245" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="412" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a07c737787080435a486d47ad3c6803e9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsChannelEnabled</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept override</argsstring>
        <name>IsChannelEnabled</name>
        <qualifiedname>EspPwm::IsChannelEnabled</qualifiedname>
        <reimplements refid="classBasePwm_1af2f490b963644ca04d4750b7d947b543">IsChannelEnabled</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Check if a PWM channel is currently enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if channel is enabled and generating PWM signals, false otherwise</para>
</simplesect>
<simplesect kind="note"><para>Returns false for unconfigured channels or channels that failed to enable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="254" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="463" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ae4170c3b4661c0d4b9646eb3d775c88c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetDutyCycle</definition>
        <argsstring>(hf_channel_id_t channel_id, float duty_cycle) noexcept override</argsstring>
        <name>SetDutyCycle</name>
        <qualifiedname>EspPwm::SetDutyCycle</qualifiedname>
        <reimplements refid="classBasePwm_1a4883325ace0e9fd9d096fc87a24317c3">SetDutyCycle</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>duty_cycle</declname>
        </param>
        <briefdescription>
<para>Set PWM duty cycle as a percentage (0.0 to 1.0) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duty_cycle</parametername>
</parameternamelist>
<parameterdescription>
<para>Duty cycle as percentage (0.0 = 0%, 1.0 = 100%) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Converts percentage to raw value based on channel&apos;s current resolution and updates the LEDC peripheral. Supports both fade and basic modes.</para>
<para><simplesect kind="note"><para>Duty cycle is automatically clamped to valid range [0.0, 1.0] </para>
</simplesect>
<simplesect kind="warning"><para>Channel must be configured and enabled for immediate effect </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="272" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="476" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6bc8906d106762d5c9b1bcfd68ff0636" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetDutyCycleRaw</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u32_t raw_value) noexcept override</argsstring>
        <name>SetDutyCycleRaw</name>
        <qualifiedname>EspPwm::SetDutyCycleRaw</qualifiedname>
        <reimplements refid="classBasePwm_1aa9f97e6e7c9af42aae99b8aeae5e7c67">SetDutyCycleRaw</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>raw_value</declname>
        </param>
        <briefdescription>
<para>Set PWM duty cycle using raw timer counts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw duty cycle value (0 to (2^resolution - 1)) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Directly sets LEDC timer compare value for maximum precision. Value is validated against current channel resolution.</para>
<para><simplesect kind="note"><para>Raw value is clamped to maximum for current resolution </para>
</simplesect>
<simplesect kind="warning"><para>Use <ref refid="classEspPwm_1a038775414699ae7a63277c2050ff7545" kindref="member">GetResolution()</ref> to determine valid raw value range </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="286" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="532" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a185108e6adbaaa23bcef4fbd8bda1b91" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetFrequency</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_frequency_hz_t frequency_hz) noexcept override</argsstring>
        <name>SetFrequency</name>
        <qualifiedname>EspPwm::SetFrequency</qualifiedname>
        <reimplements refid="classBasePwm_1ad192230babf2e4dc7a37477b4a0153b8">SetFrequency</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <briefdescription>
<para>Set PWM frequency with automatic timer management. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Target frequency in Hz </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Automatically manages timer allocation and sharing for efficient resource usage. May trigger timer reconfiguration or reallocation if frequency change is significant.</para>
<para><simplesect kind="note"><para>Frequency is validated against current resolution and clock source </para>
</simplesect>
<simplesect kind="warning"><para>Large frequency changes may affect other channels sharing the same timer</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classEspPwm_1aa1e2001e94083e72e12e0bf1a6f34d77" kindref="member">SetFrequencyWithResolution()</ref> for explicit frequency/resolution control </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classEspPwm_1a23cb19b3d0030bf788c976f05c4bd6e9" kindref="member">EnableAutoFallback()</ref> for automatic resolution adjustment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="303" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="585" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6096fdc1d06345204c8062d2f86bd0c5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetPhaseShift</definition>
        <argsstring>(hf_channel_id_t channel_id, float phase_shift_degrees) noexcept override</argsstring>
        <name>SetPhaseShift</name>
        <qualifiedname>EspPwm::SetPhaseShift</qualifiedname>
        <reimplements refid="classBasePwm_1ad2d69c4057b84358f120f1c27fb3e2c1">SetPhaseShift</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>phase_shift_degrees</declname>
        </param>
        <briefdescription>
<para>Set PWM phase shift (ESP32 LEDC limitation: not supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier (unused) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_shift_degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Phase shift in degrees (unused) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_ERR_INVALID_PARAMETER (LEDC doesn&apos;t support phase shift)</para>
</simplesect>
The ESP32 LEDC peripheral does not support hardware phase shifting. This method is provided for interface compatibility but will always return an error.</para>
<para><simplesect kind="note"><para>For phase relationships, consider using timer offsets or software timing </para>
</simplesect>
<simplesect kind="warning"><para>This method will always fail on ESP32 LEDC peripheral</para>
</simplesect>
() - Required by base class interface but not supported by ESP32 LEDC hardware </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="321" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="772" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aa1e2001e94083e72e12e0bf1a6f34d77" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetFrequencyWithResolution</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_frequency_hz_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>SetFrequencyWithResolution</name>
        <qualifiedname>EspPwm::SetFrequencyWithResolution</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Set frequency with explicit resolution choice (user-controlled) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Target frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Explicit resolution choice in bits (4-14) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
This method allows precise control over both frequency and resolution. The combination is validated against LEDC hardware constraints:<itemizedlist>
<listitem><para><bold>Formula:</bold> Required Clock = frequency_hz × (2^resolution_bits)</para>
</listitem><listitem><para><bold>APB Clock (80MHz):</bold> Max frequency = 80MHz / (2^resolution_bits)</para>
</listitem><listitem><para><bold>Example:</bold> 1kHz @ 10-bit requires 1.024MHz (1.28% of 80MHz) ✓</para>
</listitem><listitem><para><bold>Example:</bold> 100kHz @ 10-bit requires 102.4MHz (128% of 80MHz) ✗</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This method performs strict validation and will fail if the frequency/resolution combination exceeds hardware capabilities. Use <ref refid="classEspPwm_1abe00eaeddf0a329994bdebf61d3439f9" kindref="member">SetFrequencyWithAutoFallback()</ref> for automatic resolution adjustment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="346" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="794" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1abe00eaeddf0a329994bdebf61d3439f9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetFrequencyWithAutoFallback</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_frequency_hz_t frequency_hz, hf_u8_t preferred_resolution) noexcept</argsstring>
        <name>SetFrequencyWithAutoFallback</name>
        <qualifiedname>EspPwm::SetFrequencyWithAutoFallback</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>preferred_resolution</declname>
        </param>
        <briefdescription>
<para>Set frequency with automatic fallback to alternative resolutions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Target frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preferred_resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Preferred resolution in bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>Automatically tries alternative resolutions if preferred fails </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="358" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="869" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ae2795158cb647453ec43de6f9848417b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetResolution</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>SetResolution</name>
        <qualifiedname>EspPwm::SetResolution</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Set PWM resolution for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Resolution in bits (4-14) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>This may require timer reallocation if resolution changes significantly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="369" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="958" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a038775414699ae7a63277c2050ff7545" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>hf_u8_t EspPwm::GetResolution</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>GetResolution</name>
        <qualifiedname>EspPwm::GetResolution</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get current PWM resolution for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current resolution in bits, or 0 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="376" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="990" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aa98797ac6975b2f6ec3c297113bbf99d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetFrequencyAndResolution</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_frequency_hz_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>SetFrequencyAndResolution</name>
        <qualifiedname>EspPwm::SetFrequencyAndResolution</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Set frequency and resolution together (atomic operation) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Resolution in bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>This is the most efficient way to change both parameters simultaneously </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="386" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1005" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a23cb19b3d0030bf788c976f05c4bd6e9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::EnableAutoFallback</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnableAutoFallback</name>
        <qualifiedname>EspPwm::EnableAutoFallback</qualifiedname>
        <briefdescription>
<para>Enable automatic fallback to alternative resolutions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>When enabled, <ref refid="classEspPwm_1a185108e6adbaaa23bcef4fbd8bda1b91" kindref="member">SetFrequency()</ref> will automatically try alternative resolutions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="394" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="927" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aeda4cc0ceb6d711d81989a66d2fe3596" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::DisableAutoFallback</definition>
        <argsstring>() noexcept</argsstring>
        <name>DisableAutoFallback</name>
        <qualifiedname>EspPwm::DisableAutoFallback</qualifiedname>
        <briefdescription>
<para>Disable automatic fallback to alternative resolutions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>When disabled, <ref refid="classEspPwm_1a185108e6adbaaa23bcef4fbd8bda1b91" kindref="member">SetFrequency()</ref> will fail validation for problematic combinations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="401" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="938" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1adb0842868ea3508b65542b2b3c46b155" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsAutoFallbackEnabled</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsAutoFallbackEnabled</name>
        <qualifiedname>EspPwm::IsAutoFallbackEnabled</qualifiedname>
        <briefdescription>
<para>Check if auto-fallback mode is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if auto-fallback is enabled, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="407" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="949" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a130153d9f4bdaee4219736cb248d78f6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::StartAll</definition>
        <argsstring>() noexcept override</argsstring>
        <name>StartAll</name>
        <qualifiedname>EspPwm::StartAll</qualifiedname>
        <reimplements refid="classBasePwm_1a02e791636c4d544d702b06014695ed31">StartAll</reimplements>
        <briefdescription>
<para>Start all configured PWM channels simultaneously. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Enables all configured channels in a coordinated manner for synchronized startup. Channels that are already enabled remain unaffected.</para>
<para><simplesect kind="note"><para>Only affects channels that have been configured with <ref refid="classEspPwm_1a4dc265e040617403e718d4d28ff66e56" kindref="member">ConfigureChannel()</ref> </para>
</simplesect>
<simplesect kind="warning"><para>Individual channel errors are logged but don&apos;t stop the overall operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="423" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1120" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a8be25ecab27ff61499a66535f303df2e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::StopAll</definition>
        <argsstring>() noexcept override</argsstring>
        <name>StopAll</name>
        <qualifiedname>EspPwm::StopAll</qualifiedname>
        <reimplements refid="classBasePwm_1a0dc5b8704b7f3107745224441d7b3a5b">StopAll</reimplements>
        <briefdescription>
<para>Stop all enabled PWM channels simultaneously. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Disables all enabled channels in a coordinated manner for synchronized shutdown. Each channel&apos;s GPIO will be set to its configured idle level.</para>
<para><simplesect kind="note"><para>Timer resources are automatically managed and released as appropriate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="434" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1141" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a5681d5ceb230b6dc0a459f3ef9630b8b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::UpdateAll</definition>
        <argsstring>() noexcept override</argsstring>
        <name>UpdateAll</name>
        <qualifiedname>EspPwm::UpdateAll</qualifiedname>
        <reimplements refid="classBasePwm_1a9cb4de783416fab169872c9250d30089">UpdateAll</reimplements>
        <briefdescription>
<para>Update all enabled PWM channels with their current settings. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Forces a synchronized update of all active LEDC channels to ensure any pending duty cycle or configuration changes take effect simultaneously.</para>
<para><simplesect kind="note"><para>Useful after multiple <ref refid="classEspPwm_1ae4170c3b4661c0d4b9646eb3d775c88c" kindref="member">SetDutyCycle()</ref> calls to ensure synchronized updates </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="445" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1162" bodyend="1183"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6c4cc0b3c19e7258a063b1900f9d291a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetComplementaryOutput</definition>
        <argsstring>(hf_channel_id_t primary_channel, hf_channel_id_t complementary_channel, hf_u32_t deadtime_ns) noexcept override</argsstring>
        <name>SetComplementaryOutput</name>
        <qualifiedname>EspPwm::SetComplementaryOutput</qualifiedname>
        <reimplements refid="classBasePwm_1a4b7f8834e3f06fbf5995b3bfd3e7aa71">SetComplementaryOutput</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>primary_channel</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>complementary_channel</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>deadtime_ns</declname>
        </param>
        <briefdescription>
<para>Configure complementary PWM output pair with deadtime. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primary_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Primary channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>complementary_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Complementary channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadtime_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Deadtime between transitions in nanoseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Creates a complementary PWM pair where outputs are never high simultaneously. Deadtime prevents shoot-through in power electronics applications.</para>
<para><simplesect kind="note"><para>Both channels must be configured and use the same timer </para>
</simplesect>
<simplesect kind="warning"><para>Complementary operation is implemented in software, not hardware</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classEspPwm_1a4dc265e040617403e718d4d28ff66e56" kindref="member">ConfigureChannel()</ref> to set up both channels before pairing</para>
</simplesect>
() - Software-based complementary PWM for motor control </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="465" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1185" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aeb3eda73cca25d298a3c7e3cbf133f03" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>float</type>
        <definition>float EspPwm::GetDutyCycle</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept override</argsstring>
        <name>GetDutyCycle</name>
        <qualifiedname>EspPwm::GetDutyCycle</qualifiedname>
        <reimplements refid="classBasePwm_1a7d04dac1cdbfc50884b24b912a52b877">GetDutyCycle</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get current duty cycle as a percentage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current duty cycle (0.0 to 1.0), or 0.0 if channel not configured</para>
</simplesect>
Reads the current LEDC timer compare value and converts to percentage based on the channel&apos;s current resolution setting.</para>
<para><simplesect kind="note"><para>Returns 0.0 for unconfigured channels or on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="483" column="9" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1234" bodyend="1244"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4687559ad8744ece1ef578796b21eb02" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
        <definition>hf_frequency_hz_t EspPwm::GetFrequency</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept override</argsstring>
        <name>GetFrequency</name>
        <qualifiedname>EspPwm::GetFrequency</qualifiedname>
        <reimplements refid="classBasePwm_1a9be813122b797d0a45c3248f0c203063">GetFrequency</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get current PWM frequency in Hz. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current frequency in Hz, or 0 if channel not configured</para>
</simplesect>
Returns the frequency of the timer assigned to this channel. Multiple channels sharing the same timer will return the same frequency.</para>
<para><simplesect kind="note"><para>Returns 0 for unconfigured channels or on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="495" column="21" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1246" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a7cf9c46011b383820a588a9f153dfc52" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetChannelStatus</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_pwm_channel_status_t &amp;status) const noexcept</argsstring>
        <name>GetChannelStatus</name>
        <qualifiedname>EspPwm::GetChannelStatus</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="structhf__pwm__channel__status__t" kindref="compound">hf_pwm_channel_status_t</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get comprehensive channel status and configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to status structure to populate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Provides complete channel state including enabled status, current settings, resolution, raw duty value, and error state for diagnostic purposes.</para>
<para><simplesect kind="note"><para>Status structure is zeroed on error or for unconfigured channels </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="508" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1257" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1af92695b9e07458d6280489d1ce3d8bdd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetCapabilities</definition>
        <argsstring>(hf_pwm_capabilities_t &amp;capabilities) const noexcept</argsstring>
        <name>GetCapabilities</name>
        <qualifiedname>EspPwm::GetCapabilities</qualifiedname>
        <param>
          <type><ref refid="structhf__pwm__capabilities__t" kindref="compound">hf_pwm_capabilities_t</ref> &amp;</type>
          <declname>capabilities</declname>
        </param>
        <briefdescription>
<para>Get ESP32 variant-specific PWM capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capabilities</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to capabilities structure to populate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Returns hardware-specific limits including channel count, timer count, maximum resolution, frequency ranges, and supported features for the current ESP32 variant.</para>
<para><simplesect kind="note"><para>Capabilities are determined at compile-time based on target ESP32 variant </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="521" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1291" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a1e5a6eaafc83ba4ac56718fcded72d81" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetLastError</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>GetLastError</name>
        <qualifiedname>EspPwm::GetLastError</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get the last error code for a specific channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Last error code for this channel, or PWM_ERR_INVALID_CHANNEL for invalid ID</para>
</simplesect>
Each channel maintains its own error state for detailed error tracking. Useful for debugging channel-specific issues in multi-channel applications.</para>
<para><simplesect kind="note"><para>Error state is cleared on successful operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="533" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1304" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a543f85cebac06d91b5ac4fe7d6f325d6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetChannelFadeCallback</definition>
        <argsstring>(hf_channel_id_t channel_id, std::function&lt; void(hf_channel_id_t)&gt; callback) noexcept</argsstring>
        <name>SetChannelFadeCallback</name>
        <qualifiedname>EspPwm::SetChannelFadeCallback</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref>)&gt;</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set per-channel callback for PWM fade completion events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier to set callback for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call on fade completion (or nullptr to disable) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Registers a per-channel callback function that is triggered when a hardware fade operation completes on the specified channel. This uses the native ESP32-C6 LEDC fade completion interrupt mechanism.</para>
<para><bold>Fade Completion Detection:</bold><itemizedlist>
<listitem><para><bold>LEDC Hardware Interrupt:</bold> Native ESP32-C6 fade completion interrupt</para>
</listitem><listitem><para><bold>Per-Channel Granularity:</bold> Each channel can have its own fade callback</para>
</listitem><listitem><para><bold>Automatic Registration:</bold> Uses <computeroutput>ledc_cb_register()</computeroutput> for proper ESP-IDF integration</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This callback is only triggered for hardware fade operations (<ref refid="classEspPwm_1a9fb67c853d1d7d042a047fbc22ae67c5" kindref="member">SetHardwareFade()</ref>) </para>
</simplesect>
<simplesect kind="warning"><para>Callback functions should be ISR-safe and execute quickly (&lt; 10μs recommended) </para>
</simplesect>
<simplesect kind="warning"><para>Do not call blocking functions or start new fade operations in the callback</para>
</simplesect>
<bold>Example Usage:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_fade_callback(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ISR-safe<sp/>operations<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fade_complete_flags<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>channel);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>completion<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>task,<sp/>update<sp/>state,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pwm.SetChannelFadeCallback(0,<sp/>my_fade_callback);</highlight></codeline>
<codeline><highlight class="normal">pwm.SetHardwareFade(0,<sp/>0.8f,<sp/>1000);<sp/></highlight><highlight class="comment">//<sp/>Fade<sp/>will<sp/>trigger<sp/>callback<sp/>when<sp/>complete</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="classEspPwm_1a9fb67c853d1d7d042a047fbc22ae67c5" kindref="member">SetHardwareFade()</ref> for hardware fade operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="573" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1353" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a9fb67c853d1d7d042a047fbc22ae67c5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetHardwareFade</definition>
        <argsstring>(hf_channel_id_t channel_id, float target_duty_cycle, hf_u32_t fade_time_ms) noexcept</argsstring>
        <name>SetHardwareFade</name>
        <qualifiedname>EspPwm::SetHardwareFade</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>target_duty_cycle</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>fade_time_ms</declname>
        </param>
        <briefdescription>
<para>Set hardware fade for smooth duty cycle transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_duty_cycle</parametername>
</parameternamelist>
<parameterdescription>
<para>Target duty cycle (0.0 - 1.0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fade_time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Fade duration in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="587" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1396" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ab3d06a21a6eda6c081f660895d81bbb1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::StopHardwareFade</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept</argsstring>
        <name>StopHardwareFade</name>
        <qualifiedname>EspPwm::StopHardwareFade</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Stop hardware fade for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="595" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1462" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a7006101d1efdbfa70c2b65604ded7b85" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsFadeActive</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>IsFadeActive</name>
        <qualifiedname>EspPwm::IsFadeActive</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Check if hardware fade is active on a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if fade is active, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="602" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1494" bodyend="1502"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a1d72b937ecff8d06181a2a0e7c7cb314" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetIdleLevel</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u8_t idle_level) noexcept</argsstring>
        <name>SetIdleLevel</name>
        <qualifiedname>EspPwm::SetIdleLevel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>idle_level</declname>
        </param>
        <briefdescription>
<para>Set idle output level for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idle_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Idle level (0 or 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="610" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1504" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4437f86f7dfc052c9abd0cd633c10e71" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>hf_i8_t EspPwm::GetTimerAssignment</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>GetTimerAssignment</name>
        <qualifiedname>EspPwm::GetTimerAssignment</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get current timer assignment for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer number (0-3), or -1 if channel not configured </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="617" column="10" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1537" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a38358269d437372bb72805e76fc151ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ForceTimerAssignment</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u8_t timer_id) noexcept</argsstring>
        <name>ForceTimerAssignment</name>
        <qualifiedname>EspPwm::ForceTimerAssignment</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <briefdescription>
<para>Force a specific timer for a channel (advanced usage) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer identifier (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>Use with caution - automatic timer allocation is usually better </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="626" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1547" bodyend="1618"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a57006756d21e8f6b6c6c65c919b991e0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetEvictionPolicy</definition>
        <argsstring>(hf_pwm_eviction_policy_t policy) noexcept</argsstring>
        <name>SetEvictionPolicy</name>
        <qualifiedname>EspPwm::SetEvictionPolicy</qualifiedname>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ac87a4c9f233c95c6036c956aa21fdf72" kindref="member">hf_pwm_eviction_policy_t</ref></type>
          <declname>policy</declname>
        </param>
        <briefdescription>
<para>Set timer eviction policy for resource management. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>Eviction policy to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>Default is STRICT_NO_EVICTION for safety </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="638" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1624" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6bf8969af578c46e95a7b16552c3442a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="EspTypes__PWM_8h_1ac87a4c9f233c95c6036c956aa21fdf72" kindref="member">hf_pwm_eviction_policy_t</ref></type>
        <definition>hf_pwm_eviction_policy_t EspPwm::GetEvictionPolicy</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetEvictionPolicy</name>
        <qualifiedname>EspPwm::GetEvictionPolicy</qualifiedname>
        <briefdescription>
<para>Get current eviction policy. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current eviction policy </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="644" column="28" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1639" bodyend="1642"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a90f27ca6f4deb563c66b584604bee706" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetEvictionCallback</definition>
        <argsstring>(hf_pwm_eviction_callback_t callback, void *user_data=nullptr) noexcept</argsstring>
        <name>SetEvictionCallback</name>
        <qualifiedname>EspPwm::SetEvictionCallback</qualifiedname>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1aa88988c1a4ef6005d3f20421ecba42ed" kindref="member">hf_pwm_eviction_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Set eviction consent callback for user-controlled eviction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to approve/deny eviction requests </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>Only used when policy is ALLOW_EVICTION_WITH_CONSENT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="653" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1644" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a77340b2ecd211629ea79e7d9f151e063" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetChannelPriority</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_pwm_channel_priority_t priority) noexcept</argsstring>
        <name>SetChannelPriority</name>
        <qualifiedname>EspPwm::SetChannelPriority</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad8fbde8152ecafefd714f3a7eb8344c1" kindref="member">hf_pwm_channel_priority_t</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Set channel priority for eviction decisions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="662" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1658" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a572bf6e4c5628fb5996353922417c4bc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="EspTypes__PWM_8h_1ad8fbde8152ecafefd714f3a7eb8344c1" kindref="member">hf_pwm_channel_priority_t</ref></type>
        <definition>hf_pwm_channel_priority_t EspPwm::GetChannelPriority</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>GetChannelPriority</name>
        <qualifiedname>EspPwm::GetChannelPriority</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get channel priority. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Channel priority, or PRIORITY_NORMAL if channel not configured </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="670" column="29" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1685" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a7b222f44fa892e931bda82929f123d54" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetChannelCritical</definition>
        <argsstring>(hf_channel_id_t channel_id, bool is_critical) noexcept</argsstring>
        <name>SetChannelCritical</name>
        <qualifiedname>EspPwm::SetChannelCritical</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_critical</declname>
        </param>
        <briefdescription>
<para>Mark channel as critical (never evict) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_critical</parametername>
</parameternamelist>
<parameterdescription>
<para>True to protect from eviction, false to allow </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="678" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1695" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a85c715fe2272e8c1dc93e47f44ab56ac" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsChannelCritical</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>IsChannelCritical</name>
        <qualifiedname>EspPwm::IsChannelCritical</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Check if channel is marked as critical. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if channel is critical, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="685" column="9" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1726" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a9ff4ddc5a06060a4b7194154a7d28617" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetStatistics</definition>
        <argsstring>(hf_pwm_statistics_t &amp;statistics) const noexcept override</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>EspPwm::GetStatistics</qualifiedname>
        <reimplements refid="classBasePwm_1a7802bfabb7ac9430764bce70cbf03758">GetStatistics</reimplements>
        <param>
          <type><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get PWM statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Statistics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="692" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1314" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a81bc4616d9447ad43ec6d6c732049b59" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetDiagnostics</definition>
        <argsstring>(hf_pwm_diagnostics_t &amp;diagnostics) const noexcept override</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>EspPwm::GetDiagnostics</qualifiedname>
        <reimplements refid="classBasePwm_1a752841609c8cd458ee658579dd7f60c6">GetDiagnostics</reimplements>
        <param>
          <type><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get PWM diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagnostics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="699" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1320" bodyend="1347"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEspPwm_1a4fcc3a06cf3ba05f0f0524257d9ebf0d" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsValidChannelId</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>IsValidChannelId</name>
        <qualifiedname>EspPwm::IsValidChannelId</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Validate channel ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="773" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1740" bodyend="1742"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a8f782916b4f7d5dabe48e2c913ea98e9" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" kindref="member">hf_i8_t</ref></type>
        <definition>hf_i8_t EspPwm::FindOrAllocateTimer</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits, hf_pwm_clock_source_t clock_source) noexcept</argsstring>
        <name>FindOrAllocateTimer</name>
        <qualifiedname>EspPwm::FindOrAllocateTimer</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>clock_source</declname>
        </param>
        <briefdescription>
<para>Unified timer allocation with comprehensive strategy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Required frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Required resolution in bits (4-14) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clock_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Preferred clock source for timer configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer ID (0 to MAX_TIMERS-1), or -1 if no timer available</para>
</simplesect>
Implements a multi-phase allocation strategy:<orderedlist>
<listitem><para><bold>Optimal Reuse:</bold> Find exact frequency/resolution match</para>
</listitem><listitem><para><bold>Compatible Reuse:</bold> Find compatible frequency within tolerance</para>
</listitem><listitem><para><bold>New Allocation:</bold> Allocate unused timer with validation</para>
</listitem><listitem><para><bold>Health Check:</bold> Clean up orphaned timers and retry</para>
</listitem><listitem><para><bold>Safe Eviction:</bold> Apply user-defined eviction policies</para>
</listitem></orderedlist>
</para>
<para><simplesect kind="note"><para>Combines all allocation strategies for maximum efficiency </para>
</simplesect>
<simplesect kind="warning"><para>Returns -1 if all strategies fail (no available timers) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="792" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1744" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aecd0e9059cb48af8c52140ff2ac7cf8c" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::ReleaseTimerIfUnused</definition>
        <argsstring>(hf_u8_t timer_id) noexcept</argsstring>
        <name>ReleaseTimerIfUnused</name>
        <qualifiedname>EspPwm::ReleaseTimerIfUnused</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <briefdescription>
<para>Release a timer if no longer needed with hardware cleanup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer to potentially release </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="799" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1864" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a362d7335d05a027efd2a9429bf4d8e40" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ConfigurePlatformTimer</definition>
        <argsstring>(hf_u8_t timer_id, hf_u32_t frequency_hz, hf_u8_t resolution_bits, hf_pwm_clock_source_t clock_source) noexcept</argsstring>
        <name>ConfigurePlatformTimer</name>
        <qualifiedname>EspPwm::ConfigurePlatformTimer</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>clock_source</declname>
        </param>
        <briefdescription>
<para>Configure platform timer with LEDC peripheral integration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer identifier to configure (0 to MAX_TIMERS-1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer resolution in bits (4-14) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clock_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source for timer configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure</para>
</simplesect>
Configures an LEDC timer with specified parameters:<itemizedlist>
<listitem><para>Maps clock source enum to ESP-IDF LEDC clock configuration</para>
</listitem><listitem><para>Validates frequency/resolution combination against hardware constraints</para>
</listitem><listitem><para>Updates internal timer state for resource tracking</para>
</listitem><listitem><para>Performs actual LEDC timer hardware configuration</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Timer configuration affects all channels assigned to this timer </para>
</simplesect>
<simplesect kind="warning"><para>Invalid combinations will cause hardware configuration failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="818" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1896" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a023bc718f864eb1e2b887c4de5013fa9" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ConfigurePlatformChannel</definition>
        <argsstring>(hf_channel_id_t channel_id, const hf_pwm_channel_config_t &amp;config, hf_u8_t timer_id) noexcept</argsstring>
        <name>ConfigurePlatformChannel</name>
        <qualifiedname>EspPwm::ConfigurePlatformChannel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <briefdescription>
<para>Configure platform channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Assigned timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="829" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1949" bodyend="2002"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aeb62a6be326c25671cc8780618902cd4" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::UpdatePlatformDuty</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u32_t raw_duty_value) noexcept</argsstring>
        <name>UpdatePlatformDuty</name>
        <qualifiedname>EspPwm::UpdatePlatformDuty</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>raw_duty_value</declname>
        </param>
        <briefdescription>
<para>Update platform duty cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw_duty_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw duty value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="839" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2004" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6b4f2fafd78318e313ced753414f11d2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::SetChannelError</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_pwm_err_t error) noexcept</argsstring>
        <name>SetChannelError</name>
        <qualifiedname>EspPwm::SetChannelError</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Set error for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Error to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="846" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2046" bodyend="2052"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1af0c248eb7f9a03bf23e992c4f75b46fc" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::HandleFadeComplete</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept</argsstring>
        <name>HandleFadeComplete</name>
        <qualifiedname>EspPwm::HandleFadeComplete</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Handle fade complete interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel that completed fade </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="859" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2061" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a3189d43f89c413fbf2b047339b9d8eed" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::RegisterLedcFadeCallback</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept</argsstring>
        <name>RegisterLedcFadeCallback</name>
        <qualifiedname>EspPwm::RegisterLedcFadeCallback</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Register LEDC fade callback using ESP-IDF API. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to register callback for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="866" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2077" bodyend="2115"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a51e0799a5758dd6159e417fcf00c5d31" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::UnregisterLedcFadeCallback</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept</argsstring>
        <name>UnregisterLedcFadeCallback</name>
        <qualifiedname>EspPwm::UnregisterLedcFadeCallback</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Unregister LEDC fade callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to unregister callback for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="873" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2117" bodyend="2147"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1abfd65e0509706ecefd541b8546596469" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::InitializeFadeFunctionality</definition>
        <argsstring>() noexcept</argsstring>
        <name>InitializeFadeFunctionality</name>
        <qualifiedname>EspPwm::InitializeFadeFunctionality</qualifiedname>
        <briefdescription>
<para>Initialize LEDC fade functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="887" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2181" bodyend="2200"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ae9e920ee5ebeced7fbe9dd8a80622605" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::InitializeTimers</definition>
        <argsstring>() noexcept</argsstring>
        <name>InitializeTimers</name>
        <qualifiedname>EspPwm::InitializeTimers</qualifiedname>
        <briefdescription>
<para>Initialize PWM timers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="893" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2422" bodyend="2432"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ab8ee8dcae85c2b59b80dbc996522a7b2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::InitializeChannels</definition>
        <argsstring>() noexcept</argsstring>
        <name>InitializeChannels</name>
        <qualifiedname>EspPwm::InitializeChannels</qualifiedname>
        <briefdescription>
<para>Initialize PWM channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="899" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2434" bodyend="2449"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a9192ec3aa26d9acac2c0e6ec30c6bed1" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::EnableFade</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnableFade</name>
        <qualifiedname>EspPwm::EnableFade</qualifiedname>
        <briefdescription>
<para>Enable fade functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="905" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2451" bodyend="2471"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6a19207d3326cb8f660670a6fa46035c" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspPwm::CalculateClockDivider</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits) const noexcept</argsstring>
        <name>CalculateClockDivider</name>
        <qualifiedname>EspPwm::CalculateClockDivider</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Calculate optimal clock divider for frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Target frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock divider value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="913" column="13" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2202" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1abd81092951838b5058abd3db6ad7a0af" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structEspPwm_1_1ValidationResult" kindref="compound">ValidationResult</ref></type>
        <definition>EspPwm::ValidationResult EspPwm::ValidateFrequencyResolutionComplete</definition>
        <argsstring>(const ValidationContext &amp;context) const noexcept</argsstring>
        <name>ValidateFrequencyResolutionComplete</name>
        <qualifiedname>EspPwm::ValidateFrequencyResolutionComplete</qualifiedname>
        <param>
          <type>const <ref refid="structEspPwm_1_1ValidationContext" kindref="compound">ValidationContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Unified comprehensive validation for frequency/resolution combinations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Validation context with all parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Detailed validation result with recommendations </para>
</simplesect>
<simplesect kind="note"><para>This replaces all individual validation functions with a unified approach </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="959" column="21" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2333" bodyend="2416"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ab9124b114f15aa018720cff258fe4bda" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspPwm::GetSourceClockFrequency</definition>
        <argsstring>(hf_pwm_clock_source_t clock_source) const noexcept</argsstring>
        <name>GetSourceClockFrequency</name>
        <qualifiedname>EspPwm::GetSourceClockFrequency</qualifiedname>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>clock_source</declname>
        </param>
        <briefdescription>
<para>Get source clock frequency for a given clock source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clock_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source to query </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock frequency in Hz </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="967" column="13" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2216" bodyend="2228"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1af5a2e6d7bd1a18b68089d5f3bdea2e34" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>hf_u8_t EspPwm::CalculateMaxResolution</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_pwm_clock_source_t clock_source=hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB) const noexcept</argsstring>
        <name>CalculateMaxResolution</name>
        <qualifiedname>EspPwm::CalculateMaxResolution</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>clock_source</declname>
          <defval><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a2fb4f97b7c1b78586a5f9f8365272822" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB</ref></defval>
        </param>
        <briefdescription>
<para>Calculate maximum achievable resolution for a given frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Target frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clock_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source to use (default: APB) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum resolution in bits, or 0 if frequency too high </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="975" column="12" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2230" bodyend="2246"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a1fa0af5ac18437a6235fcbdfca39b222" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspPwm::CalculateMaxFrequency</definition>
        <argsstring>(hf_u8_t resolution_bits, hf_pwm_clock_source_t clock_source=hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB) const noexcept</argsstring>
        <name>CalculateMaxFrequency</name>
        <qualifiedname>EspPwm::CalculateMaxFrequency</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>clock_source</declname>
          <defval><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a2fb4f97b7c1b78586a5f9f8365272822" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB</ref></defval>
        </param>
        <briefdescription>
<para>Calculate maximum achievable frequency for a given resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Target resolution in bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clock_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source to use (default: APB) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum frequency in Hz, or 0 if resolution too high </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="985" column="13" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2248" bodyend="2263"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aa3662ff3251aebe8026b16bef3773420" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::ValidateDutyCycleRange</definition>
        <argsstring>(hf_u32_t raw_duty, hf_u8_t resolution_bits) const noexcept</argsstring>
        <name>ValidateDutyCycleRange</name>
        <qualifiedname>EspPwm::ValidateDutyCycleRange</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>raw_duty</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Enhanced duty cycle validation with overflow protection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>raw_duty</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw duty cycle value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Resolution in bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if duty cycle is valid and safe </para>
</simplesect>
<simplesect kind="note"><para>Implements ESP-IDF overflow protection: duty &lt; 2^resolution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="996" column="9" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2265" bodyend="2274"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a0e5f74505d1c596936c02d9f2c465158" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsClockSourceCompatible</definition>
        <argsstring>(hf_pwm_clock_source_t timer_clock, hf_pwm_clock_source_t requested_clock) const noexcept</argsstring>
        <name>IsClockSourceCompatible</name>
        <qualifiedname>EspPwm::IsClockSourceCompatible</qualifiedname>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>timer_clock</declname>
        </param>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>requested_clock</declname>
        </param>
        <briefdescription>
<para>Check if two clock sources are compatible for timer sharing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer_clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Current timer&apos;s clock source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>requested_clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested clock source </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if compatible (can share timer), false otherwise </para>
</simplesect>
<simplesect kind="note"><para>AUTO clock is compatible with any specific clock </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1006" column="9" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2276" bodyend="2286"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ad352f2f3a014631f98d996814c806163" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>hf_u8_t EspPwm::FindBestAlternativeResolutionDynamic</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t preferred_resolution, hf_pwm_clock_source_t clock_source=hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB) const noexcept</argsstring>
        <name>FindBestAlternativeResolutionDynamic</name>
        <qualifiedname>EspPwm::FindBestAlternativeResolutionDynamic</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>preferred_resolution</declname>
        </param>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>clock_source</declname>
          <defval><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82a2fb4f97b7c1b78586a5f9f8365272822" kindref="member">hf_pwm_clock_source_t::HF_PWM_CLK_SRC_APB</ref></defval>
        </param>
        <briefdescription>
<para>Find best alternative resolution using dynamic calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Target frequency in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preferred_resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Preferred resolution in bits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clock_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source for calculation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Best alternative resolution, or preferred if no better option </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1016" column="12" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2288" bodyend="2331"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6da40e9d83cc49cbf26f5ac4e4c3f665" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::NotifyTimerReconfiguration</definition>
        <argsstring>(hf_u8_t timer_id, hf_u32_t new_frequency, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>NotifyTimerReconfiguration</name>
        <qualifiedname>EspPwm::NotifyTimerReconfiguration</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>new_frequency</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Notify channels that their timer has been reconfigured. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer that was reconfigured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>New frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>New resolution in bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1027" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2473" bodyend="2495"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a981f330beac42c81c414ccc57606a894" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string EspPwm::GetTimerUsageInfo</definition>
        <argsstring>(hf_u8_t timer_id) const noexcept</argsstring>
        <name>GetTimerUsageInfo</name>
        <qualifiedname>EspPwm::GetTimerUsageInfo</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <briefdescription>
<para>Get timer usage information for debugging. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer to get info for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String with timer usage information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1035" column="15" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2497" bodyend="2526"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4836d32ff7c987bf03f403fa3f7ee660" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>hf_u8_t EspPwm::PerformTimerHealthCheck</definition>
        <argsstring>() noexcept</argsstring>
        <name>PerformTimerHealthCheck</name>
        <qualifiedname>EspPwm::PerformTimerHealthCheck</qualifiedname>
        <briefdescription>
<para>Perform comprehensive timer health check and cleanup. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of timers cleaned up </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1041" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2727" bodyend="2771"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a0b455ad1230974f857a6cf89cc1598fb" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" kindref="member">hf_i8_t</ref></type>
        <definition>hf_i8_t EspPwm::AttemptSafeEviction</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>AttemptSafeEviction</name>
        <qualifiedname>EspPwm::AttemptSafeEviction</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Attempt safe timer eviction based on user policy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Required frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Required resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer ID if eviction successful, -1 if denied/failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1049" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2532" bodyend="2557"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a351d6b815860b91b7ed60d59cf00cb39" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" kindref="member">hf_i8_t</ref></type>
        <definition>hf_i8_t EspPwm::AttemptEvictionWithConsent</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>AttemptEvictionWithConsent</name>
        <qualifiedname>EspPwm::AttemptEvictionWithConsent</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Attempt eviction with user consent callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Required frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Required resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer ID if approved and successful, -1 if denied/failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1057" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2559" bodyend="2635"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6278208d17f1ae7c3dcc2c94abdc6dbd" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" kindref="member">hf_i8_t</ref></type>
        <definition>hf_i8_t EspPwm::AttemptEvictionNonCritical</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>AttemptEvictionNonCritical</name>
        <qualifiedname>EspPwm::AttemptEvictionNonCritical</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Attempt eviction of non-critical channels only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Required frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Required resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer ID if successful, -1 if no non-critical timers available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1065" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2637" bodyend="2691"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a3a3e5e9d0cf58e8c9aa9e912a5e18bb2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" kindref="member">hf_i8_t</ref></type>
        <definition>hf_i8_t EspPwm::AttemptForceEviction</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>AttemptForceEviction</name>
        <qualifiedname>EspPwm::AttemptForceEviction</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Attempt aggressive eviction (original behavior) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Required frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Required resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer ID if successful, -1 if failed </para>
</simplesect>
<simplesect kind="note"><para>Only used with FORCE_EVICTION policy - may disrupt critical channels! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="1074" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2693" bodyend="2725"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classEspPwm_1a48b2831d8333eeedead0a65ca3d5af08" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>void IRAM_ATTR EspPwm::InterruptHandler</definition>
        <argsstring>(hf_channel_id_t channel_id, void *user_data) noexcept</argsstring>
        <name>InterruptHandler</name>
        <qualifiedname>EspPwm::InterruptHandler</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Platform-specific interrupt handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel that generated interrupt </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to interrupt handler (<ref refid="classEspPwm" kindref="compound">EspPwm</ref> instance) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="853" column="25" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2054" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aa2f60f5e67b3db043af66624f022e7b2" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool IRAM_ATTR</type>
        <definition>bool IRAM_ATTR EspPwm::LedcFadeEndCallback</definition>
        <argsstring>(const ledc_cb_param_t *param, void *user_arg) noexcept</argsstring>
        <name>LedcFadeEndCallback</name>
        <qualifiedname>EspPwm::LedcFadeEndCallback</qualifiedname>
        <param>
          <type>const ledc_cb_param_t *</type>
          <declname>param</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_arg</declname>
        </param>
        <briefdescription>
<para>Static ESP-IDF LEDC fade callback handler (C-compatible) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF callback parameter structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User argument (<ref refid="classEspPwm" kindref="compound">EspPwm</ref> instance pointer) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if high priority task was woken up, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="881" column="25" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="2150" bodyend="2179"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ESP32 PWM implementation using LEDC peripheral with comprehensive ESP32 variant support. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides PWM generation using the ESP32 family&apos;s built-in LEDC (LED Controller) peripheral which offers high-resolution PWM with hardware fade support. The implementation automatically adapts to different ESP32 variants and their specific LEDC capabilities.</para>
<sect2 id="classEspPwm_1autotoc_md0">
<title>ESP32 Variant LEDC Capabilities:</title><sect3 id="classEspPwm_1autotoc_md1">
<title>ESP32 (Classic):</title><para><itemizedlist>
<listitem><para><bold>Channels:</bold> 16 channels (8 high-speed + 8 low-speed)</para>
</listitem><listitem><para><bold>Timers:</bold> 8 timers (4 high-speed + 4 low-speed)</para>
</listitem><listitem><para><bold>Clock Sources:</bold> APB_CLK (80MHz), REF_TICK (1MHz), RTC8M_CLK (LS only)</para>
</listitem><listitem><para><bold>Resolution:</bold> Up to 20-bit at low frequencies, 14-bit at high frequencies</para>
</listitem><listitem><para><bold>Special Features:</bold> Separate high-speed and low-speed modes</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="classEspPwm_1autotoc_md2">
<title>ESP32-S2/S3:</title><para><itemizedlist>
<listitem><para><bold>Channels:</bold> 8 channels (unified mode)</para>
</listitem><listitem><para><bold>Timers:</bold> 4 timers (unified)</para>
</listitem><listitem><para><bold>Clock Sources:</bold> APB_CLK (80MHz), REF_TICK (1MHz), XTAL_CLK (LS only)</para>
</listitem><listitem><para><bold>Resolution:</bold> Up to 14-bit resolution</para>
</listitem><listitem><para><bold>Special Features:</bold> Unified speed mode, improved power efficiency</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="classEspPwm_1autotoc_md3">
<title>ESP32-C3/C6/H2:</title><para><itemizedlist>
<listitem><para><bold>Channels:</bold> 6 channels (ESP32-C6), 6 channels (ESP32-C3), 4 channels (ESP32-H2)</para>
</listitem><listitem><para><bold>Timers:</bold> 4 timers (C3/C6), 2 timers (H2)</para>
</listitem><listitem><para><bold>Clock Sources:</bold> APB_CLK (80MHz), REF_TICK (1MHz), XTAL_CLK</para>
</listitem><listitem><para><bold>Resolution:</bold> Up to 14-bit resolution</para>
</listitem><listitem><para><bold>Special Features:</bold> Compact design, optimized for IoT applications</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
<sect2 id="classEspPwm_1autotoc_md4">
<title>Clock Source Constraints:</title><para><bold>CRITICAL:</bold> Different ESP32 variants have different clock source limitations:<itemizedlist>
<listitem><para><bold>ESP32 Classic:</bold> Each timer can use different clock sources independently</para>
</listitem><listitem><para><bold>ESP32-S2/S3/C3/C6/H2:</bold> All timers typically share the same clock source</para>
</listitem><listitem><para><bold>Frequency Limitations:</bold> Clock source determines maximum achievable frequency:<itemizedlist>
<listitem><para>APB_CLK (80MHz): Max ~78kHz at 10-bit resolution</para>
</listitem><listitem><para>XTAL_CLK (40MHz): Max ~39kHz at 10-bit resolution</para>
</listitem><listitem><para>REF_TICK (1MHz): Max ~976Hz at 10-bit resolution</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="classEspPwm_1autotoc_md5">
<title>Timer Resource Management:</title><para>The LEDC peripheral uses a timer-channel architecture where:<itemizedlist>
<listitem><para>Multiple channels can share the same timer (same frequency/resolution)</para>
</listitem><listitem><para>Each timer supports up to 8 channels (hardware limitation)</para>
</listitem><listitem><para>Timer allocation is automatic but can be controlled manually</para>
</listitem><listitem><para>Smart eviction policies protect critical channels</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="classEspPwm_1autotoc_md6">
<title>Key Design Features:</title><para><itemizedlist>
<listitem><para><bold>Variant-Aware:</bold> Automatically detects and adapts to ESP32 variant capabilities</para>
</listitem><listitem><para><bold>Thread-Safe:</bold> Full <ref refid="classRtosMutex" kindref="compound">RtosMutex</ref> protection for concurrent access</para>
</listitem><listitem><para><bold>Smart Timer Management:</bold> Automatic allocation with conflict resolution</para>
</listitem><listitem><para><bold>Hardware Fade Support:</bold> Native LEDC fade functionality</para>
</listitem><listitem><para><bold>Error Recovery:</bold> Comprehensive fault detection and recovery mechanisms</para>
</listitem><listitem><para><bold>Motor Control Ready:</bold> Complementary outputs, deadtime, and synchronization</para>
</listitem><listitem><para><bold>Resource Protection:</bold> Eviction policies prevent accidental channel disruption</para>
</listitem><listitem><para><bold>Performance Optimized:</bold> Minimal overhead, efficient memory usage </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BasePwm</label>
        <link refid="classBasePwm"/>
      </node>
      <node id="1">
        <label>EspPwm</label>
        <link refid="classEspPwm"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BasePwm</label>
        <link refid="classBasePwm"/>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>EspPwm</label>
        <link refid="classEspPwm"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>unit_config_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>eviction_callback_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="4">
        <label>hf_pwm_diagnostics_t</label>
        <link refid="structhf__pwm__diagnostics__t"/>
      </node>
      <node id="7">
        <label>hf_pwm_eviction_request_t</label>
        <link refid="structhf__pwm__eviction__request__t"/>
      </node>
      <node id="3">
        <label>hf_pwm_statistics_t</label>
        <link refid="structhf__pwm__statistics__t"/>
      </node>
      <node id="6">
        <label>hf_pwm_unit_config_t</label>
        <link refid="structhf__pwm__unit__config__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspPwm.h" line="95" column="1" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="95" bodyend="1104"/>
    <listofallmembers>
      <member refid="classEspPwm_1a6278208d17f1ae7c3dcc2c94abdc6dbd" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>AttemptEvictionNonCritical</name></member>
      <member refid="classEspPwm_1a351d6b815860b91b7ed60d59cf00cb39" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>AttemptEvictionWithConsent</name></member>
      <member refid="classEspPwm_1a3a3e5e9d0cf58e8c9aa9e912a5e18bb2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>AttemptForceEviction</name></member>
      <member refid="classEspPwm_1a0b455ad1230974f857a6cf89cc1598fb" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>AttemptSafeEviction</name></member>
      <member refid="classEspPwm_1a1f3b42702956b65454339f9a61458806" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>auto_fallback_enabled_</name></member>
      <member refid="classEspPwm_1adb2698a4d9441132c4f9ba23a4dc4678" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>base_clock_hz_</name></member>
      <member refid="classBasePwm_1acd8c699abcc77062da2e26319dafcb0b" prot="protected" virt="non-virtual"><scope>EspPwm</scope><name>BasePwm</name></member>
      <member refid="classBasePwm_1aaf342e2451aa841522e07bc84c86a0a7" prot="protected" virt="non-virtual"><scope>EspPwm</scope><name>BasePwm</name></member>
      <member refid="classBasePwm_1a98809c8d18cca38549c10e1a8616021c" prot="protected" virt="non-virtual"><scope>EspPwm</scope><name>BasePwm</name></member>
      <member refid="classEspPwm_1a6a19207d3326cb8f660670a6fa46035c" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>CalculateClockDivider</name></member>
      <member refid="classBasePwm_1a1cbbc012f5c178e574e2fbb3bee3baf3" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>CalculateFrequencyAccuracy</name></member>
      <member refid="classEspPwm_1a1fa0af5ac18437a6235fcbdfca39b222" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>CalculateMaxFrequency</name></member>
      <member refid="classEspPwm_1af5a2e6d7bd1a18b68089d5f3bdea2e34" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>CalculateMaxResolution</name></member>
      <member refid="classEspPwm_1ab3341c72b5f1d413999dfc44fd8d80d2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>channels_</name></member>
      <member refid="classBasePwm_1a675192d0ee597e7603a8d6831a3c227c" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>ClampDutyCycle</name></member>
      <member refid="classEspPwm_1ac4da347398a044e97ecfd586a65d4470" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>clock_source_</name></member>
      <member refid="classEspPwm_1afdfcaf9396528e32f648a403fd4fb075" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>complementary_pairs_</name></member>
      <member refid="classEspPwm_1a4dc265e040617403e718d4d28ff66e56" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>ConfigureChannel</name></member>
      <member refid="classEspPwm_1a023bc718f864eb1e2b887c4de5013fa9" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ConfigurePlatformChannel</name></member>
      <member refid="classEspPwm_1a362d7335d05a027efd2a9429bf4d8e40" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ConfigurePlatformTimer</name></member>
      <member refid="classEspPwm_1a364fe8d01eaea5c9664f43c8c2bd2dcb" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>current_mode_</name></member>
      <member refid="classEspPwm_1a416e064052b50ac0175651a5e191adc4" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>DeconfigureChannel</name></member>
      <member refid="classEspPwm_1a28c857a39efec61ad79770770fca878c" prot="public" virt="virtual"><scope>EspPwm</scope><name>Deinitialize</name></member>
      <member refid="classEspPwm_1a825cbef48b32048590def430ae108584" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>diagnostics_</name></member>
      <member refid="classEspPwm_1aeda4cc0ceb6d711d81989a66d2fe3596" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>DisableAutoFallback</name></member>
      <member refid="classEspPwm_1a8ff1addad40e1a81afa83a975b136e89" prot="public" virt="virtual"><scope>EspPwm</scope><name>DisableChannel</name></member>
      <member refid="classBasePwm_1a4cba17ff79ce18faaf8b402d2b212060" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>DutyCycleToRaw</name></member>
      <member refid="classEspPwm_1a23cb19b3d0030bf788c976f05c4bd6e9" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EnableAutoFallback</name></member>
      <member refid="classEspPwm_1a3bd515c8685db84d5ff92a475063d663" prot="public" virt="virtual"><scope>EspPwm</scope><name>EnableChannel</name></member>
      <member refid="classEspPwm_1a9192ec3aa26d9acac2c0e6ec30c6bed1" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>EnableFade</name></member>
      <member refid="classBasePwm_1a8d407e46dff5f6c1f9ae2b7d68ea674c" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBasePwm_1aa084e73274f2f1d1d67cff793eda1956" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EnsureInitialized</name></member>
      <member refid="classEspPwm_1ae8e7d6e7f4ca605d4d4a361dc7806fd0" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EspPwm</name></member>
      <member refid="classEspPwm_1adda6756a1158a4cb37194c0690ac412f" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EspPwm</name></member>
      <member refid="classEspPwm_1a0523ebf8e643c95ad9b3ced6ff077fc7" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EspPwm</name></member>
      <member refid="classEspPwm_1ac60137ac8d1bee195299fd6b2fa88431" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>eviction_callback_</name></member>
      <member refid="classEspPwm_1a2ae786082f476290ff5907881989d986" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>eviction_callback_user_data_</name></member>
      <member refid="classEspPwm_1a1f1584998723762eec8692090592650f" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>eviction_policy_</name></member>
      <member refid="classEspPwm_1ab200d2d51794d3c3f6c18945132bc7e4" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>fade_functionality_installed_</name></member>
      <member refid="classEspPwm_1ad352f2f3a014631f98d996814c806163" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>FindBestAlternativeResolutionDynamic</name></member>
      <member refid="classEspPwm_1a8f782916b4f7d5dabe48e2c913ea98e9" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>FindOrAllocateTimer</name></member>
      <member refid="classEspPwm_1a38358269d437372bb72805e76fc151ed" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>ForceTimerAssignment</name></member>
      <member refid="classEspPwm_1af92695b9e07458d6280489d1ce3d8bdd" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetCapabilities</name></member>
      <member refid="classEspPwm_1a572bf6e4c5628fb5996353922417c4bc" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetChannelPriority</name></member>
      <member refid="classEspPwm_1a7cf9c46011b383820a588a9f153dfc52" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetChannelStatus</name></member>
      <member refid="classEspPwm_1a81bc4616d9447ad43ec6d6c732049b59" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetDiagnostics</name></member>
      <member refid="classEspPwm_1aeb3eda73cca25d298a3c7e3cbf133f03" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetDutyCycle</name></member>
      <member refid="classEspPwm_1a6bf8969af578c46e95a7b16552c3442a" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetEvictionPolicy</name></member>
      <member refid="classEspPwm_1a4687559ad8744ece1ef578796b21eb02" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetFrequency</name></member>
      <member refid="classEspPwm_1a1e5a6eaafc83ba4ac56718fcded72d81" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetLastError</name></member>
      <member refid="classEspPwm_1a620e13937a4213f8c44219272302a1a7" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetMode</name></member>
      <member refid="classEspPwm_1a038775414699ae7a63277c2050ff7545" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetResolution</name></member>
      <member refid="classEspPwm_1ab9124b114f15aa018720cff258fe4bda" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>GetSourceClockFrequency</name></member>
      <member refid="classEspPwm_1a9ff4ddc5a06060a4b7194154a7d28617" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetStatistics</name></member>
      <member refid="classEspPwm_1a4437f86f7dfc052c9abd0cd633c10e71" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetTimerAssignment</name></member>
      <member refid="classEspPwm_1a981f330beac42c81c414ccc57606a894" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>GetTimerUsageInfo</name></member>
      <member refid="classEspPwm_1af0c248eb7f9a03bf23e992c4f75b46fc" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>HandleFadeComplete</name></member>
      <member refid="classEspPwm_1aedb8649c68e856258d6278bf399aab05" prot="public" virt="virtual"><scope>EspPwm</scope><name>Initialize</name></member>
      <member refid="classEspPwm_1ab8ee8dcae85c2b59b80dbc996522a7b2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InitializeChannels</name></member>
      <member refid="classEspPwm_1a62f5455c00a2bf6bee32c4edeb5b90d0" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>initialized_</name></member>
      <member refid="classEspPwm_1abfd65e0509706ecefd541b8546596469" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InitializeFadeFunctionality</name></member>
      <member refid="classEspPwm_1ae9e920ee5ebeced7fbe9dd8a80622605" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InitializeTimers</name></member>
      <member refid="classEspPwm_1a48b2831d8333eeedead0a65ca3d5af08" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InterruptHandler</name></member>
      <member refid="classEspPwm_1adb0842868ea3508b65542b2b3c46b155" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsAutoFallbackEnabled</name></member>
      <member refid="classEspPwm_1a85c715fe2272e8c1dc93e47f44ab56ac" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsChannelCritical</name></member>
      <member refid="classEspPwm_1a07c737787080435a486d47ad3c6803e9" prot="public" virt="virtual"><scope>EspPwm</scope><name>IsChannelEnabled</name></member>
      <member refid="classEspPwm_1a0e5f74505d1c596936c02d9f2c465158" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>IsClockSourceCompatible</name></member>
      <member refid="classEspPwm_1a7006101d1efdbfa70c2b65604ded7b85" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsFadeActive</name></member>
      <member refid="classBasePwm_1ab75191deb5eec96c9d1f99c7c981467d" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsInitialized</name></member>
      <member refid="classEspPwm_1a4fcc3a06cf3ba05f0f0524257d9ebf0d" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>IsValidChannelId</name></member>
      <member refid="classBasePwm_1a352f6ddcf05ff0e0ed5c606098b24987" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsValidDutyCycle</name></member>
      <member refid="classBasePwm_1afab866dbce084437c35b3189f4e2952e" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsValidFrequency</name></member>
      <member refid="classBasePwm_1a4aae2c9b79963e8648c9cf9e6e22bc11" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsValidRawDuty</name></member>
      <member refid="classEspPwm_1ad1b06777e74eedca37e5023ec23fc4ce" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>last_global_error_</name></member>
      <member refid="classEspPwm_1aa2f60f5e67b3db043af66624f022e7b2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>LedcFadeEndCallback</name></member>
      <member refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_CHANNELS</name></member>
      <member refid="classEspPwm_1a9028b609b50b17802ce3b8da3ec39899" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_FREQUENCY</name></member>
      <member refid="classEspPwm_1a5ebf53a209f25236bafcb52fe0564d2a" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_RESOLUTION</name></member>
      <member refid="classEspPwm_1a625133f35c2449a53e048f63df138a89" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_TIMERS</name></member>
      <member refid="classEspPwm_1af03e7350d2c885bbca5358ee3a183d10" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MIN_FREQUENCY</name></member>
      <member refid="classEspPwm_1ae4c8b8e2abef78e240fc60451b6d793e" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>mutex_</name></member>
      <member refid="classEspPwm_1a6da40e9d83cc49cbf26f5ac4e4c3f665" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>NotifyTimerReconfiguration</name></member>
      <member refid="classEspPwm_1ae46e009618632e0db573912f71c94f9c" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classEspPwm_1aecba3137a0ead8abc259ab199648148b" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classBasePwm_1afa73dc6b8bc3028f3848e0f470dec48d" prot="protected" virt="non-virtual" ambiguityscope="BasePwm::"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classBasePwm_1a61a64fe3584550862c40531d576211b3" prot="protected" virt="non-virtual" ambiguityscope="BasePwm::"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classEspPwm_1a4836d32ff7c987bf03f403fa3f7ee660" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>PerformTimerHealthCheck</name></member>
      <member refid="classBasePwm_1a4a6d82b9da888f91bd66e91b24121add" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>RawToDutyCycle</name></member>
      <member refid="classEspPwm_1a3189d43f89c413fbf2b047339b9d8eed" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>RegisterLedcFadeCallback</name></member>
      <member refid="classEspPwm_1aecd0e9059cb48af8c52140ff2ac7cf8c" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ReleaseTimerIfUnused</name></member>
      <member refid="classBasePwm_1abef55c8bbd0a0fe57f2b21f286fc91dd" prot="public" virt="virtual"><scope>EspPwm</scope><name>ResetDiagnostics</name></member>
      <member refid="classBasePwm_1afb7176a7fbb46fa45a5a2521060ef9c7" prot="public" virt="virtual"><scope>EspPwm</scope><name>ResetStatistics</name></member>
      <member refid="classEspPwm_1a7b222f44fa892e931bda82929f123d54" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetChannelCritical</name></member>
      <member refid="classEspPwm_1a6b4f2fafd78318e313ced753414f11d2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>SetChannelError</name></member>
      <member refid="classEspPwm_1a543f85cebac06d91b5ac4fe7d6f325d6" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetChannelFadeCallback</name></member>
      <member refid="classEspPwm_1a77340b2ecd211629ea79e7d9f151e063" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetChannelPriority</name></member>
      <member refid="classEspPwm_1a6c4cc0b3c19e7258a063b1900f9d291a" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetComplementaryOutput</name></member>
      <member refid="classEspPwm_1ae4170c3b4661c0d4b9646eb3d775c88c" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetDutyCycle</name></member>
      <member refid="classEspPwm_1a6bc8906d106762d5c9b1bcfd68ff0636" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetDutyCycleRaw</name></member>
      <member refid="classEspPwm_1a90f27ca6f4deb563c66b584604bee706" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetEvictionCallback</name></member>
      <member refid="classEspPwm_1a57006756d21e8f6b6c6c65c919b991e0" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetEvictionPolicy</name></member>
      <member refid="classEspPwm_1a185108e6adbaaa23bcef4fbd8bda1b91" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetFrequency</name></member>
      <member refid="classEspPwm_1aa98797ac6975b2f6ec3c297113bbf99d" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetFrequencyAndResolution</name></member>
      <member refid="classEspPwm_1abe00eaeddf0a329994bdebf61d3439f9" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetFrequencyWithAutoFallback</name></member>
      <member refid="classEspPwm_1aa1e2001e94083e72e12e0bf1a6f34d77" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetFrequencyWithResolution</name></member>
      <member refid="classEspPwm_1a9fb67c853d1d7d042a047fbc22ae67c5" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetHardwareFade</name></member>
      <member refid="classEspPwm_1a1d72b937ecff8d06181a2a0e7c7cb314" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetIdleLevel</name></member>
      <member refid="classEspPwm_1a848d38996b427bf51215bf0c0147a328" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetMode</name></member>
      <member refid="classEspPwm_1a6096fdc1d06345204c8062d2f86bd0c5" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetPhaseShift</name></member>
      <member refid="classEspPwm_1ae2795158cb647453ec43de6f9848417b" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetResolution</name></member>
      <member refid="classEspPwm_1a130153d9f4bdaee4219736cb248d78f6" prot="public" virt="virtual"><scope>EspPwm</scope><name>StartAll</name></member>
      <member refid="classEspPwm_1aefe4a2dfe1bccd062a299b1febb8aef8" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>statistics_</name></member>
      <member refid="classEspPwm_1a8be25ecab27ff61499a66535f303df2e" prot="public" virt="virtual"><scope>EspPwm</scope><name>StopAll</name></member>
      <member refid="classEspPwm_1ab3d06a21a6eda6c081f660895d81bbb1" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>StopHardwareFade</name></member>
      <member refid="classEspPwm_1ad569f2cfbea460323ab5847717019d75" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>timers_</name></member>
      <member refid="classEspPwm_1ac2592dd4dbe1e99213a7d1d4c69e67fd" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>unit_config_</name></member>
      <member refid="classEspPwm_1a51e0799a5758dd6159e417fcf00c5d31" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>UnregisterLedcFadeCallback</name></member>
      <member refid="classEspPwm_1a5681d5ceb230b6dc0a459f3ef9630b8b" prot="public" virt="virtual"><scope>EspPwm</scope><name>UpdateAll</name></member>
      <member refid="classEspPwm_1aeb62a6be326c25671cc8780618902cd4" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>UpdatePlatformDuty</name></member>
      <member refid="classEspPwm_1aa3662ff3251aebe8026b16bef3773420" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ValidateDutyCycleRange</name></member>
      <member refid="classEspPwm_1abd81092951838b5058abd3db6ad7a0af" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ValidateFrequencyResolutionComplete</name></member>
      <member refid="classBasePwm_1a7481b15d121d631a59d1605780085d0e" prot="public" virt="virtual"><scope>EspPwm</scope><name>~BasePwm</name></member>
      <member refid="classEspPwm_1aaac5ce3f95ae8c5fb96312ad9a779ce6" prot="public" virt="virtual"><scope>EspPwm</scope><name>~EspPwm</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
