<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="structTestResults" kind="struct" language="C++" prot="public">
    <compoundname>TestResults</compoundname>
    <includes refid="TestFramework_8h" local="no">TestFramework.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structTestResults_1afe20b168a13950ffca7296c0c56d4359" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int TestResults::total_tests</definition>
        <argsstring></argsstring>
        <name>total_tests</name>
        <qualifiedname>TestResults::total_tests</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TestFramework.h" line="167" column="7" bodyfile="examples/esp32/main/TestFramework.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structTestResults_1a55b5f813fe7b5863b46e03f2c7f761ea" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int TestResults::passed_tests</definition>
        <argsstring></argsstring>
        <name>passed_tests</name>
        <qualifiedname>TestResults::passed_tests</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TestFramework.h" line="168" column="7" bodyfile="examples/esp32/main/TestFramework.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structTestResults_1a0acef46f38f27f0fbb8fa822bb218b3a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int TestResults::failed_tests</definition>
        <argsstring></argsstring>
        <name>failed_tests</name>
        <qualifiedname>TestResults::failed_tests</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TestFramework.h" line="169" column="7" bodyfile="examples/esp32/main/TestFramework.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structTestResults_1a7eddc258a4288ac5f0a36a1008c9d014" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t TestResults::total_execution_time_us</definition>
        <argsstring></argsstring>
        <name>total_execution_time_us</name>
        <qualifiedname>TestResults::total_execution_time_us</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TestFramework.h" line="170" column="12" bodyfile="examples/esp32/main/TestFramework.h" bodystart="170" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structTestResults_1a257eba3a9005a5c19c68ae27774948f7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void TestResults::add_result</definition>
        <argsstring>(bool passed, uint64_t execution_time) noexcept</argsstring>
        <name>add_result</name>
        <qualifiedname>TestResults::add_result</qualifiedname>
        <param>
          <type>bool</type>
          <declname>passed</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>execution_time</declname>
        </param>
        <briefdescription>
<para>Add test result and update statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>passed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the test passed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>execution_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Test execution time in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TestFramework.h" line="177" column="8" bodyfile="examples/esp32/main/TestFramework.h" bodystart="177" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="structTestResults_1abd312f39dea9e43056ca161f315c7569" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double TestResults::get_success_percentage</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_success_percentage</name>
        <qualifiedname>TestResults::get_success_percentage</qualifiedname>
        <briefdescription>
<para>Calculate success percentage. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Success percentage (0.0 to 100.0) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TestFramework.h" line="191" column="10" bodyfile="examples/esp32/main/TestFramework.h" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structTestResults_1a7466f28f6ee19443a8c8510588c7844e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double TestResults::get_total_time_ms</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_total_time_ms</name>
        <qualifiedname>TestResults::get_total_time_ms</qualifiedname>
        <briefdescription>
<para>Get total execution time in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Total execution time in milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TestFramework.h" line="199" column="10" bodyfile="examples/esp32/main/TestFramework.h" bodystart="199" bodyend="201"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Test execution tracking and results accumulation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="examples/esp32/main/TestFramework.h" line="166" column="1" bodyfile="examples/esp32/main/TestFramework.h" bodystart="166" bodyend="202"/>
    <listofallmembers>
      <member refid="structTestResults_1a257eba3a9005a5c19c68ae27774948f7" prot="public" virt="non-virtual"><scope>TestResults</scope><name>add_result</name></member>
      <member refid="structTestResults_1a0acef46f38f27f0fbb8fa822bb218b3a" prot="public" virt="non-virtual"><scope>TestResults</scope><name>failed_tests</name></member>
      <member refid="structTestResults_1abd312f39dea9e43056ca161f315c7569" prot="public" virt="non-virtual"><scope>TestResults</scope><name>get_success_percentage</name></member>
      <member refid="structTestResults_1a7466f28f6ee19443a8c8510588c7844e" prot="public" virt="non-virtual"><scope>TestResults</scope><name>get_total_time_ms</name></member>
      <member refid="structTestResults_1a55b5f813fe7b5863b46e03f2c7f761ea" prot="public" virt="non-virtual"><scope>TestResults</scope><name>passed_tests</name></member>
      <member refid="structTestResults_1a7eddc258a4288ac5f0a36a1008c9d014" prot="public" virt="non-virtual"><scope>TestResults</scope><name>total_execution_time_us</name></member>
      <member refid="structTestResults_1afe20b168a13950ffca7296c0c56d4359" prot="public" virt="non-virtual"><scope>TestResults</scope><name>total_tests</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
