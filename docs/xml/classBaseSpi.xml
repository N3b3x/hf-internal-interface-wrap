<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classBaseSpi" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BaseSpi</compoundname>
    <derivedcompoundref refid="classEspSpiDevice" prot="public" virt="non-virtual">EspSpiDevice</derivedcompoundref>
    <includes refid="BaseSpi_8h" local="no">BaseSpi.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBaseSpi_1aa74a4ab673ba37d72c3b7f98e963b9dd" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BaseSpi::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>BaseSpi::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="422" column="8" bodyfile="inc/base/BaseSpi.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBaseSpi_1a801d2346551161f1d2e1b755501cc1e1" prot="protected" static="no" mutable="no">
        <type><ref refid="structhf__spi__statistics__t" kindref="compound">hf_spi_statistics_t</ref></type>
        <definition>hf_spi_statistics_t BaseSpi::statistics_</definition>
        <argsstring></argsstring>
        <name>statistics_</name>
        <qualifiedname>BaseSpi::statistics_</qualifiedname>
        <briefdescription>
<para>SPI operation statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="423" column="23" bodyfile="inc/base/BaseSpi.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBaseSpi_1aa215f89886b0839c13e94f52e9725444" prot="protected" static="no" mutable="no">
        <type><ref refid="structhf__spi__diagnostics__t" kindref="compound">hf_spi_diagnostics_t</ref></type>
        <definition>hf_spi_diagnostics_t BaseSpi::diagnostics_</definition>
        <argsstring></argsstring>
        <name>diagnostics_</name>
        <qualifiedname>BaseSpi::diagnostics_</qualifiedname>
        <briefdescription>
<para>SPI diagnostic information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="424" column="24" bodyfile="inc/base/BaseSpi.h" bodystart="424" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classBaseSpi_1a00d984807a767a1b3de27d3ce0a61fd8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>virtual BaseSpi::~BaseSpi</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~BaseSpi</name>
        <qualifiedname>BaseSpi::~BaseSpi</qualifiedname>
        <briefdescription>
<para>Virtual destructor ensures proper cleanup in derived classes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="181" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1abf33121948481f9001f6d18042da61bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BaseSpi::BaseSpi</definition>
        <argsstring>(const BaseSpi &amp;)=delete</argsstring>
        <name>BaseSpi</name>
        <qualifiedname>BaseSpi::BaseSpi</qualifiedname>
        <param>
          <type>const <ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="184" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a3c4096c2e9300928a41671fd755d5b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> &amp;</type>
        <definition>BaseSpi &amp; BaseSpi::operator=</definition>
        <argsstring>(const BaseSpi &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>BaseSpi::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="185" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a3e7a45c66f5c951d6f023ad361e00dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BaseSpi::BaseSpi</definition>
        <argsstring>(BaseSpi &amp;&amp;)=delete</argsstring>
        <name>BaseSpi</name>
        <qualifiedname>BaseSpi::BaseSpi</qualifiedname>
        <param>
          <type><ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="186" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a98b2462a1b60f70c5fd8eaf56b28f2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> &amp;</type>
        <definition>BaseSpi &amp; BaseSpi::operator=</definition>
        <argsstring>(BaseSpi &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>BaseSpi::operator=</qualifiedname>
        <param>
          <type><ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="187" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a6e74ff977b2bfd381f25f2880387e5ca" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BaseSpi::EnsureInitialized</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnsureInitialized</name>
        <qualifiedname>BaseSpi::EnsureInitialized</qualifiedname>
        <briefdescription>
<para>Ensures that the SPI bus is initialized (lazy initialization). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the SPI bus is initialized, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="193" column="8" bodyfile="inc/base/BaseSpi.h" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1acd991c97d9e67d35af31a0594dd5357a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BaseSpi::EnsureDeinitialized</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnsureDeinitialized</name>
        <qualifiedname>BaseSpi::EnsureDeinitialized</qualifiedname>
        <briefdescription>
<para>Ensures that the SPI bus is deinitialized (lazy deinitialization). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the SPI bus is deinitialized, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="204" column="8" bodyfile="inc/base/BaseSpi.h" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a5cf6e0c4a2edba09319834e334ff2a8b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BaseSpi::IsInitialized</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsInitialized</name>
        <qualifiedname>BaseSpi::IsInitialized</qualifiedname>
        <briefdescription>
<para>Checks if the bus is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="215" column="9" bodyfile="inc/base/BaseSpi.h" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a0ee4d13f589e319c6fbb3d5bb6492784" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::Initialize</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>Initialize</name>
        <qualifiedname>BaseSpi::Initialize</qualifiedname>
        <reimplementedby refid="classEspSpiDevice_1ae61fd5adb61b7e68e080aad9173a6708">Initialize</reimplementedby>
        <briefdescription>
<para>Initialize the SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>Must be implemented by concrete classes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="228" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a20608abd3e6dc4335dc14bc11d3016e6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::Deinitialize</definition>
        <argsstring>() noexcept=0</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>BaseSpi::Deinitialize</qualifiedname>
        <reimplementedby refid="classEspSpiDevice_1af45ba6122e82902c728d8c569362b87b">Deinitialize</reimplementedby>
        <briefdescription>
<para>Deinitialize the SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>Must be implemented by concrete classes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="235" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a7951cfcc329ab963764013ebe47288c0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>virtual hf_spi_err_t BaseSpi::Transfer</definition>
        <argsstring>(const hf_u8_t *tx_data, hf_u8_t *rx_data, hf_u16_t length, hf_u32_t timeout_ms=0) noexcept=0</argsstring>
        <name>Transfer</name>
        <qualifiedname>BaseSpi::Transfer</qualifiedname>
        <reimplementedby refid="classEspSpiDevice_1ac7432fd2630032d20f8d2f8388f6e1a5">Transfer</reimplementedby>
        <param>
          <type>const <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>rx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Perform a full-duplex SPI transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit data buffer (can be nullptr for read-only) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive data buffer (can be nullptr for write-only) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to transfer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds (0 = use default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_spi_err_t result code </para>
</simplesect>
<simplesect kind="note"><para>Must be implemented by concrete classes. </para>
</simplesect>
<simplesect kind="note"><para>Chip select is managed automatically by the device implementation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="247" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a6dd381f6a4423927bb59adb4395074ed" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="pure-virtual">
        <type>const void *</type>
        <definition>virtual const void * BaseSpi::GetDeviceConfig</definition>
        <argsstring>() const noexcept=0</argsstring>
        <name>GetDeviceConfig</name>
        <qualifiedname>BaseSpi::GetDeviceConfig</qualifiedname>
        <reimplementedby refid="classEspSpiDevice_1a388f9afb603db8d9ddad17018ce2b547">GetDeviceConfig</reimplementedby>
        <briefdescription>
<para>Get the device configuration for this SPI device. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Device-specific configuration information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="254" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a00e8995f1ccc7a5ab078e7b4c19ffa95" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::Open</definition>
        <argsstring>() noexcept</argsstring>
        <name>Open</name>
        <qualifiedname>BaseSpi::Open</qualifiedname>
        <briefdescription>
<para>Legacy compatibility: Open and initialize the SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if open, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="264" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a88b3ba81405134a3566a01ca170bf8bb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::Close</definition>
        <argsstring>() noexcept</argsstring>
        <name>Close</name>
        <qualifiedname>BaseSpi::Close</qualifiedname>
        <briefdescription>
<para>Legacy compatibility: Close and de-initialize the SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if closed, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="272" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="272" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a949d019c6b5d68d6f3949a63316bfcd0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::Transfer</definition>
        <argsstring>(const hf_u8_t *tx_data, hf_u8_t *rx_data, hf_u16_t length) noexcept</argsstring>
        <name>Transfer</name>
        <qualifiedname>BaseSpi::Transfer</qualifiedname>
        <param>
          <type>const <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>rx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Legacy compatibility: Transfer with boolean return. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to transfer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if transfer succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="287" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a9f84c77a20232f43082b4a493c9baaf2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>virtual hf_spi_err_t BaseSpi::Write</definition>
        <argsstring>(const hf_u8_t *data, hf_u16_t length, hf_u32_t timeout_ms=0) noexcept</argsstring>
        <name>Write</name>
        <qualifiedname>BaseSpi::Write</qualifiedname>
        <param>
          <type>const <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Write data to SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data buffer to transmit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds (0 = use default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_spi_err_t result code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="301" column="24" bodyfile="inc/base/BaseSpi.h" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a64493eb569f32c72a0ee8b1cbf90337d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>virtual hf_spi_err_t BaseSpi::Read</definition>
        <argsstring>(hf_u8_t *data, hf_u16_t length, hf_u32_t timeout_ms=0) noexcept</argsstring>
        <name>Read</name>
        <qualifiedname>BaseSpi::Read</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Read data from SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store received data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds (0 = use default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_spi_err_t result code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="313" column="24" bodyfile="inc/base/BaseSpi.h" bodystart="313" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a5c378f3322713d058a08b8b205ad821e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::Write</definition>
        <argsstring>(const hf_u8_t *data, hf_u16_t length) noexcept</argsstring>
        <name>Write</name>
        <qualifiedname>BaseSpi::Write</qualifiedname>
        <param>
          <type>const <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Legacy compatibility: Write with boolean return. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data buffer to transmit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if write succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="323" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="323" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1af49a8f4a53f964975a4d4645b875e5d1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::Read</definition>
        <argsstring>(hf_u8_t *data, hf_u16_t length) noexcept</argsstring>
        <name>Read</name>
        <qualifiedname>BaseSpi::Read</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Legacy compatibility: Read with boolean return. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store received data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if read succeeded </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="336" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="336" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a31a33d8d816ce7189982455bed742905" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::WriteByte</definition>
        <argsstring>(hf_u8_t data) noexcept</argsstring>
        <name>WriteByte</name>
        <qualifiedname>BaseSpi::WriteByte</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write single byte to SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="348" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1aef966769cc28e0e5f44e627a4a59602b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::ReadByte</definition>
        <argsstring>(hf_u8_t &amp;data) noexcept</argsstring>
        <name>ReadByte</name>
        <qualifiedname>BaseSpi::ReadByte</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read single byte from SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: byte read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="357" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="357" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1ac4b29e0ea6f6dd6d4c514e8d24ca13d2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BaseSpi::TransferByte</definition>
        <argsstring>(hf_u8_t tx_data, hf_u8_t &amp;rx_data) noexcept</argsstring>
        <name>TransferByte</name>
        <qualifiedname>BaseSpi::TransferByte</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> &amp;</type>
          <declname>rx_data</declname>
        </param>
        <briefdescription>
<para>Write single byte and read response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Output: byte read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="367" column="16" bodyfile="inc/base/BaseSpi.h" bodystart="367" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a7f63d12c1a0fad18ede02f8a7f2ab6d6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>virtual hf_spi_err_t BaseSpi::ResetStatistics</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetStatistics</name>
        <qualifiedname>BaseSpi::ResetStatistics</qualifiedname>
        <briefdescription>
<para>Reset SPI operation statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377dfa97ef02822fcfb84b0670dfa0e4f562f4" kindref="member">hf_spi_err_t::SPI_SUCCESS</ref> if successful, error code otherwise </para>
</simplesect>
<simplesect kind="note"><para>Override this method to provide platform-specific statistics reset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="380" column="24" bodyfile="inc/base/BaseSpi.h" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a245c1518757648334ad2d2edd459c2f9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>virtual hf_spi_err_t BaseSpi::ResetDiagnostics</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetDiagnostics</name>
        <qualifiedname>BaseSpi::ResetDiagnostics</qualifiedname>
        <briefdescription>
<para>Reset SPI diagnostic information. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377dfa97ef02822fcfb84b0670dfa0e4f562f4" kindref="member">hf_spi_err_t::SPI_SUCCESS</ref> if successful, error code otherwise </para>
</simplesect>
<simplesect kind="note"><para>Override this method to provide platform-specific diagnostics reset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="390" column="24" bodyfile="inc/base/BaseSpi.h" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1a034862a5015ab8d5bb10ddebfabdd7d6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>virtual hf_spi_err_t BaseSpi::GetStatistics</definition>
        <argsstring>(hf_spi_statistics_t &amp;statistics) const noexcept</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>BaseSpi::GetStatistics</qualifiedname>
        <param>
          <type><ref refid="structhf__spi__statistics__t" kindref="compound">hf_spi_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get SPI operation statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store statistics data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377dfa97ef02822fcfb84b0670dfa0e4f562f4" kindref="member">hf_spi_err_t::SPI_SUCCESS</ref> if successful, SPI_ERR_NOT_SUPPORTED if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="400" column="24" bodyfile="inc/base/BaseSpi.h" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classBaseSpi_1af87f59a0d9b50a13294d72f2c123fdda" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>virtual hf_spi_err_t BaseSpi::GetDiagnostics</definition>
        <argsstring>(hf_spi_diagnostics_t &amp;diagnostics) const noexcept</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>BaseSpi::GetDiagnostics</qualifiedname>
        <param>
          <type><ref refid="structhf__spi__diagnostics__t" kindref="compound">hf_spi_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get SPI diagnostic information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store diagnostics data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377dfa97ef02822fcfb84b0670dfa0e4f562f4" kindref="member">hf_spi_err_t::SPI_SUCCESS</ref> if successful, SPI_ERR_NOT_SUPPORTED if not implemented </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="410" column="24" bodyfile="inc/base/BaseSpi.h" bodystart="410" bodyend="413"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBaseSpi_1ad499c99d4a592cb117483db0e692f12d" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>BaseSpi::BaseSpi</definition>
        <argsstring>() noexcept</argsstring>
        <name>BaseSpi</name>
        <qualifiedname>BaseSpi::BaseSpi</qualifiedname>
        <briefdescription>
<para>Protected default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Configurations are handled by derived classes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/BaseSpi.h" line="420" column="3" bodyfile="inc/base/BaseSpi.h" bodystart="420" bodyend="420"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Abstract base class for SPI device implementations. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a comprehensive SPI device abstraction that serves as the base for all SPI device implementations in the HardFOC system. Each instance represents a single SPI device with pre-configured settings. It supports:<itemizedlist>
<listitem><para>Master mode SPI communication</para>
</listitem><listitem><para>Configurable SPI modes (0-3)</para>
</listitem><listitem><para>Full-duplex, write-only, and read-only transfers</para>
</listitem><listitem><para>Configurable clock speeds and timing</para>
</listitem><listitem><para>Automatic chip select management</para>
</listitem><listitem><para>Configurable word sizes</para>
</listitem><listitem><para>Comprehensive error handling</para>
</listitem><listitem><para>Lazy initialization pattern</para>
</listitem></itemizedlist>
</para>
<para>Device configuration (mode, speed, CS pin) is set during device creation and managed automatically, ensuring each device operates with its correct settings without manual configuration per transaction.</para>
<para>Derived classes implement platform-specific details such as:<itemizedlist>
<listitem><para>On-chip SPI controllers with device handles</para>
</listitem><listitem><para>SPI bridge or adapter hardware</para>
</listitem><listitem><para>Device-specific configurations</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This is a header-only abstract base class - instantiate concrete implementations instead. </para>
</simplesect>
<simplesect kind="note"><para>This class is not inherently thread-safe. Use appropriate synchronization if accessed from multiple contexts. </para>
</simplesect>
<simplesect kind="note"><para>Each <ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> instance represents a specific SPI device, not the SPI bus itself. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BaseSpi</label>
        <link refid="classBaseSpi"/>
      </node>
      <node id="2">
        <label>EspSpiDevice</label>
        <link refid="classEspSpiDevice"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BaseSpi</label>
        <link refid="classBaseSpi"/>
        <childnode refid="2" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>hf_spi_diagnostics_t</label>
        <link refid="structhf__spi__diagnostics__t"/>
      </node>
      <node id="2">
        <label>hf_spi_statistics_t</label>
        <link refid="structhf__spi__statistics__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/base/BaseSpi.h" line="176" column="1" bodyfile="inc/base/BaseSpi.h" bodystart="176" bodyend="425"/>
    <listofallmembers>
      <member refid="classBaseSpi_1abf33121948481f9001f6d18042da61bb" prot="public" virt="non-virtual"><scope>BaseSpi</scope><name>BaseSpi</name></member>
      <member refid="classBaseSpi_1a3e7a45c66f5c951d6f023ad361e00dd2" prot="public" virt="non-virtual"><scope>BaseSpi</scope><name>BaseSpi</name></member>
      <member refid="classBaseSpi_1ad499c99d4a592cb117483db0e692f12d" prot="protected" virt="non-virtual"><scope>BaseSpi</scope><name>BaseSpi</name></member>
      <member refid="classBaseSpi_1a88b3ba81405134a3566a01ca170bf8bb" prot="public" virt="virtual"><scope>BaseSpi</scope><name>Close</name></member>
      <member refid="classBaseSpi_1a20608abd3e6dc4335dc14bc11d3016e6" prot="public" virt="pure-virtual"><scope>BaseSpi</scope><name>Deinitialize</name></member>
      <member refid="classBaseSpi_1aa215f89886b0839c13e94f52e9725444" prot="protected" virt="non-virtual"><scope>BaseSpi</scope><name>diagnostics_</name></member>
      <member refid="classBaseSpi_1acd991c97d9e67d35af31a0594dd5357a" prot="public" virt="non-virtual"><scope>BaseSpi</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBaseSpi_1a6e74ff977b2bfd381f25f2880387e5ca" prot="public" virt="non-virtual"><scope>BaseSpi</scope><name>EnsureInitialized</name></member>
      <member refid="classBaseSpi_1a6dd381f6a4423927bb59adb4395074ed" prot="public" virt="pure-virtual"><scope>BaseSpi</scope><name>GetDeviceConfig</name></member>
      <member refid="classBaseSpi_1af87f59a0d9b50a13294d72f2c123fdda" prot="public" virt="virtual"><scope>BaseSpi</scope><name>GetDiagnostics</name></member>
      <member refid="classBaseSpi_1a034862a5015ab8d5bb10ddebfabdd7d6" prot="public" virt="virtual"><scope>BaseSpi</scope><name>GetStatistics</name></member>
      <member refid="classBaseSpi_1a0ee4d13f589e319c6fbb3d5bb6492784" prot="public" virt="pure-virtual"><scope>BaseSpi</scope><name>Initialize</name></member>
      <member refid="classBaseSpi_1aa74a4ab673ba37d72c3b7f98e963b9dd" prot="protected" virt="non-virtual"><scope>BaseSpi</scope><name>initialized_</name></member>
      <member refid="classBaseSpi_1a5cf6e0c4a2edba09319834e334ff2a8b" prot="public" virt="non-virtual"><scope>BaseSpi</scope><name>IsInitialized</name></member>
      <member refid="classBaseSpi_1a00e8995f1ccc7a5ab078e7b4c19ffa95" prot="public" virt="virtual"><scope>BaseSpi</scope><name>Open</name></member>
      <member refid="classBaseSpi_1a3c4096c2e9300928a41671fd755d5b30" prot="public" virt="non-virtual"><scope>BaseSpi</scope><name>operator=</name></member>
      <member refid="classBaseSpi_1a98b2462a1b60f70c5fd8eaf56b28f2b7" prot="public" virt="non-virtual"><scope>BaseSpi</scope><name>operator=</name></member>
      <member refid="classBaseSpi_1a64493eb569f32c72a0ee8b1cbf90337d" prot="public" virt="virtual"><scope>BaseSpi</scope><name>Read</name></member>
      <member refid="classBaseSpi_1af49a8f4a53f964975a4d4645b875e5d1" prot="public" virt="virtual"><scope>BaseSpi</scope><name>Read</name></member>
      <member refid="classBaseSpi_1aef966769cc28e0e5f44e627a4a59602b" prot="public" virt="virtual"><scope>BaseSpi</scope><name>ReadByte</name></member>
      <member refid="classBaseSpi_1a245c1518757648334ad2d2edd459c2f9" prot="public" virt="virtual"><scope>BaseSpi</scope><name>ResetDiagnostics</name></member>
      <member refid="classBaseSpi_1a7f63d12c1a0fad18ede02f8a7f2ab6d6" prot="public" virt="virtual"><scope>BaseSpi</scope><name>ResetStatistics</name></member>
      <member refid="classBaseSpi_1a801d2346551161f1d2e1b755501cc1e1" prot="protected" virt="non-virtual"><scope>BaseSpi</scope><name>statistics_</name></member>
      <member refid="classBaseSpi_1a7951cfcc329ab963764013ebe47288c0" prot="public" virt="pure-virtual"><scope>BaseSpi</scope><name>Transfer</name></member>
      <member refid="classBaseSpi_1a949d019c6b5d68d6f3949a63316bfcd0" prot="public" virt="virtual"><scope>BaseSpi</scope><name>Transfer</name></member>
      <member refid="classBaseSpi_1ac4b29e0ea6f6dd6d4c514e8d24ca13d2" prot="public" virt="virtual"><scope>BaseSpi</scope><name>TransferByte</name></member>
      <member refid="classBaseSpi_1a9f84c77a20232f43082b4a493c9baaf2" prot="public" virt="virtual"><scope>BaseSpi</scope><name>Write</name></member>
      <member refid="classBaseSpi_1a5c378f3322713d058a08b8b205ad821e" prot="public" virt="virtual"><scope>BaseSpi</scope><name>Write</name></member>
      <member refid="classBaseSpi_1a31a33d8d816ce7189982455bed742905" prot="public" virt="virtual"><scope>BaseSpi</scope><name>WriteByte</name></member>
      <member refid="classBaseSpi_1a00d984807a767a1b3de27d3ce0a61fd8" prot="public" virt="virtual"><scope>BaseSpi</scope><name>~BaseSpi</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
