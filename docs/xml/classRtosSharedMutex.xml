<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classRtosSharedMutex" kind="class" language="C++" prot="public">
    <compoundname>RtosSharedMutex</compoundname>
    <includes refid="RtosMutex_8h" local="no">RtosMutex.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classRtosSharedMutex_1a6ee2f10bb66fcdec20470c40ea2565cf" prot="private" static="no" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t RtosSharedMutex::writer_mutex_</definition>
        <argsstring></argsstring>
        <name>writer_mutex_</name>
        <qualifiedname>RtosSharedMutex::writer_mutex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="309" column="21" bodyfile="inc/utils/RtosMutex.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRtosSharedMutex_1a67b47d74fbac16a90c9a9a303a6401ed" prot="private" static="no" mutable="no">
        <type>SemaphoreHandle_t</type>
        <definition>SemaphoreHandle_t RtosSharedMutex::reader_mutex_</definition>
        <argsstring></argsstring>
        <name>reader_mutex_</name>
        <qualifiedname>RtosSharedMutex::reader_mutex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="310" column="21" bodyfile="inc/utils/RtosMutex.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRtosSharedMutex_1aa99faf6eab2a617aef4727fdc8714a65" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; RtosSharedMutex::readers_</definition>
        <argsstring></argsstring>
        <name>readers_</name>
        <qualifiedname>RtosSharedMutex::readers_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="311" column="15" bodyfile="inc/utils/RtosMutex.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classRtosSharedMutex_1aac8a222ed7968c8959a56af4e2ebda89" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; RtosSharedMutex::writer_active_</definition>
        <argsstring></argsstring>
        <name>writer_active_</name>
        <qualifiedname>RtosSharedMutex::writer_active_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="312" column="15" bodyfile="inc/utils/RtosMutex.h" bodystart="312" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classRtosSharedMutex_1a4b21cabd9e68393a9acc55879416d201" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>RtosSharedMutex::RtosSharedMutex</definition>
        <argsstring>() noexcept</argsstring>
        <name>RtosSharedMutex</name>
        <qualifiedname>RtosSharedMutex::RtosSharedMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="149" column="3" bodyfile="inc/utils/RtosMutex.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a5068b5bb809f11d18a9ea2d12c0bc855" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>RtosSharedMutex::~RtosSharedMutex</definition>
        <argsstring>() noexcept</argsstring>
        <name>~RtosSharedMutex</name>
        <qualifiedname>RtosSharedMutex::~RtosSharedMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="154" column="3" bodyfile="inc/utils/RtosMutex.h" bodystart="154" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1ae1d3068d9207b5ef477e1ec1ae93c325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RtosSharedMutex::RtosSharedMutex</definition>
        <argsstring>(const RtosSharedMutex &amp;)=delete</argsstring>
        <name>RtosSharedMutex</name>
        <qualifiedname>RtosSharedMutex::RtosSharedMutex</qualifiedname>
        <param>
          <type>const <ref refid="classRtosSharedMutex" kindref="compound">RtosSharedMutex</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="163" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1ac1f9fad931819cd5a4de91ed2d51dce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classRtosSharedMutex" kindref="compound">RtosSharedMutex</ref> &amp;</type>
        <definition>RtosSharedMutex &amp; RtosSharedMutex::operator=</definition>
        <argsstring>(const RtosSharedMutex &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>RtosSharedMutex::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classRtosSharedMutex" kindref="compound">RtosSharedMutex</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="164" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a62024c8bd569a61151065b4e6f0c4b12" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>RtosSharedMutex::RtosSharedMutex</definition>
        <argsstring>(RtosSharedMutex &amp;&amp;other) noexcept</argsstring>
        <name>RtosSharedMutex</name>
        <qualifiedname>RtosSharedMutex::RtosSharedMutex</qualifiedname>
        <param>
          <type><ref refid="classRtosSharedMutex" kindref="compound">RtosSharedMutex</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="166" column="3" bodyfile="inc/utils/RtosMutex.h" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a80d49ed02c84fb6018d95354c22ecb51" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classRtosSharedMutex" kindref="compound">RtosSharedMutex</ref> &amp;</type>
        <definition>RtosSharedMutex &amp; RtosSharedMutex::operator=</definition>
        <argsstring>(RtosSharedMutex &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>RtosSharedMutex::operator=</qualifiedname>
        <param>
          <type><ref refid="classRtosSharedMutex" kindref="compound">RtosSharedMutex</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="175" column="19" bodyfile="inc/utils/RtosMutex.h" bodystart="175" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a31df7dd6f6d49596e5f4ac8d4d081f04" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RtosSharedMutex::lock</definition>
        <argsstring>() noexcept</argsstring>
        <name>lock</name>
        <qualifiedname>RtosSharedMutex::lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="195" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="195" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a48b8bd787b98e2615a4e173d5b51f831" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RtosSharedMutex::try_lock</definition>
        <argsstring>() noexcept</argsstring>
        <name>try_lock</name>
        <qualifiedname>RtosSharedMutex::try_lock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="206" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="206" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a33d777991466c4afe883afdb31b0e0b4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RtosSharedMutex::try_lock_for</definition>
        <argsstring>(uint32_t timeout_ms) noexcept</argsstring>
        <name>try_lock_for</name>
        <qualifiedname>RtosSharedMutex::try_lock_for</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="219" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="219" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a76f381754fe072ce5ac9cc1599da02dc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RtosSharedMutex::unlock</definition>
        <argsstring>() noexcept</argsstring>
        <name>unlock</name>
        <qualifiedname>RtosSharedMutex::unlock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="240" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a3d87877a917e1b7f0429e5cba22d6528" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RtosSharedMutex::lock_shared</definition>
        <argsstring>() noexcept</argsstring>
        <name>lock_shared</name>
        <qualifiedname>RtosSharedMutex::lock_shared</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="245" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="245" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a995aa8c3c0e272a34a2e38ab68a0804d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RtosSharedMutex::try_lock_shared</definition>
        <argsstring>() noexcept</argsstring>
        <name>try_lock_shared</name>
        <qualifiedname>RtosSharedMutex::try_lock_shared</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="260" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="260" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a573ff802346877aba7351fe5ad93d2b2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool RtosSharedMutex::try_lock_shared_for</definition>
        <argsstring>(uint32_t timeout_ms) noexcept</argsstring>
        <name>try_lock_shared_for</name>
        <qualifiedname>RtosSharedMutex::try_lock_shared_for</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="273" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="273" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classRtosSharedMutex_1a88ac4404dc318c5775aed5afa43eb6e5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RtosSharedMutex::unlock_shared</definition>
        <argsstring>() noexcept</argsstring>
        <name>unlock_shared</name>
        <qualifiedname>RtosSharedMutex::unlock_shared</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/RtosMutex.h" line="299" column="8" bodyfile="inc/utils/RtosMutex.h" bodystart="299" bodyend="306"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/utils/RtosMutex.h" line="147" column="1" bodyfile="inc/utils/RtosMutex.h" bodystart="147" bodyend="313"/>
    <listofallmembers>
      <member refid="classRtosSharedMutex_1a31df7dd6f6d49596e5f4ac8d4d081f04" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>lock</name></member>
      <member refid="classRtosSharedMutex_1a3d87877a917e1b7f0429e5cba22d6528" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>lock_shared</name></member>
      <member refid="classRtosSharedMutex_1ac1f9fad931819cd5a4de91ed2d51dce0" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>operator=</name></member>
      <member refid="classRtosSharedMutex_1a80d49ed02c84fb6018d95354c22ecb51" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>operator=</name></member>
      <member refid="classRtosSharedMutex_1a67b47d74fbac16a90c9a9a303a6401ed" prot="private" virt="non-virtual"><scope>RtosSharedMutex</scope><name>reader_mutex_</name></member>
      <member refid="classRtosSharedMutex_1aa99faf6eab2a617aef4727fdc8714a65" prot="private" virt="non-virtual"><scope>RtosSharedMutex</scope><name>readers_</name></member>
      <member refid="classRtosSharedMutex_1a4b21cabd9e68393a9acc55879416d201" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>RtosSharedMutex</name></member>
      <member refid="classRtosSharedMutex_1ae1d3068d9207b5ef477e1ec1ae93c325" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>RtosSharedMutex</name></member>
      <member refid="classRtosSharedMutex_1a62024c8bd569a61151065b4e6f0c4b12" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>RtosSharedMutex</name></member>
      <member refid="classRtosSharedMutex_1a48b8bd787b98e2615a4e173d5b51f831" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>try_lock</name></member>
      <member refid="classRtosSharedMutex_1a33d777991466c4afe883afdb31b0e0b4" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>try_lock_for</name></member>
      <member refid="classRtosSharedMutex_1a995aa8c3c0e272a34a2e38ab68a0804d" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>try_lock_shared</name></member>
      <member refid="classRtosSharedMutex_1a573ff802346877aba7351fe5ad93d2b2" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>try_lock_shared_for</name></member>
      <member refid="classRtosSharedMutex_1a76f381754fe072ce5ac9cc1599da02dc" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>unlock</name></member>
      <member refid="classRtosSharedMutex_1a88ac4404dc318c5775aed5afa43eb6e5" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>unlock_shared</name></member>
      <member refid="classRtosSharedMutex_1aac8a222ed7968c8959a56af4e2ebda89" prot="private" virt="non-virtual"><scope>RtosSharedMutex</scope><name>writer_active_</name></member>
      <member refid="classRtosSharedMutex_1a6ee2f10bb66fcdec20470c40ea2565cf" prot="private" virt="non-virtual"><scope>RtosSharedMutex</scope><name>writer_mutex_</name></member>
      <member refid="classRtosSharedMutex_1a5068b5bb809f11d18a9ea2d12c0bc855" prot="public" virt="non-virtual"><scope>RtosSharedMutex</scope><name>~RtosSharedMutex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
