<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classEspI2cDevice" kind="class" language="C++" prot="public">
    <compoundname>EspI2cDevice</compoundname>
    <basecompoundref refid="classBaseI2c" prot="public" virt="non-virtual">BaseI2c</basecompoundref>
    <includes refid="EspI2c_8h" local="no">EspI2c.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspI2cDevice_1a5b3271e2c9a17ff4a2b39f7e716a93fc" prot="private" static="no" mutable="no">
        <type><ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> *</type>
        <definition>EspI2cBus* EspI2cDevice::parent_bus_</definition>
        <argsstring></argsstring>
        <name>parent_bus_</name>
        <qualifiedname>EspI2cDevice::parent_bus_</qualifiedname>
        <briefdescription>
<para>Parent bus pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="216" column="13" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cDevice_1a4b297354625e4370cbdef30ffc695ae4" prot="private" static="no" mutable="no">
        <type>i2c_master_dev_handle_t</type>
        <definition>i2c_master_dev_handle_t EspI2cDevice::handle_</definition>
        <argsstring></argsstring>
        <name>handle_</name>
        <qualifiedname>EspI2cDevice::handle_</qualifiedname>
        <briefdescription>
<para>ESP-IDF device handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="217" column="27" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cDevice_1a8beb67939673a0494578ee41bc48280a" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref></type>
        <definition>hf_i2c_device_config_t EspI2cDevice::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>EspI2cDevice::config_</qualifiedname>
        <briefdescription>
<para>Device configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="218" column="26" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cDevice_1a770c935f9c67d0d88b9f3d4624812f39" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspI2cDevice::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>EspI2cDevice::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="219" column="8" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cDevice_1afd4fa9c207eaa593ead720c7579e5bcd" prot="private" static="no" mutable="yes">
        <type><ref refid="structhf__i2c__statistics__t" kindref="compound">hf_i2c_statistics_t</ref></type>
        <definition>hf_i2c_statistics_t EspI2cDevice::statistics_</definition>
        <argsstring></argsstring>
        <name>statistics_</name>
        <qualifiedname>EspI2cDevice::statistics_</qualifiedname>
        <briefdescription>
<para>Per-device statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="220" column="31" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cDevice_1a30ea85ba523690eab6a827546f695485" prot="private" static="no" mutable="yes">
        <type><ref refid="structhf__i2c__diagnostics__t" kindref="compound">hf_i2c_diagnostics_t</ref></type>
        <definition>hf_i2c_diagnostics_t EspI2cDevice::diagnostics_</definition>
        <argsstring></argsstring>
        <name>diagnostics_</name>
        <qualifiedname>EspI2cDevice::diagnostics_</qualifiedname>
        <briefdescription>
<para>Per-device diagnostics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="221" column="32" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cDevice_1afe243d57519b587b6c9bcbabc00aab00" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspI2cDevice::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspI2cDevice::mutex_</qualifiedname>
        <briefdescription>
<para>Device mutex for thread safety. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="222" column="21" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="222" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspI2cDevice_1a0a4abc56456e4da3022233661e7fa05b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspI2cDevice::EspI2cDevice</definition>
        <argsstring>(EspI2cBus *parent, i2c_master_dev_handle_t handle, const hf_i2c_device_config_t &amp;config)</argsstring>
        <name>EspI2cDevice</name>
        <qualifiedname>EspI2cDevice::EspI2cDevice</qualifiedname>
        <param>
          <type><ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>i2c_master_dev_handle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the parent <ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Device configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="109" column="3" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="354" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1af8a169703da9511e1ee20957ff4062ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspI2cDevice::~EspI2cDevice</definition>
        <argsstring>() noexcept override</argsstring>
        <name>~EspI2cDevice</name>
        <qualifiedname>EspI2cDevice::~EspI2cDevice</qualifiedname>
        <briefdescription>
<para>Destructor. Automatically removes device from bus if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="114" column="3" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1a6b441d54a4f47e124dd6e5f48a23c7f9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspI2cDevice::Initialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspI2cDevice::Initialize</qualifiedname>
        <reimplements refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32">Initialize</reimplements>
        <briefdescription>
<para>Initialize the I2C device (no-op if already initialized). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="120" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="372" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1ac905c8cc4c142563e73380ffb6b679b3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspI2cDevice::Deinitialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspI2cDevice::Deinitialize</qualifiedname>
        <reimplements refid="classBaseI2c_1a2a96e596e8d83320c7f8d943119eef38">Deinitialize</reimplements>
        <briefdescription>
<para>Deinitialize the I2C device and free resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="126" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="384" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1acc62adb05de7e21b96f5a61df9c4bb65" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::Write</definition>
        <argsstring>(const hf_u8_t *data, hf_u16_t length, hf_u32_t timeout_ms=0) noexcept override</argsstring>
        <name>Write</name>
        <qualifiedname>EspI2cDevice::Write</qualifiedname>
        <reimplements refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d">Write</reimplements>
        <param>
          <type>const <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Write data to the I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds (0 = default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>I2C operation result </para>
</simplesect>
<simplesect kind="note"><para>Device address is configured during device creation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="136" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="406" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1a2943185e69fabba6ed4b25f1671d6877" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::Read</definition>
        <argsstring>(hf_u8_t *data, hf_u16_t length, hf_u32_t timeout_ms=0) noexcept override</argsstring>
        <name>Read</name>
        <qualifiedname>EspI2cDevice::Read</qualifiedname>
        <reimplements refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0">Read</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Read data from the I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer to store received data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds (0 = default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>I2C operation result </para>
</simplesect>
<simplesect kind="note"><para>Device address is configured during device creation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="147" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="444" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1ab0e1da7ee817f2ddfd2c0393b7fb6c99" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::WriteRead</definition>
        <argsstring>(const hf_u8_t *tx_data, hf_u16_t tx_length, hf_u8_t *rx_data, hf_u16_t rx_length, hf_u32_t timeout_ms=0) noexcept override</argsstring>
        <name>WriteRead</name>
        <qualifiedname>EspI2cDevice::WriteRead</qualifiedname>
        <reimplements refid="classBaseI2c_1a58da16ee4e2762bed7b2541491b3147b">WriteRead</reimplements>
        <param>
          <type>const <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>tx_length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>rx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>rx_length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Write then read data from the I2C device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data buffer to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tx_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer to store received data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds (0 = default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>I2C operation result </para>
</simplesect>
<simplesect kind="note"><para>Device address is configured during device creation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="160" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="482" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1a818577649bcedae0369942992049866f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::GetStatistics</definition>
        <argsstring>(hf_i2c_statistics_t &amp;statistics) const noexcept override</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>EspI2cDevice::GetStatistics</qualifiedname>
        <reimplements refid="classBaseI2c_1a211b5abbe37a9905cf74312799eca5d4">GetStatistics</reimplements>
        <param>
          <type><ref refid="structhf__i2c__statistics__t" kindref="compound">hf_i2c_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get I2C bus statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to statistics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Operation result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="169" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="520" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1a7cc342b16f58e07dbd894f30b9df1e49" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::GetDiagnostics</definition>
        <argsstring>(hf_i2c_diagnostics_t &amp;diagnostics) const noexcept override</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>EspI2cDevice::GetDiagnostics</qualifiedname>
        <reimplements refid="classBaseI2c_1a6c002a6a3a2ab1d9616fd8dad1f9c8e7">GetDiagnostics</reimplements>
        <param>
          <type><ref refid="structhf__i2c__diagnostics__t" kindref="compound">hf_i2c_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get I2C bus diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to diagnostics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Operation result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="176" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="526" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1ab73f244d0b2696164597e24247aca689" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::ResetStatistics</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ResetStatistics</name>
        <qualifiedname>EspI2cDevice::ResetStatistics</qualifiedname>
        <reimplements refid="classBaseI2c_1a11d9d717f2176de6ceaa57b0f29bd2f9">ResetStatistics</reimplements>
        <briefdescription>
<para>Reset I2C statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Operation result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="182" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="536" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1ab97f4a636f97a71c3031f56f0614ed5b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>i2c_master_dev_handle_t</type>
        <definition>i2c_master_dev_handle_t EspI2cDevice::GetHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetHandle</name>
        <qualifiedname>EspI2cDevice::GetHandle</qualifiedname>
        <briefdescription>
<para>Get the ESP-IDF device handle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>i2c_master_dev_handle_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="188" column="27" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="542" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1a513abd8cbc808cd83cf7eeb395a164a3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref> &amp;</type>
        <definition>const hf_i2c_device_config_t &amp; EspI2cDevice::GetConfig</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetConfig</name>
        <qualifiedname>EspI2cDevice::GetConfig</qualifiedname>
        <briefdescription>
<para>Get the device configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="194" column="32" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="546" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1aab6bbd8d809f7723174dcbe3d94c660a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
        <definition>hf_u16_t EspI2cDevice::GetDeviceAddress</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetDeviceAddress</name>
        <qualifiedname>EspI2cDevice::GetDeviceAddress</qualifiedname>
        <reimplements refid="classBaseI2c_1a99b912de8282d2d24bea723f841756db">GetDeviceAddress</reimplements>
        <briefdescription>
<para>Get the device address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Device address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="200" column="12" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="532" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1ae6b946adfab6d0a38cac6e5543bf8d26" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::GetActualClockFrequency</definition>
        <argsstring>(hf_u32_t &amp;actual_freq_hz) const noexcept</argsstring>
        <name>GetActualClockFrequency</name>
        <qualifiedname>EspI2cDevice::GetActualClockFrequency</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref> &amp;</type>
          <declname>actual_freq_hz</declname>
        </param>
        <briefdescription>
<para>Get the actual clock frequency for this device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>actual_freq_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store actual frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Operation result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="207" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="554" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1a149a2fc81cf16627fba0c01853dfc0be" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cDevice::ProbeDevice</definition>
        <argsstring>() noexcept</argsstring>
        <name>ProbeDevice</name>
        <qualifiedname>EspI2cDevice::ProbeDevice</qualifiedname>
        <briefdescription>
<para>Probe if the device is present on the bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if device responds, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="213" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="561" bodyend="567"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEspI2cDevice_1a7a20da56a36e479ec4103d6a07f57e53" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspI2cDevice::UpdateStatistics</definition>
        <argsstring>(bool success, size_t bytes_transferred, hf_u64_t operation_time_us) noexcept</argsstring>
        <name>UpdateStatistics</name>
        <qualifiedname>EspI2cDevice::UpdateStatistics</qualifiedname>
        <param>
          <type>bool</type>
          <declname>success</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes_transferred</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref></type>
          <declname>operation_time_us</declname>
        </param>
        <briefdescription>
<para>Update statistics with operation result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation success status </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes_transferred</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes transferred </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_time_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation time in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="230" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="569" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cDevice_1a4f7ed845e16a820356d2f9ff95b881b0" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cDevice::ConvertEspError</definition>
        <argsstring>(esp_err_t esp_error) const noexcept</argsstring>
        <name>ConvertEspError</name>
        <qualifiedname>EspI2cDevice::ConvertEspError</qualifiedname>
        <param>
          <type>esp_err_t</type>
          <declname>esp_error</declname>
        </param>
        <briefdescription>
<para>Convert ESP-IDF error to HardFOC error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>esp_error</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HardFOC I2C error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="237" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="591" bodyend="610"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Represents a single I2C device on a bus. </para>
    </briefdescription>
    <detaileddescription>
<para>Inherits from <ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> and delegates operations to the parent bus. Provides full configuration and control for a single I2C device, including per-device clock speed, addressing mode, and ESP-IDF v5.5+ features.</para>
<para><simplesect kind="note"><para>Thread-safe. All operations are protected by <ref refid="classRtosMutex" kindref="compound">RtosMutex</ref>. </para>
</simplesect>
<simplesect kind="note"><para>Each device maintains its own handle and configuration. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BaseI2c</label>
        <link refid="classBaseI2c"/>
      </node>
      <node id="1">
        <label>EspI2cDevice</label>
        <link refid="classEspI2cDevice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BaseI2c</label>
        <link refid="classBaseI2c"/>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>EspI2cBus</label>
        <link refid="classEspI2cBus"/>
        <childnode refid="6" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>EspI2cDevice</label>
        <link refid="classEspI2cDevice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>parent_bus_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="8">
        <label>hf_i2c_device_config_t</label>
        <link refid="structhf__i2c__device__config__t"/>
      </node>
      <node id="4">
        <label>hf_i2c_diagnostics_t</label>
        <link refid="structhf__i2c__diagnostics__t"/>
      </node>
      <node id="6">
        <label>hf_i2c_master_bus_config_t</label>
        <link refid="structhf__i2c__master__bus__config__t"/>
      </node>
      <node id="3">
        <label>hf_i2c_statistics_t</label>
        <link refid="structhf__i2c__statistics__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspI2c.h" line="101" column="1" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="101" bodyend="238"/>
    <listofallmembers>
      <member refid="classBaseI2c_1a0ef4a4a50952a71b4c7be2f13660282d" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>BaseI2c</name></member>
      <member refid="classBaseI2c_1a092d769aa9bf48da2c730a6a27a4d93c" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>BaseI2c</name></member>
      <member refid="classBaseI2c_1af9b69abc680d2951321217d64e2eaa12" prot="protected" virt="non-virtual"><scope>EspI2cDevice</scope><name>BaseI2c</name></member>
      <member refid="classBaseI2c_1a53ffda673e3b0774c31da385b27a7c3f" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>Close</name></member>
      <member refid="classEspI2cDevice_1a8beb67939673a0494578ee41bc48280a" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>config_</name></member>
      <member refid="classEspI2cDevice_1a4f7ed845e16a820356d2f9ff95b881b0" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>ConvertEspError</name></member>
      <member refid="classEspI2cDevice_1ac905c8cc4c142563e73380ffb6b679b3" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>Deinitialize</name></member>
      <member refid="classEspI2cDevice_1a30ea85ba523690eab6a827546f695485" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>diagnostics_</name></member>
      <member refid="classBaseI2c_1a35f3b7343c0e4ace25937060f39d44be" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBaseI2c_1ab2ba276139755eda4f52d7f9a523ed4e" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>EnsureInitialized</name></member>
      <member refid="classEspI2cDevice_1a0a4abc56456e4da3022233661e7fa05b" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>EspI2cDevice</name></member>
      <member refid="classEspI2cDevice_1ae6b946adfab6d0a38cac6e5543bf8d26" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>GetActualClockFrequency</name></member>
      <member refid="classEspI2cDevice_1a513abd8cbc808cd83cf7eeb395a164a3" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>GetConfig</name></member>
      <member refid="classEspI2cDevice_1aab6bbd8d809f7723174dcbe3d94c660a" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>GetDeviceAddress</name></member>
      <member refid="classEspI2cDevice_1a7cc342b16f58e07dbd894f30b9df1e49" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>GetDiagnostics</name></member>
      <member refid="classEspI2cDevice_1ab97f4a636f97a71c3031f56f0614ed5b" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>GetHandle</name></member>
      <member refid="classEspI2cDevice_1a818577649bcedae0369942992049866f" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>GetStatistics</name></member>
      <member refid="classEspI2cDevice_1a4b297354625e4370cbdef30ffc695ae4" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>handle_</name></member>
      <member refid="classEspI2cDevice_1a6b441d54a4f47e124dd6e5f48a23c7f9" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>Initialize</name></member>
      <member refid="classEspI2cDevice_1a770c935f9c67d0d88b9f3d4624812f39" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>initialized_</name></member>
      <member refid="classBaseI2c_1a0d8635db15272fc79947121fcec70850" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>IsDevicePresent</name></member>
      <member refid="classBaseI2c_1aa0015d0aff3de7f30f7444935a50c094" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>IsInitialized</name></member>
      <member refid="classEspI2cDevice_1afe243d57519b587b6c9bcbabc00aab00" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>mutex_</name></member>
      <member refid="classBaseI2c_1a9decd4d080fd5090a4f98892c2549a0a" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>Open</name></member>
      <member refid="classBaseI2c_1a9296811925c9010e889f85232dc58f58" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>operator=</name></member>
      <member refid="classBaseI2c_1a9169f7ddc26ca7a620676615364fc283" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>operator=</name></member>
      <member refid="classEspI2cDevice_1a5b3271e2c9a17ff4a2b39f7e716a93fc" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>parent_bus_</name></member>
      <member refid="classEspI2cDevice_1a149a2fc81cf16627fba0c01853dfc0be" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>ProbeDevice</name></member>
      <member refid="classEspI2cDevice_1a2943185e69fabba6ed4b25f1671d6877" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>Read</name></member>
      <member refid="classBaseI2c_1adb55bb052a4ee0d71f09623f88818fb2" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>ReadByte</name></member>
      <member refid="classBaseI2c_1aec25744c5d3ab1ec6c326950001949a0" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>ReadRegister</name></member>
      <member refid="classBaseI2c_1abf2a8df2ce9d012dbfa57180228e9789" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>ReadRegisters</name></member>
      <member refid="classBaseI2c_1af4abdee0440286a09b39680211ed19a5" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>ResetDiagnostics</name></member>
      <member refid="classEspI2cDevice_1ab73f244d0b2696164597e24247aca689" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>ResetStatistics</name></member>
      <member refid="classEspI2cDevice_1afd4fa9c207eaa593ead720c7579e5bcd" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>statistics_</name></member>
      <member refid="classEspI2cDevice_1a7a20da56a36e479ec4103d6a07f57e53" prot="private" virt="non-virtual"><scope>EspI2cDevice</scope><name>UpdateStatistics</name></member>
      <member refid="classEspI2cDevice_1acc62adb05de7e21b96f5a61df9c4bb65" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>Write</name></member>
      <member refid="classBaseI2c_1afe9cee66898c28c58ac7a146375e3a63" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>WriteByte</name></member>
      <member refid="classEspI2cDevice_1ab0e1da7ee817f2ddfd2c0393b7fb6c99" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>WriteRead</name></member>
      <member refid="classBaseI2c_1a68bbbd82d13bbe905659d10648843a5e" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>WriteRegister</name></member>
      <member refid="classBaseI2c_1a71fa2410d820fb183b835ddea09d444f" prot="public" virt="virtual"><scope>EspI2cDevice</scope><name>~BaseI2c</name></member>
      <member refid="classEspI2cDevice_1af8a169703da9511e1ee20957ff4062ab" prot="public" virt="non-virtual"><scope>EspI2cDevice</scope><name>~EspI2cDevice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
