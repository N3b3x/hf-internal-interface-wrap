<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classEspPwm" kind="class" language="C++" prot="public">
    <compoundname>EspPwm</compoundname>
    <basecompoundref refid="classBasePwm" prot="public" virt="non-virtual">BasePwm</basecompoundref>
    <includes refid="EspPwm_8h" local="no">EspPwm.h</includes>
    <innerclass refid="structEspPwm_1_1ChannelState" prot="private">EspPwm::ChannelState</innerclass>
    <innerclass refid="structEspPwm_1_1ComplementaryPair" prot="private">EspPwm::ComplementaryPair</innerclass>
    <innerclass refid="structEspPwm_1_1TimerState" prot="private">EspPwm::TimerState</innerclass>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classEspPwm_1a1595caab94f2f77924d128115eab0be2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t EspPwm::MAX_CHANNELS</definition>
        <argsstring></argsstring>
        <name>MAX_CHANNELS</name>
        <qualifiedname>EspPwm::MAX_CHANNELS</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1a86d24d14ec124f4012f812f9853993f0" kindref="member">HF_PWM_MAX_CHANNELS</ref></initializer>
        <briefdescription>
<para>Maximum PWM channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="64" column="28" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a625133f35c2449a53e048f63df138a89" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t EspPwm::MAX_TIMERS</definition>
        <argsstring></argsstring>
        <name>MAX_TIMERS</name>
        <qualifiedname>EspPwm::MAX_TIMERS</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1a188b45a8dc354e4753a2d2a3ade6b06e" kindref="member">HF_PWM_MAX_TIMERS</ref></initializer>
        <briefdescription>
<para>Maximum timer groups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="65" column="28" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a5ebf53a209f25236bafcb52fe0564d2a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t EspPwm::MAX_RESOLUTION</definition>
        <argsstring></argsstring>
        <name>MAX_RESOLUTION</name>
        <qualifiedname>EspPwm::MAX_RESOLUTION</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1ae635150b452b279b29b65f799961d51f" kindref="member">HF_PWM_MAX_RESOLUTION</ref></initializer>
        <briefdescription>
<para>Maximum resolution bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="66" column="28" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1af03e7350d2c885bbca5358ee3a183d10" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>constexpr hf_u32_t EspPwm::MIN_FREQUENCY</definition>
        <argsstring></argsstring>
        <name>MIN_FREQUENCY</name>
        <qualifiedname>EspPwm::MIN_FREQUENCY</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1ab59b928c49e8f4ef0dbc7c1bac390c93" kindref="member">HF_PWM_MIN_FREQUENCY</ref></initializer>
        <briefdescription>
<para>Minimum frequency (Hz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="67" column="29" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a9028b609b50b17802ce3b8da3ec39899" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>constexpr hf_u32_t EspPwm::MAX_FREQUENCY</definition>
        <argsstring></argsstring>
        <name>MAX_FREQUENCY</name>
        <qualifiedname>EspPwm::MAX_FREQUENCY</qualifiedname>
        <initializer>= <ref refid="EspTypes__PWM_8h_1aefdd9851ea138af7ce3b87a861c9f8b7" kindref="member">HF_PWM_MAX_FREQUENCY</ref></initializer>
        <briefdescription>
<para>Maximum frequency (Hz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="68" column="29" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="68" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspPwm_1ae4c8b8e2abef78e240fc60451b6d793e" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspPwm::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspPwm::mutex_</qualifiedname>
        <briefdescription>
<para>Thread safety mutex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="398" column="21" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a62f5455c00a2bf6bee32c4edeb5b90d0" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspPwm::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>EspPwm::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization state (atomic for lazy init) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="399" column="15" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1adb2698a4d9441132c4f9ba23a4dc4678" prot="private" static="no" mutable="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspPwm::base_clock_hz_</definition>
        <argsstring></argsstring>
        <name>base_clock_hz_</name>
        <qualifiedname>EspPwm::base_clock_hz_</qualifiedname>
        <briefdescription>
<para>Base clock frequency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="400" column="12" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ac4da347398a044e97ecfd586a65d4470" prot="private" static="no" mutable="no">
        <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
        <definition>hf_pwm_clock_source_t EspPwm::clock_source_</definition>
        <argsstring></argsstring>
        <name>clock_source_</name>
        <qualifiedname>EspPwm::clock_source_</qualifiedname>
        <briefdescription>
<para>Current clock source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="401" column="25" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ab3341c72b5f1d413999dfc44fd8d80d2" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="structEspPwm_1_1ChannelState" kindref="compound">ChannelState</ref>, <ref refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" kindref="member">MAX_CHANNELS</ref> &gt;</type>
        <definition>std::array&lt;ChannelState, MAX_CHANNELS&gt; EspPwm::channels_</definition>
        <argsstring></argsstring>
        <name>channels_</name>
        <qualifiedname>EspPwm::channels_</qualifiedname>
        <briefdescription>
<para>Channel states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="403" column="14" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ad569f2cfbea460323ab5847717019d75" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="structEspPwm_1_1TimerState" kindref="compound">TimerState</ref>, <ref refid="classEspPwm_1a625133f35c2449a53e048f63df138a89" kindref="member">MAX_TIMERS</ref> &gt;</type>
        <definition>std::array&lt;TimerState, MAX_TIMERS&gt; EspPwm::timers_</definition>
        <argsstring></argsstring>
        <name>timers_</name>
        <qualifiedname>EspPwm::timers_</qualifiedname>
        <briefdescription>
<para>Timer states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="404" column="14" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1afdfcaf9396528e32f648a403fd4fb075" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="structEspPwm_1_1ComplementaryPair" kindref="compound">ComplementaryPair</ref>, <ref refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" kindref="member">MAX_CHANNELS</ref>/2 &gt;</type>
        <definition>std::array&lt;ComplementaryPair, MAX_CHANNELS / 2&gt; EspPwm::complementary_pairs_</definition>
        <argsstring></argsstring>
        <name>complementary_pairs_</name>
        <qualifiedname>EspPwm::complementary_pairs_</qualifiedname>
        <briefdescription>
<para>Complementary pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="405" column="14" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ab3100f917745b13991db11d087c5f4eb" prot="private" static="no" mutable="no">
        <type><ref refid="BasePwm_8h_1a945db454a91740660bc4e6a68e4c4136" kindref="member">hf_pwm_period_callback_t</ref></type>
        <definition>hf_pwm_period_callback_t EspPwm::period_callback_</definition>
        <argsstring></argsstring>
        <name>period_callback_</name>
        <qualifiedname>EspPwm::period_callback_</qualifiedname>
        <briefdescription>
<para>Period complete callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="407" column="28" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a9e6cdc4954e52e3159347cbbaa7fa073" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* EspPwm::period_callback_user_data_</definition>
        <argsstring></argsstring>
        <name>period_callback_user_data_</name>
        <qualifiedname>EspPwm::period_callback_user_data_</qualifiedname>
        <briefdescription>
<para>Period callback user data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="408" column="8" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a4e45c5745c1c4ec770782168aa2ed8e7" prot="private" static="no" mutable="no">
        <type><ref refid="BasePwm_8h_1a4862b3568e86bcc7bfa6db1b5e09a502" kindref="member">hf_pwm_fault_callback_t</ref></type>
        <definition>hf_pwm_fault_callback_t EspPwm::fault_callback_</definition>
        <argsstring></argsstring>
        <name>fault_callback_</name>
        <qualifiedname>EspPwm::fault_callback_</qualifiedname>
        <briefdescription>
<para>Fault callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="409" column="27" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a8a047a7b69a893276689f383c3e753f2" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* EspPwm::fault_callback_user_data_</definition>
        <argsstring></argsstring>
        <name>fault_callback_user_data_</name>
        <qualifiedname>EspPwm::fault_callback_user_data_</qualifiedname>
        <briefdescription>
<para>Fault callback user data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="410" column="8" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ad1b06777e74eedca37e5023ec23fc4ce" prot="private" static="no" mutable="no">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::last_global_error_</definition>
        <argsstring></argsstring>
        <name>last_global_error_</name>
        <qualifiedname>EspPwm::last_global_error_</qualifiedname>
        <briefdescription>
<para>Last global error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="412" column="16" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ab200d2d51794d3c3f6c18945132bc7e4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspPwm::fade_functionality_installed_</definition>
        <argsstring></argsstring>
        <name>fade_functionality_installed_</name>
        <qualifiedname>EspPwm::fade_functionality_installed_</qualifiedname>
        <briefdescription>
<para>LEDC fade functionality installed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="413" column="8" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1ac2592dd4dbe1e99213a7d1d4c69e67fd" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref></type>
        <definition>hf_pwm_unit_config_t EspPwm::unit_config_</definition>
        <argsstring></argsstring>
        <name>unit_config_</name>
        <qualifiedname>EspPwm::unit_config_</qualifiedname>
        <briefdescription>
<para>Unit configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="416" column="24" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a364fe8d01eaea5c9664f43c8c2bd2dcb" prot="private" static="no" mutable="no">
        <type><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3fa" kindref="member">hf_pwm_mode_t</ref></type>
        <definition>hf_pwm_mode_t EspPwm::current_mode_</definition>
        <argsstring></argsstring>
        <name>current_mode_</name>
        <qualifiedname>EspPwm::current_mode_</qualifiedname>
        <briefdescription>
<para>Current operating mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="417" column="17" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1aefe4a2dfe1bccd062a299b1febb8aef8" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref></type>
        <definition>hf_pwm_statistics_t EspPwm::statistics_</definition>
        <argsstring></argsstring>
        <name>statistics_</name>
        <qualifiedname>EspPwm::statistics_</qualifiedname>
        <briefdescription>
<para>PWM statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="418" column="23" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspPwm_1a825cbef48b32048590def430ae108584" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref></type>
        <definition>hf_pwm_diagnostics_t EspPwm::diagnostics_</definition>
        <argsstring></argsstring>
        <name>diagnostics_</name>
        <qualifiedname>EspPwm::diagnostics_</qualifiedname>
        <briefdescription>
<para>PWM diagnostics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="419" column="24" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="419" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspPwm_1ae8e7d6e7f4ca605d4d4a361dc7806fd0" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspPwm::EspPwm</definition>
        <argsstring>(const hf_pwm_unit_config_t &amp;config=hf_pwm_unit_config_t{}) noexcept</argsstring>
        <name>EspPwm</name>
        <qualifiedname>EspPwm::EspPwm</qualifiedname>
        <param>
          <type>const <ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref> &amp;</type>
          <declname>config</declname>
          <defval><ref refid="structhf__pwm__unit__config__t" kindref="compound">hf_pwm_unit_config_t</ref>{}</defval>
        </param>
        <briefdescription>
<para>Constructor for ESP32C6 PWM controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM unit configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Uses lazy initialization - no hardware action until first operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="79" column="12" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a50bc03f3329c9979766b1397d185b3b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspPwm::EspPwm</definition>
        <argsstring>(hf_u32_t base_clock_hz) noexcept</argsstring>
        <name>EspPwm</name>
        <qualifiedname>EspPwm::EspPwm</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>base_clock_hz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="80" column="3" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aaac5ce3f95ae8c5fb96312ad9a779ce6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>EspPwm::~EspPwm</definition>
        <argsstring>() noexcept override</argsstring>
        <name>~EspPwm</name>
        <qualifiedname>EspPwm::~EspPwm</qualifiedname>
        <briefdescription>
<para>Destructor - ensures clean shutdown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="85" column="11" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1adda6756a1158a4cb37194c0690ac412f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspPwm::EspPwm</definition>
        <argsstring>(const EspPwm &amp;)=delete</argsstring>
        <name>EspPwm</name>
        <qualifiedname>EspPwm::EspPwm</qualifiedname>
        <param>
          <type>const <ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="88" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ae46e009618632e0db573912f71c94f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        <definition>EspPwm &amp; EspPwm::operator=</definition>
        <argsstring>(const EspPwm &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspPwm::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a0523ebf8e643c95ad9b3ced6ff077fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspPwm::EspPwm</definition>
        <argsstring>(EspPwm &amp;&amp;)=delete</argsstring>
        <name>EspPwm</name>
        <qualifiedname>EspPwm::EspPwm</qualifiedname>
        <param>
          <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="90" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aecba3137a0ead8abc259ab199648148b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;</type>
        <definition>EspPwm &amp; EspPwm::operator=</definition>
        <argsstring>(EspPwm &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspPwm::operator=</qualifiedname>
        <param>
          <type><ref refid="classEspPwm" kindref="compound">EspPwm</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="91" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aedb8649c68e856258d6278bf399aab05" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::Initialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspPwm::Initialize</qualifiedname>
        <reimplements refid="classBasePwm_1a4dba77ec0b1d096f85af2288f121f7f7">Initialize</reimplements>
        <briefdescription>
<para>Initialize the PWM system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="97" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="78" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a28c857a39efec61ad79770770fca878c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::Deinitialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspPwm::Deinitialize</qualifiedname>
        <reimplements refid="classBasePwm_1a7d3dbe67ab0c23c738e2507f915137fb">Deinitialize</reimplements>
        <briefdescription>
<para>Deinitialize the PWM system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="98" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="120" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a848d38996b427bf51215bf0c0147a328" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetMode</definition>
        <argsstring>(hf_pwm_mode_t mode) noexcept</argsstring>
        <name>SetMode</name>
        <qualifiedname>EspPwm::SetMode</qualifiedname>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3fa" kindref="member">hf_pwm_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set PWM operating mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operating mode (Basic or Fade) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="105" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="148" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a620e13937a4213f8c44219272302a1a7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="EspTypes__PWM_8h_1aa74b1b34478ef0fde22cd029366ab3fa" kindref="member">hf_pwm_mode_t</ref></type>
        <definition>hf_pwm_mode_t EspPwm::GetMode</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetMode</name>
        <qualifiedname>EspPwm::GetMode</qualifiedname>
        <briefdescription>
<para>Get current PWM operating mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current operating mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="111" column="17" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4dc265e040617403e718d4d28ff66e56" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ConfigureChannel</definition>
        <argsstring>(hf_channel_id_t channel_id, const hf_pwm_channel_config_t &amp;config) noexcept</argsstring>
        <name>ConfigureChannel</name>
        <qualifiedname>EspPwm::ConfigureChannel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="117" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="177" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a3bd515c8685db84d5ff92a475063d663" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::EnableChannel</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept override</argsstring>
        <name>EnableChannel</name>
        <qualifiedname>EspPwm::EnableChannel</qualifiedname>
        <reimplements refid="classBasePwm_1af1c19d6ae43e3711a2a16dc39d8dbfa6">EnableChannel</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Enable a PWM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to enable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="119" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="246" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a8ff1addad40e1a81afa83a975b136e89" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::DisableChannel</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept override</argsstring>
        <name>DisableChannel</name>
        <qualifiedname>EspPwm::DisableChannel</qualifiedname>
        <reimplements refid="classBasePwm_1a88b6b8a4d9ea7c9172846aa4e9cc572d">DisableChannel</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Disable a PWM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="120" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="284" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a07c737787080435a486d47ad3c6803e9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsChannelEnabled</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept override</argsstring>
        <name>IsChannelEnabled</name>
        <qualifiedname>EspPwm::IsChannelEnabled</qualifiedname>
        <reimplements refid="classBasePwm_1af2f490b963644ca04d4750b7d947b543">IsChannelEnabled</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Check if a channel is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if enabled, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="121" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="319" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ae4170c3b4661c0d4b9646eb3d775c88c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetDutyCycle</definition>
        <argsstring>(hf_channel_id_t channel_id, float duty_cycle) noexcept override</argsstring>
        <name>SetDutyCycle</name>
        <qualifiedname>EspPwm::SetDutyCycle</qualifiedname>
        <reimplements refid="classBasePwm_1a4883325ace0e9fd9d096fc87a24317c3">SetDutyCycle</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>duty_cycle</declname>
        </param>
        <briefdescription>
<para>Set duty cycle for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duty_cycle</parametername>
</parameternamelist>
<parameterdescription>
<para>Duty cycle (0.0 - 1.0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="127" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="332" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6bc8906d106762d5c9b1bcfd68ff0636" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetDutyCycleRaw</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u32_t raw_value) noexcept override</argsstring>
        <name>SetDutyCycleRaw</name>
        <qualifiedname>EspPwm::SetDutyCycleRaw</qualifiedname>
        <reimplements refid="classBasePwm_1aa9f97e6e7c9af42aae99b8aeae5e7c67">SetDutyCycleRaw</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>raw_value</declname>
        </param>
        <briefdescription>
<para>Set raw duty value for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw duty register value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="128" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="362" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a185108e6adbaaa23bcef4fbd8bda1b91" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetFrequency</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_frequency_hz_t frequency_hz) noexcept override</argsstring>
        <name>SetFrequency</name>
        <qualifiedname>EspPwm::SetFrequency</qualifiedname>
        <reimplements refid="classBasePwm_1ad192230babf2e4dc7a37477b4a0153b8">SetFrequency</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <briefdescription>
<para>Set frequency for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency in Hz </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="129" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="398" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6096fdc1d06345204c8062d2f86bd0c5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetPhaseShift</definition>
        <argsstring>(hf_channel_id_t channel_id, float phase_shift_degrees) noexcept override</argsstring>
        <name>SetPhaseShift</name>
        <qualifiedname>EspPwm::SetPhaseShift</qualifiedname>
        <reimplements refid="classBasePwm_1ad2d69c4057b84358f120f1c27fb3e2c1">SetPhaseShift</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>phase_shift_degrees</declname>
        </param>
        <briefdescription>
<para>Set phase shift for a channel (if supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phase_shift_degrees</parametername>
</parameternamelist>
<parameterdescription>
<para>Phase shift in degrees (0-360) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="131" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="466" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a130153d9f4bdaee4219736cb248d78f6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::StartAll</definition>
        <argsstring>() noexcept override</argsstring>
        <name>StartAll</name>
        <qualifiedname>EspPwm::StartAll</qualifiedname>
        <reimplements refid="classBasePwm_1a02e791636c4d544d702b06014695ed31">StartAll</reimplements>
        <briefdescription>
<para>Start all enabled channels simultaneously. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="138" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="488" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a8be25ecab27ff61499a66535f303df2e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::StopAll</definition>
        <argsstring>() noexcept override</argsstring>
        <name>StopAll</name>
        <qualifiedname>EspPwm::StopAll</qualifiedname>
        <reimplements refid="classBasePwm_1a0dc5b8704b7f3107745224441d7b3a5b">StopAll</reimplements>
        <briefdescription>
<para>Stop all channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="139" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="509" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a5681d5ceb230b6dc0a459f3ef9630b8b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::UpdateAll</definition>
        <argsstring>() noexcept override</argsstring>
        <name>UpdateAll</name>
        <qualifiedname>EspPwm::UpdateAll</qualifiedname>
        <reimplements refid="classBasePwm_1a9cb4de783416fab169872c9250d30089">UpdateAll</reimplements>
        <briefdescription>
<para>Update all channel outputs simultaneously (for synchronized updates) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="140" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="530" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6c4cc0b3c19e7258a063b1900f9d291a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetComplementaryOutput</definition>
        <argsstring>(hf_channel_id_t primary_channel, hf_channel_id_t complementary_channel, hf_u32_t deadtime_ns) noexcept override</argsstring>
        <name>SetComplementaryOutput</name>
        <qualifiedname>EspPwm::SetComplementaryOutput</qualifiedname>
        <reimplements refid="classBasePwm_1a4b7f8834e3f06fbf5995b3bfd3e7aa71">SetComplementaryOutput</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>primary_channel</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>complementary_channel</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>deadtime_ns</declname>
        </param>
        <briefdescription>
<para>Set complementary output configuration (for motor control) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primary_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Primary channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>complementary_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Complementary channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deadtime_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Deadtime in nanoseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="141" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="553" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aeb3eda73cca25d298a3c7e3cbf133f03" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>float</type>
        <definition>float EspPwm::GetDutyCycle</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept override</argsstring>
        <name>GetDutyCycle</name>
        <qualifiedname>EspPwm::GetDutyCycle</qualifiedname>
        <reimplements refid="classBasePwm_1a7d04dac1cdbfc50884b24b912a52b877">GetDutyCycle</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get current duty cycle for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current duty cycle (0.0 - 1.0), or -1.0 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="149" column="9" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="599" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4687559ad8744ece1ef578796b21eb02" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
        <definition>hf_frequency_hz_t EspPwm::GetFrequency</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept override</argsstring>
        <name>GetFrequency</name>
        <qualifiedname>EspPwm::GetFrequency</qualifiedname>
        <reimplements refid="classBasePwm_1a9be813122b797d0a45c3248f0c203063">GetFrequency</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get current frequency for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current frequency in Hz, or 0 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="150" column="21" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="611" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a7cf9c46011b383820a588a9f153dfc52" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetChannelStatus</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_pwm_channel_status_t &amp;status) const noexcept</argsstring>
        <name>GetChannelStatus</name>
        <qualifiedname>EspPwm::GetChannelStatus</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="structhf__pwm__channel__status__t" kindref="compound">hf_pwm_channel_status_t</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="151" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="622" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1af92695b9e07458d6280489d1ce3d8bdd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetCapabilities</definition>
        <argsstring>(hf_pwm_capabilities_t &amp;capabilities) const noexcept</argsstring>
        <name>GetCapabilities</name>
        <qualifiedname>EspPwm::GetCapabilities</qualifiedname>
        <param>
          <type><ref refid="structhf__pwm__capabilities__t" kindref="compound">hf_pwm_capabilities_t</ref> &amp;</type>
          <declname>capabilities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="153" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="651" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a1e5a6eaafc83ba4ac56718fcded72d81" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetLastError</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>GetLastError</name>
        <qualifiedname>EspPwm::GetLastError</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="154" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="664" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1afc5c8ef1d74f8c5476083b635ead3dd5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::SetPeriodCallback</definition>
        <argsstring>(hf_pwm_period_callback_t callback, void *user_data=nullptr) noexcept</argsstring>
        <name>SetPeriodCallback</name>
        <qualifiedname>EspPwm::SetPeriodCallback</qualifiedname>
        <param>
          <type><ref refid="BasePwm_8h_1a945db454a91740660bc4e6a68e4c4136" kindref="member">hf_pwm_period_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="160" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="713" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a837573c392f4f9ada4130b30ca949218" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::SetFaultCallback</definition>
        <argsstring>(hf_pwm_fault_callback_t callback, void *user_data=nullptr) noexcept</argsstring>
        <name>SetFaultCallback</name>
        <qualifiedname>EspPwm::SetFaultCallback</qualifiedname>
        <param>
          <type><ref refid="BasePwm_8h_1a4862b3568e86bcc7bfa6db1b5e09a502" kindref="member">hf_pwm_fault_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="161" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="719" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a9fb67c853d1d7d042a047fbc22ae67c5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetHardwareFade</definition>
        <argsstring>(hf_channel_id_t channel_id, float target_duty_cycle, hf_u32_t fade_time_ms) noexcept</argsstring>
        <name>SetHardwareFade</name>
        <qualifiedname>EspPwm::SetHardwareFade</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>target_duty_cycle</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>fade_time_ms</declname>
        </param>
        <briefdescription>
<para>Set hardware fade for smooth duty cycle transitions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_duty_cycle</parametername>
</parameternamelist>
<parameterdescription>
<para>Target duty cycle (0.0 - 1.0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fade_time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Fade duration in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="174" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="729" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ab3d06a21a6eda6c081f660895d81bbb1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::StopHardwareFade</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept</argsstring>
        <name>StopHardwareFade</name>
        <qualifiedname>EspPwm::StopHardwareFade</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Stop hardware fade for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="182" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="795" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a7006101d1efdbfa70c2b65604ded7b85" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsFadeActive</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>IsFadeActive</name>
        <qualifiedname>EspPwm::IsFadeActive</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Check if hardware fade is active on a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if fade is active, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="189" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="827" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a1d72b937ecff8d06181a2a0e7c7cb314" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetIdleLevel</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u8_t idle_level) noexcept</argsstring>
        <name>SetIdleLevel</name>
        <qualifiedname>EspPwm::SetIdleLevel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>idle_level</declname>
        </param>
        <briefdescription>
<para>Set idle output level for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idle_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Idle level (0 or 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="197" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="837" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4437f86f7dfc052c9abd0cd633c10e71" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>hf_i8_t EspPwm::GetTimerAssignment</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>GetTimerAssignment</name>
        <qualifiedname>EspPwm::GetTimerAssignment</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get current timer assignment for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer number (0-3), or -1 if channel not configured </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="204" column="10" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="870" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a38358269d437372bb72805e76fc151ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ForceTimerAssignment</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u8_t timer_id) noexcept</argsstring>
        <name>ForceTimerAssignment</name>
        <qualifiedname>EspPwm::ForceTimerAssignment</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <briefdescription>
<para>Force a specific timer for a channel (advanced usage) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer identifier (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
<simplesect kind="note"><para>Use with caution - automatic timer allocation is usually better </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="213" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="880" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4ed824ce9d7576bfd1de62475813e4f7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::SetClockSource</definition>
        <argsstring>(hf_pwm_clock_source_t clock_source) noexcept</argsstring>
        <name>SetClockSource</name>
        <qualifiedname>EspPwm::SetClockSource</qualifiedname>
        <param>
          <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
          <declname>clock_source</declname>
        </param>
        <briefdescription>
<para>Set clock source for PWM timers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clock_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source selection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="220" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1097" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a75aae3253ba27acee3853a5156d31817" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="EspTypes__PWM_8h_1ad387f5c3904a1913133dc217dacf7a82" kindref="member">hf_pwm_clock_source_t</ref></type>
        <definition>hf_pwm_clock_source_t EspPwm::GetClockSource</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetClockSource</name>
        <qualifiedname>EspPwm::GetClockSource</qualifiedname>
        <briefdescription>
<para>Get current clock source. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current clock source </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="226" column="25" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1146" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a9ff4ddc5a06060a4b7194154a7d28617" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetStatistics</definition>
        <argsstring>(hf_pwm_statistics_t &amp;statistics) const noexcept override</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>EspPwm::GetStatistics</qualifiedname>
        <reimplements refid="classBasePwm_1a7802bfabb7ac9430764bce70cbf03758">GetStatistics</reimplements>
        <param>
          <type><ref refid="structhf__pwm__statistics__t" kindref="compound">hf_pwm_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get PWM statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Statistics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="233" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="674" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a81bc4616d9447ad43ec6d6c732049b59" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::GetDiagnostics</definition>
        <argsstring>(hf_pwm_diagnostics_t &amp;diagnostics) const noexcept override</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>EspPwm::GetDiagnostics</qualifiedname>
        <reimplements refid="classBasePwm_1a752841609c8cd458ee658579dd7f60c6">GetDiagnostics</reimplements>
        <param>
          <type><ref refid="structhf__pwm__diagnostics__t" kindref="compound">hf_pwm_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get PWM diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Diagnostics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="240" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="680" bodyend="707"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEspPwm_1a4fcc3a06cf3ba05f0f0524257d9ebf0d" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspPwm::IsValidChannelId</definition>
        <argsstring>(hf_channel_id_t channel_id) const noexcept</argsstring>
        <name>IsValidChannelId</name>
        <qualifiedname>EspPwm::IsValidChannelId</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Validate channel ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="298" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="927" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a29625b62c42798574de242f0245797fe" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>hf_i8_t EspPwm::FindOrAllocateTimer</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>FindOrAllocateTimer</name>
        <qualifiedname>EspPwm::FindOrAllocateTimer</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Find or allocate a timer for the given frequency/resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Required frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Required resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer ID (0-3), or -1 if no timer available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="306" column="10" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="931" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aecd0e9059cb48af8c52140ff2ac7cf8c" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::ReleaseTimerIfUnused</definition>
        <argsstring>(hf_u8_t timer_id) noexcept</argsstring>
        <name>ReleaseTimerIfUnused</name>
        <qualifiedname>EspPwm::ReleaseTimerIfUnused</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <briefdescription>
<para>Release a timer if no longer needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer to potentially release </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="312" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="955" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a4d99713191b108da00d8468cdcac9925" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ConfigurePlatformTimer</definition>
        <argsstring>(hf_u8_t timer_id, hf_u32_t frequency_hz, hf_u8_t resolution_bits) noexcept</argsstring>
        <name>ConfigurePlatformTimer</name>
        <qualifiedname>EspPwm::ConfigurePlatformTimer</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Configure platform timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="321" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="971" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a023bc718f864eb1e2b887c4de5013fa9" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::ConfigurePlatformChannel</definition>
        <argsstring>(hf_channel_id_t channel_id, const hf_pwm_channel_config_t &amp;config, hf_u8_t timer_id) noexcept</argsstring>
        <name>ConfigurePlatformChannel</name>
        <qualifiedname>EspPwm::ConfigurePlatformChannel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pwm__channel__config__t" kindref="compound">hf_pwm_channel_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>timer_id</declname>
        </param>
        <briefdescription>
<para>Configure platform channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timer_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Assigned timer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="331" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1008" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1aeb62a6be326c25671cc8780618902cd4" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::UpdatePlatformDuty</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_u32_t raw_duty_value) noexcept</argsstring>
        <name>UpdatePlatformDuty</name>
        <qualifiedname>EspPwm::UpdatePlatformDuty</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>raw_duty_value</declname>
        </param>
        <briefdescription>
<para>Update platform duty cycle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw_duty_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw duty value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="341" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1044" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6b4f2fafd78318e313ced753414f11d2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::SetChannelError</definition>
        <argsstring>(hf_channel_id_t channel_id, hf_pwm_err_t error) noexcept</argsstring>
        <name>SetChannelError</name>
        <qualifiedname>EspPwm::SetChannelError</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Set error for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Error to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="348" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1064" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1af0c248eb7f9a03bf23e992c4f75b46fc" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspPwm::HandleFadeComplete</definition>
        <argsstring>(hf_channel_id_t channel_id) noexcept</argsstring>
        <name>HandleFadeComplete</name>
        <qualifiedname>EspPwm::HandleFadeComplete</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Handle fade complete interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel that completed fade </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="360" column="8" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1079" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1abfd65e0509706ecefd541b8546596469" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::InitializeFadeFunctionality</definition>
        <argsstring>() noexcept</argsstring>
        <name>InitializeFadeFunctionality</name>
        <qualifiedname>EspPwm::InitializeFadeFunctionality</qualifiedname>
        <briefdescription>
<para>Initialize LEDC fade functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="366" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1151" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ae9e920ee5ebeced7fbe9dd8a80622605" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::InitializeTimers</definition>
        <argsstring>() noexcept</argsstring>
        <name>InitializeTimers</name>
        <qualifiedname>EspPwm::InitializeTimers</qualifiedname>
        <briefdescription>
<para>Initialize PWM timers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="372" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1177" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1ab8ee8dcae85c2b59b80dbc996522a7b2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::InitializeChannels</definition>
        <argsstring>() noexcept</argsstring>
        <name>InitializeChannels</name>
        <qualifiedname>EspPwm::InitializeChannels</qualifiedname>
        <briefdescription>
<para>Initialize PWM channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="378" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1189" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a9192ec3aa26d9acac2c0e6ec30c6bed1" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePwm_8h_1aba623d248c49dd773e0866ea7c6d7ac9" kindref="member">hf_pwm_err_t</ref></type>
        <definition>hf_pwm_err_t EspPwm::EnableFade</definition>
        <argsstring>() noexcept</argsstring>
        <name>EnableFade</name>
        <qualifiedname>EspPwm::EnableFade</qualifiedname>
        <briefdescription>
<para>Enable fade functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PWM_SUCCESS on success, error code on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="384" column="16" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1206" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="classEspPwm_1a6a19207d3326cb8f660670a6fa46035c" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspPwm::CalculateClockDivider</definition>
        <argsstring>(hf_u32_t frequency_hz, hf_u8_t resolution_bits) const noexcept</argsstring>
        <name>CalculateClockDivider</name>
        <qualifiedname>EspPwm::CalculateClockDivider</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>frequency_hz</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>resolution_bits</declname>
        </param>
        <briefdescription>
<para>Calculate optimal clock divider for frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Target frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock divider value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="392" column="12" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1167" bodyend="1175"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classEspPwm_1a48b2831d8333eeedead0a65ca3d5af08" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void IRAM_ATTR</type>
        <definition>void IRAM_ATTR EspPwm::InterruptHandler</definition>
        <argsstring>(hf_channel_id_t channel_id, void *user_data) noexcept</argsstring>
        <name>InterruptHandler</name>
        <qualifiedname>EspPwm::InterruptHandler</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Platform-specific interrupt handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel that generated interrupt </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPwm.h" line="354" column="25" bodyfile="src/mcu/esp32/EspPwm.cpp" bodystart="1072" bodyend="1077"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ESP32C6 PWM implementation using LEDC peripheral. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides PWM generation using the ESP32C6&apos;s built-in LEDC (LED Controller) peripheral which offers high-resolution PWM with hardware fade support.</para>
<para>ESP32C6 LEDC Features:<itemizedlist>
<listitem><para>8 independent PWM channels (0-7)</para>
</listitem><listitem><para>4 timer groups for different frequency domains (0-3)</para>
</listitem><listitem><para>Up to 14-bit resolution at high frequencies</para>
</listitem><listitem><para>Hardware fade functionality for smooth transitions</para>
</listitem><listitem><para>Interrupt support for period complete events</para>
</listitem><listitem><para>Low power mode support with sleep retention</para>
</listitem><listitem><para>Configurable clock sources (APB, XTAL, RC_FAST)</para>
</listitem><listitem><para>Channel-specific idle state configuration</para>
</listitem></itemizedlist>
</para>
<para>Key Design Features:<itemizedlist>
<listitem><para>Lazy initialization pattern (no hardware action until needed)</para>
</listitem><listitem><para>Thread-safe channel management with <ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></para>
</listitem><listitem><para>Automatic timer allocation and management</para>
</listitem><listitem><para>Hardware fault detection and recovery</para>
</listitem><listitem><para>Comprehensive error reporting</para>
</listitem><listitem><para>Support for synchronized updates across channels</para>
</listitem><listitem><para>Motor control oriented features (complementary outputs, deadtime)</para>
</listitem><listitem><para>Proper abstraction of ESP-IDF types </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BasePwm</label>
        <link refid="classBasePwm"/>
      </node>
      <node id="1">
        <label>EspPwm</label>
        <link refid="classEspPwm"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BasePwm</label>
        <link refid="classBasePwm"/>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>EspPwm</label>
        <link refid="classEspPwm"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>unit_config_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="4">
        <label>hf_pwm_diagnostics_t</label>
        <link refid="structhf__pwm__diagnostics__t"/>
      </node>
      <node id="3">
        <label>hf_pwm_statistics_t</label>
        <link refid="structhf__pwm__statistics__t"/>
      </node>
      <node id="6">
        <label>hf_pwm_unit_config_t</label>
        <link refid="structhf__pwm__unit__config__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspPwm.h" line="58" column="1" bodyfile="inc/mcu/esp32/EspPwm.h" bodystart="58" bodyend="420"/>
    <listofallmembers>
      <member refid="classEspPwm_1adb2698a4d9441132c4f9ba23a4dc4678" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>base_clock_hz_</name></member>
      <member refid="classBasePwm_1acd8c699abcc77062da2e26319dafcb0b" prot="protected" virt="non-virtual"><scope>EspPwm</scope><name>BasePwm</name></member>
      <member refid="classBasePwm_1aaf342e2451aa841522e07bc84c86a0a7" prot="protected" virt="non-virtual"><scope>EspPwm</scope><name>BasePwm</name></member>
      <member refid="classBasePwm_1a98809c8d18cca38549c10e1a8616021c" prot="protected" virt="non-virtual"><scope>EspPwm</scope><name>BasePwm</name></member>
      <member refid="classEspPwm_1a6a19207d3326cb8f660670a6fa46035c" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>CalculateClockDivider</name></member>
      <member refid="classEspPwm_1ab3341c72b5f1d413999dfc44fd8d80d2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>channels_</name></member>
      <member refid="classEspPwm_1ac4da347398a044e97ecfd586a65d4470" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>clock_source_</name></member>
      <member refid="classEspPwm_1afdfcaf9396528e32f648a403fd4fb075" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>complementary_pairs_</name></member>
      <member refid="classEspPwm_1a4dc265e040617403e718d4d28ff66e56" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>ConfigureChannel</name></member>
      <member refid="classEspPwm_1a023bc718f864eb1e2b887c4de5013fa9" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ConfigurePlatformChannel</name></member>
      <member refid="classEspPwm_1a4d99713191b108da00d8468cdcac9925" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ConfigurePlatformTimer</name></member>
      <member refid="classEspPwm_1a364fe8d01eaea5c9664f43c8c2bd2dcb" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>current_mode_</name></member>
      <member refid="classEspPwm_1a28c857a39efec61ad79770770fca878c" prot="public" virt="virtual"><scope>EspPwm</scope><name>Deinitialize</name></member>
      <member refid="classEspPwm_1a825cbef48b32048590def430ae108584" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>diagnostics_</name></member>
      <member refid="classEspPwm_1a8ff1addad40e1a81afa83a975b136e89" prot="public" virt="virtual"><scope>EspPwm</scope><name>DisableChannel</name></member>
      <member refid="classBasePwm_1a4cba17ff79ce18faaf8b402d2b212060" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>DutyCycleToRaw</name></member>
      <member refid="classEspPwm_1a3bd515c8685db84d5ff92a475063d663" prot="public" virt="virtual"><scope>EspPwm</scope><name>EnableChannel</name></member>
      <member refid="classEspPwm_1a9192ec3aa26d9acac2c0e6ec30c6bed1" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>EnableFade</name></member>
      <member refid="classBasePwm_1a8d407e46dff5f6c1f9ae2b7d68ea674c" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBasePwm_1aa084e73274f2f1d1d67cff793eda1956" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EnsureInitialized</name></member>
      <member refid="classEspPwm_1ae8e7d6e7f4ca605d4d4a361dc7806fd0" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EspPwm</name></member>
      <member refid="classEspPwm_1a50bc03f3329c9979766b1397d185b3b7" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EspPwm</name></member>
      <member refid="classEspPwm_1adda6756a1158a4cb37194c0690ac412f" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EspPwm</name></member>
      <member refid="classEspPwm_1a0523ebf8e643c95ad9b3ced6ff077fc7" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>EspPwm</name></member>
      <member refid="classEspPwm_1ab200d2d51794d3c3f6c18945132bc7e4" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>fade_functionality_installed_</name></member>
      <member refid="classEspPwm_1a4e45c5745c1c4ec770782168aa2ed8e7" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>fault_callback_</name></member>
      <member refid="classEspPwm_1a8a047a7b69a893276689f383c3e753f2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>fault_callback_user_data_</name></member>
      <member refid="classEspPwm_1a29625b62c42798574de242f0245797fe" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>FindOrAllocateTimer</name></member>
      <member refid="classEspPwm_1a38358269d437372bb72805e76fc151ed" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>ForceTimerAssignment</name></member>
      <member refid="classEspPwm_1af92695b9e07458d6280489d1ce3d8bdd" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetCapabilities</name></member>
      <member refid="classEspPwm_1a7cf9c46011b383820a588a9f153dfc52" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetChannelStatus</name></member>
      <member refid="classEspPwm_1a75aae3253ba27acee3853a5156d31817" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetClockSource</name></member>
      <member refid="classEspPwm_1a81bc4616d9447ad43ec6d6c732049b59" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetDiagnostics</name></member>
      <member refid="classEspPwm_1aeb3eda73cca25d298a3c7e3cbf133f03" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetDutyCycle</name></member>
      <member refid="classEspPwm_1a4687559ad8744ece1ef578796b21eb02" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetFrequency</name></member>
      <member refid="classEspPwm_1a1e5a6eaafc83ba4ac56718fcded72d81" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetLastError</name></member>
      <member refid="classEspPwm_1a620e13937a4213f8c44219272302a1a7" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetMode</name></member>
      <member refid="classEspPwm_1a9ff4ddc5a06060a4b7194154a7d28617" prot="public" virt="virtual"><scope>EspPwm</scope><name>GetStatistics</name></member>
      <member refid="classEspPwm_1a4437f86f7dfc052c9abd0cd633c10e71" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>GetTimerAssignment</name></member>
      <member refid="classEspPwm_1af0c248eb7f9a03bf23e992c4f75b46fc" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>HandleFadeComplete</name></member>
      <member refid="classEspPwm_1aedb8649c68e856258d6278bf399aab05" prot="public" virt="virtual"><scope>EspPwm</scope><name>Initialize</name></member>
      <member refid="classEspPwm_1ab8ee8dcae85c2b59b80dbc996522a7b2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InitializeChannels</name></member>
      <member refid="classEspPwm_1a62f5455c00a2bf6bee32c4edeb5b90d0" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>initialized_</name></member>
      <member refid="classEspPwm_1abfd65e0509706ecefd541b8546596469" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InitializeFadeFunctionality</name></member>
      <member refid="classEspPwm_1ae9e920ee5ebeced7fbe9dd8a80622605" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InitializeTimers</name></member>
      <member refid="classEspPwm_1a48b2831d8333eeedead0a65ca3d5af08" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>InterruptHandler</name></member>
      <member refid="classEspPwm_1a07c737787080435a486d47ad3c6803e9" prot="public" virt="virtual"><scope>EspPwm</scope><name>IsChannelEnabled</name></member>
      <member refid="classEspPwm_1a7006101d1efdbfa70c2b65604ded7b85" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsFadeActive</name></member>
      <member refid="classBasePwm_1ab75191deb5eec96c9d1f99c7c981467d" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsInitialized</name></member>
      <member refid="classEspPwm_1a4fcc3a06cf3ba05f0f0524257d9ebf0d" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>IsValidChannelId</name></member>
      <member refid="classBasePwm_1a352f6ddcf05ff0e0ed5c606098b24987" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsValidDutyCycle</name></member>
      <member refid="classBasePwm_1afab866dbce084437c35b3189f4e2952e" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>IsValidFrequency</name></member>
      <member refid="classEspPwm_1ad1b06777e74eedca37e5023ec23fc4ce" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>last_global_error_</name></member>
      <member refid="classEspPwm_1a1595caab94f2f77924d128115eab0be2" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_CHANNELS</name></member>
      <member refid="classEspPwm_1a9028b609b50b17802ce3b8da3ec39899" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_FREQUENCY</name></member>
      <member refid="classEspPwm_1a5ebf53a209f25236bafcb52fe0564d2a" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_RESOLUTION</name></member>
      <member refid="classEspPwm_1a625133f35c2449a53e048f63df138a89" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MAX_TIMERS</name></member>
      <member refid="classEspPwm_1af03e7350d2c885bbca5358ee3a183d10" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>MIN_FREQUENCY</name></member>
      <member refid="classEspPwm_1ae4c8b8e2abef78e240fc60451b6d793e" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>mutex_</name></member>
      <member refid="classEspPwm_1ae46e009618632e0db573912f71c94f9c" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classEspPwm_1aecba3137a0ead8abc259ab199648148b" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classBasePwm_1afa73dc6b8bc3028f3848e0f470dec48d" prot="protected" virt="non-virtual" ambiguityscope="BasePwm::"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classBasePwm_1a61a64fe3584550862c40531d576211b3" prot="protected" virt="non-virtual" ambiguityscope="BasePwm::"><scope>EspPwm</scope><name>operator=</name></member>
      <member refid="classEspPwm_1ab3100f917745b13991db11d087c5f4eb" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>period_callback_</name></member>
      <member refid="classEspPwm_1a9e6cdc4954e52e3159347cbbaa7fa073" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>period_callback_user_data_</name></member>
      <member refid="classBasePwm_1a4a6d82b9da888f91bd66e91b24121add" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>RawToDutyCycle</name></member>
      <member refid="classEspPwm_1aecd0e9059cb48af8c52140ff2ac7cf8c" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>ReleaseTimerIfUnused</name></member>
      <member refid="classBasePwm_1abef55c8bbd0a0fe57f2b21f286fc91dd" prot="public" virt="virtual"><scope>EspPwm</scope><name>ResetDiagnostics</name></member>
      <member refid="classBasePwm_1afb7176a7fbb46fa45a5a2521060ef9c7" prot="public" virt="virtual"><scope>EspPwm</scope><name>ResetStatistics</name></member>
      <member refid="classEspPwm_1a6b4f2fafd78318e313ced753414f11d2" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>SetChannelError</name></member>
      <member refid="classEspPwm_1a4ed824ce9d7576bfd1de62475813e4f7" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetClockSource</name></member>
      <member refid="classEspPwm_1a6c4cc0b3c19e7258a063b1900f9d291a" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetComplementaryOutput</name></member>
      <member refid="classEspPwm_1ae4170c3b4661c0d4b9646eb3d775c88c" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetDutyCycle</name></member>
      <member refid="classEspPwm_1a6bc8906d106762d5c9b1bcfd68ff0636" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetDutyCycleRaw</name></member>
      <member refid="classEspPwm_1a837573c392f4f9ada4130b30ca949218" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetFaultCallback</name></member>
      <member refid="classEspPwm_1a185108e6adbaaa23bcef4fbd8bda1b91" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetFrequency</name></member>
      <member refid="classEspPwm_1a9fb67c853d1d7d042a047fbc22ae67c5" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetHardwareFade</name></member>
      <member refid="classEspPwm_1a1d72b937ecff8d06181a2a0e7c7cb314" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetIdleLevel</name></member>
      <member refid="classEspPwm_1a848d38996b427bf51215bf0c0147a328" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetMode</name></member>
      <member refid="classEspPwm_1afc5c8ef1d74f8c5476083b635ead3dd5" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>SetPeriodCallback</name></member>
      <member refid="classEspPwm_1a6096fdc1d06345204c8062d2f86bd0c5" prot="public" virt="virtual"><scope>EspPwm</scope><name>SetPhaseShift</name></member>
      <member refid="classEspPwm_1a130153d9f4bdaee4219736cb248d78f6" prot="public" virt="virtual"><scope>EspPwm</scope><name>StartAll</name></member>
      <member refid="classEspPwm_1aefe4a2dfe1bccd062a299b1febb8aef8" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>statistics_</name></member>
      <member refid="classEspPwm_1a8be25ecab27ff61499a66535f303df2e" prot="public" virt="virtual"><scope>EspPwm</scope><name>StopAll</name></member>
      <member refid="classEspPwm_1ab3d06a21a6eda6c081f660895d81bbb1" prot="public" virt="non-virtual"><scope>EspPwm</scope><name>StopHardwareFade</name></member>
      <member refid="classEspPwm_1ad569f2cfbea460323ab5847717019d75" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>timers_</name></member>
      <member refid="classEspPwm_1ac2592dd4dbe1e99213a7d1d4c69e67fd" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>unit_config_</name></member>
      <member refid="classEspPwm_1a5681d5ceb230b6dc0a459f3ef9630b8b" prot="public" virt="virtual"><scope>EspPwm</scope><name>UpdateAll</name></member>
      <member refid="classEspPwm_1aeb62a6be326c25671cc8780618902cd4" prot="private" virt="non-virtual"><scope>EspPwm</scope><name>UpdatePlatformDuty</name></member>
      <member refid="classBasePwm_1a7481b15d121d631a59d1605780085d0e" prot="public" virt="virtual"><scope>EspPwm</scope><name>~BasePwm</name></member>
      <member refid="classEspPwm_1aaac5ce3f95ae8c5fb96312ad9a779ce6" prot="public" virt="virtual"><scope>EspPwm</scope><name>~EspPwm</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
