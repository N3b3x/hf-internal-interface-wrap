<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classMcuPio" kind="class" language="C++" prot="public">
    <compoundname>McuPio</compoundname>
    <basecompoundref refid="classBasePio" prot="public" virt="non-virtual">BasePio</basecompoundref>
    <includes refid="EspPio_8h" local="no">EspPio.h</includes>
    <innerclass refid="structMcuPio_1_1ChannelState" prot="private">McuPio::ChannelState</innerclass>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classMcuPio_1a821fcc491e2ebe4ab5a768283c21a903" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>constexpr hf_u8_t McuPio::MAX_CHANNELS</definition>
        <argsstring></argsstring>
        <name>MAX_CHANNELS</name>
        <qualifiedname>McuPio::MAX_CHANNELS</qualifiedname>
        <initializer>= <ref refid="EspTypes__PIO_8h_1affbcbc9b8c7595fc42442350149f1df8" kindref="member">HF_RMT_MAX_CHANNELS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="320" column="28" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a4557d1d6ef7971b3146d74c2a5800276" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t McuPio::MAX_SYMBOLS_PER_TRANSMISSION</definition>
        <argsstring></argsstring>
        <name>MAX_SYMBOLS_PER_TRANSMISSION</name>
        <qualifiedname>McuPio::MAX_SYMBOLS_PER_TRANSMISSION</qualifiedname>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="321" column="27" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a4ec0adc96e4104e3cf0d1f7919847c37" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t McuPio::DEFAULT_RESOLUTION_NS</definition>
        <argsstring></argsstring>
        <name>DEFAULT_RESOLUTION_NS</name>
        <qualifiedname>McuPio::DEFAULT_RESOLUTION_NS</qualifiedname>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="322" column="29" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a60338a19ad42d8fc4ecee8ea5eabfc11" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t McuPio::RMT_CLK_SRC_FREQ</definition>
        <argsstring></argsstring>
        <name>RMT_CLK_SRC_FREQ</name>
        <qualifiedname>McuPio::RMT_CLK_SRC_FREQ</qualifiedname>
        <initializer>= 80000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="323" column="29" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a83745413753c5222bcdbbc3b32644876" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* McuPio::TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <qualifiedname>McuPio::TAG</qualifiedname>
        <initializer>= &quot;McuPio&quot;</initializer>
        <briefdescription>
<para>Logging tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="395" column="31" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="395" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classMcuPio_1afef4749fcc95ba2360137f7046ffe26b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool McuPio::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>McuPio::initialized_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="325" column="8" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a3835b317767c09bc4d4995c231623fc1" prot="private" static="no" mutable="no">
        <type>std::array&lt; <ref refid="structMcuPio_1_1ChannelState" kindref="compound">ChannelState</ref>, <ref refid="classMcuPio_1a821fcc491e2ebe4ab5a768283c21a903" kindref="member">MAX_CHANNELS</ref> &gt;</type>
        <definition>std::array&lt;ChannelState, MAX_CHANNELS&gt; McuPio::channels_</definition>
        <argsstring></argsstring>
        <name>channels_</name>
        <qualifiedname>McuPio::channels_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="326" column="14" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1af26e443e7fcd40856b85434b56930786" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex McuPio::state_mutex_</definition>
        <argsstring></argsstring>
        <name>state_mutex_</name>
        <qualifiedname>McuPio::state_mutex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="327" column="21" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1aaf8d9302e85493e905c039ad206045d3" prot="private" static="no" mutable="no">
        <type><ref refid="BasePio_8h_1a14300d19cf2a911be9c80cf1a6ef3543" kindref="member">hf_pio_transmit_callback_t</ref></type>
        <definition>hf_pio_transmit_callback_t McuPio::transmit_callback_</definition>
        <argsstring></argsstring>
        <name>transmit_callback_</name>
        <qualifiedname>McuPio::transmit_callback_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="330" column="30" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a8ffb165aa26d4744deea85670d096054" prot="private" static="no" mutable="no">
        <type><ref refid="BasePio_8h_1aebe114829590afb8fa4c62aec4cfb304" kindref="member">hf_pio_receive_callback_t</ref></type>
        <definition>hf_pio_receive_callback_t McuPio::receive_callback_</definition>
        <argsstring></argsstring>
        <name>receive_callback_</name>
        <qualifiedname>McuPio::receive_callback_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="331" column="29" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a17382dd11fc8a5104bb30b2d4034971f" prot="private" static="no" mutable="no">
        <type><ref refid="BasePio_8h_1a32952d030efb5d85b32cc95995b27d0f" kindref="member">hf_pio_error_callback_t</ref></type>
        <definition>hf_pio_error_callback_t McuPio::error_callback_</definition>
        <argsstring></argsstring>
        <name>error_callback_</name>
        <qualifiedname>McuPio::error_callback_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="332" column="27" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMcuPio_1a7ba8f1bb7c10ab7e9fcb9e9bcc6088d2" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* McuPio::callback_user_data_</definition>
        <argsstring></argsstring>
        <name>callback_user_data_</name>
        <qualifiedname>McuPio::callback_user_data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="333" column="8" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="333" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classMcuPio_1a7d7468229888083cc7dafafaa68b33b5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>McuPio::McuPio</definition>
        <argsstring>() noexcept</argsstring>
        <name>McuPio</name>
        <qualifiedname>McuPio::McuPio</qualifiedname>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="115" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ac5d60ff6d313adf026dddbad186c89d4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>McuPio::~McuPio</definition>
        <argsstring>() noexcept override</argsstring>
        <name>~McuPio</name>
        <qualifiedname>McuPio::~McuPio</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="120" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a3502a32cecb4737ab9d05bc457070001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>McuPio::McuPio</definition>
        <argsstring>(const McuPio &amp;)=delete</argsstring>
        <name>McuPio</name>
        <qualifiedname>McuPio::McuPio</qualifiedname>
        <param>
          <type>const <ref refid="classMcuPio" kindref="compound">McuPio</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="123" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1aaf8e749f0d7e21e8f148a4fb122ec739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMcuPio" kindref="compound">McuPio</ref> &amp;</type>
        <definition>McuPio &amp; McuPio::operator=</definition>
        <argsstring>(const McuPio &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>McuPio::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classMcuPio" kindref="compound">McuPio</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="124" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a71462e26c290ac3d812e7cdef4098356" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>McuPio::McuPio</definition>
        <argsstring>(McuPio &amp;&amp;) noexcept=default</argsstring>
        <name>McuPio</name>
        <qualifiedname>McuPio::McuPio</qualifiedname>
        <param>
          <type><ref refid="classMcuPio" kindref="compound">McuPio</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="127" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a4629da876bb8a51f9d3f4bb82bdffd5d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classMcuPio" kindref="compound">McuPio</ref> &amp;</type>
        <definition>McuPio &amp; McuPio::operator=</definition>
        <argsstring>(McuPio &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>McuPio::operator=</qualifiedname>
        <param>
          <type><ref refid="classMcuPio" kindref="compound">McuPio</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="128" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ad5f3744152480e91d708174ec9123927" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::Initialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Initialize</name>
        <qualifiedname>McuPio::Initialize</qualifiedname>
        <reimplements refid="classBasePio_1ad8be51bcf2ec90f5ed1e78759d4604b4">Initialize</reimplements>
        <briefdescription>
<para>Initialize the PIO peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="133" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a63c9d1084cfa903e9104c4d993322cb3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::Deinitialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>McuPio::Deinitialize</qualifiedname>
        <reimplements refid="classBasePio_1aa7c07341b42d499b73cf2285cc965cb9">Deinitialize</reimplements>
        <briefdescription>
<para>Deinitialize the PIO peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="134" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a3a7d3e831fbe60fb9da7ce8677f14008" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ConfigureChannel</definition>
        <argsstring>(hf_u8_t channel_id, const hf_pio_channel_config_t &amp;config) noexcept override</argsstring>
        <name>ConfigureChannel</name>
        <qualifiedname>McuPio::ConfigureChannel</qualifiedname>
        <reimplements refid="classBasePio_1a1df2eedf08baddd6b49309e6bcd18153">ConfigureChannel</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pio__channel__config__t" kindref="compound">hf_pio_channel_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure a PIO channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="136" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1af85792ba88e2d5f1d4d8f154180c21a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::Transmit</definition>
        <argsstring>(hf_u8_t channel_id, const hf_pio_symbol_t *symbols, size_t symbol_count, bool wait_completion=false) noexcept override</argsstring>
        <name>Transmit</name>
        <qualifiedname>McuPio::Transmit</qualifiedname>
        <reimplements refid="classBasePio_1a06f76799267d04b7f55f2c525256387e">Transmit</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> *</type>
          <declname>symbols</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>symbol_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_completion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Transmit a sequence of symbols. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbols</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of symbols to transmit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of symbols in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_completion</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, block until transmission is complete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="139" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a61d61c38a73f77602b86c7d9a51cea6d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::StartReceive</definition>
        <argsstring>(hf_u8_t channel_id, hf_pio_symbol_t *buffer, size_t buffer_size, uint32_t timeout_us=0) noexcept override</argsstring>
        <name>StartReceive</name>
        <qualifiedname>McuPio::StartReceive</qualifiedname>
        <reimplements refid="classBasePio_1a29e9cb9272c91f47f805cf4b75bb8f6d">StartReceive</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout_us</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Start receiving symbols. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store received symbols </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in microseconds (0 = no timeout) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="142" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a4db163f6756247a73c8b373d1abcf912" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::StopReceive</definition>
        <argsstring>(hf_u8_t channel_id, size_t &amp;symbols_received) noexcept override</argsstring>
        <name>StopReceive</name>
        <qualifiedname>McuPio::StopReceive</qualifiedname>
        <reimplements refid="classBasePio_1a513502066c764271e131a3fa78648869">StopReceive</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>symbols_received</declname>
        </param>
        <briefdescription>
<para>Stop receiving and get the number of symbols received. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbols_received</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Number of symbols actually received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="144" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1acddca5a620498356a83b97f1387050c0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool McuPio::IsChannelBusy</definition>
        <argsstring>(hf_u8_t channel_id) const noexcept override</argsstring>
        <name>IsChannelBusy</name>
        <qualifiedname>McuPio::IsChannelBusy</qualifiedname>
        <reimplements refid="classBasePio_1a6f55697fbe482663cd9690f6570f5e26">IsChannelBusy</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Check if a channel is currently busy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if channel is busy, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="146" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a8e9948c9beffc5154320cdafc863cdfd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::GetChannelStatus</definition>
        <argsstring>(hf_u8_t channel_id, hf_pio_channel_status_t &amp;status) const noexcept override</argsstring>
        <name>GetChannelStatus</name>
        <qualifiedname>McuPio::GetChannelStatus</qualifiedname>
        <reimplements refid="classBasePio_1a9607dd3ef0e3e2025e240153a4827cd9">GetChannelStatus</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="structhf__pio__channel__status__t" kindref="compound">hf_pio_channel_status_t</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Get channel status information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Status information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="147" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a84000b1bdb584584fb07b86e6234c596" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::GetCapabilities</definition>
        <argsstring>(hf_pio_capabilities_t &amp;capabilities) const noexcept override</argsstring>
        <name>GetCapabilities</name>
        <qualifiedname>McuPio::GetCapabilities</qualifiedname>
        <reimplements refid="classBasePio_1ac20329f4cdc491c89e5b27d1fd806994">GetCapabilities</reimplements>
        <param>
          <type><ref refid="structhf__pio__capabilities__t" kindref="compound">hf_pio_capabilities_t</ref> &amp;</type>
          <declname>capabilities</declname>
        </param>
        <briefdescription>
<para>Get PIO capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capabilities</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Capability information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="149" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a1ff6d8271cb0c6142fd169c24f39de0e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>void</type>
        <definition>void McuPio::SetTransmitCallback</definition>
        <argsstring>(hf_pio_transmit_callback_t callback, void *user_data=nullptr) noexcept override</argsstring>
        <name>SetTransmitCallback</name>
        <qualifiedname>McuPio::SetTransmitCallback</qualifiedname>
        <reimplements refid="classBasePio_1a06d8c3d446ae8dbef439275c3f2e2ffd">SetTransmitCallback</reimplements>
        <param>
          <type><ref refid="BasePio_8h_1a14300d19cf2a911be9c80cf1a6ef3543" kindref="member">hf_pio_transmit_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Set callback for transmission complete events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="151" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a3a7ab9ec9e6b42e32e3f8aa9ca0857d9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>void</type>
        <definition>void McuPio::SetReceiveCallback</definition>
        <argsstring>(hf_pio_receive_callback_t callback, void *user_data=nullptr) noexcept override</argsstring>
        <name>SetReceiveCallback</name>
        <qualifiedname>McuPio::SetReceiveCallback</qualifiedname>
        <reimplements refid="classBasePio_1a1c8d1c930902ac0d1691b1d90ac56c73">SetReceiveCallback</reimplements>
        <param>
          <type><ref refid="BasePio_8h_1aebe114829590afb8fa4c62aec4cfb304" kindref="member">hf_pio_receive_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Set callback for reception complete events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="153" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a0bd954ebe830cb787aa2826129e18a8a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>void</type>
        <definition>void McuPio::SetErrorCallback</definition>
        <argsstring>(hf_pio_error_callback_t callback, void *user_data=nullptr) noexcept override</argsstring>
        <name>SetErrorCallback</name>
        <qualifiedname>McuPio::SetErrorCallback</qualifiedname>
        <reimplements refid="classBasePio_1a07f5599654b625bab1f1421c81d037e9">SetErrorCallback</reimplements>
        <param>
          <type><ref refid="BasePio_8h_1a32952d030efb5d85b32cc95995b27d0f" kindref="member">hf_pio_error_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Set callback for error events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="155" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a0323b10d162b327b4b560ca38459abcb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>void</type>
        <definition>void McuPio::ClearCallbacks</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ClearCallbacks</name>
        <qualifiedname>McuPio::ClearCallbacks</qualifiedname>
        <reimplements refid="classBasePio_1a3bf2d029ab95172e27366fee39b03ca6">ClearCallbacks</reimplements>
        <briefdescription>
<para>Clear all callbacks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="157" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a1cab0aa8cb382a87b5d0d10b687c5a48" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::GetStatistics</definition>
        <argsstring>(hf_pio_statistics_t &amp;statistics) const noexcept override</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>McuPio::GetStatistics</qualifiedname>
        <reimplements refid="classBasePio_1ad52bc31fe181cb7b77ea1e9304f5efe4">GetStatistics</reimplements>
        <param>
          <type><ref refid="structhf__pio__statistics__t" kindref="compound">hf_pio_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get PIO operation statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to statistics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48ea60bac135720fbca0f9b2eec92f20495b" kindref="member">hf_pio_err_t::PIO_SUCCESS</ref> if successful, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="164" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1aef058145b1926f58424a7cc4735b1df6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::GetDiagnostics</definition>
        <argsstring>(hf_pio_diagnostics_t &amp;diagnostics) const noexcept override</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>McuPio::GetDiagnostics</qualifiedname>
        <reimplements refid="classBasePio_1a7217471fac0da668a1ddefcb161bd68a">GetDiagnostics</reimplements>
        <param>
          <type><ref refid="structhf__pio__diagnostics__t" kindref="compound">hf_pio_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get PIO diagnostic information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to diagnostics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48ea60bac135720fbca0f9b2eec92f20495b" kindref="member">hf_pio_err_t::PIO_SUCCESS</ref> if successful, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="171" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a1014ed59e50b1f82e0c27a10e8cd3813" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::TransmitRawRmtSymbols</definition>
        <argsstring>(hf_u8_t channel_id, const rmt_symbol_word_t *rmt_symbols, size_t symbol_count, bool wait_completion=false) noexcept</argsstring>
        <name>TransmitRawRmtSymbols</name>
        <qualifiedname>McuPio::TransmitRawRmtSymbols</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const rmt_symbol_word_t *</type>
          <declname>rmt_symbols</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>symbol_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait_completion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Transmit raw RMT symbols directly (bypassing <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> conversion) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rmt_symbols</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of raw RMT symbols </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of RMT symbols </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_completion</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, block until transmission is complete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
<simplesect kind="note"><para>This provides direct RMT access similar to rmt_wrapper.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="187" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ac8359b099a923cb942e2cee8a7567a6f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ReceiveRawRmtSymbols</definition>
        <argsstring>(hf_u8_t channel_id, rmt_symbol_word_t *rmt_buffer, size_t buffer_size, size_t &amp;symbols_received, uint32_t timeout_us=10000) noexcept</argsstring>
        <name>ReceiveRawRmtSymbols</name>
        <qualifiedname>McuPio::ReceiveRawRmtSymbols</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>rmt_symbol_word_t *</type>
          <declname>rmt_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>symbols_received</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout_us</declname>
          <defval>10000</defval>
        </param>
        <briefdescription>
<para>Receive raw RMT symbols directly (bypassing <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> conversion) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rmt_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store raw RMT symbols </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buffer in RMT symbols </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbols_received</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Number of symbols actually received </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
<simplesect kind="note"><para>This provides direct RMT access similar to rmt_wrapper.hpp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="200" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a7987765dcf497cd8f4f537ebb69e2a09" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ConfigureAdvancedRmt</definition>
        <argsstring>(hf_u8_t channel_id, size_t memory_blocks=64, bool enable_dma=false, uint32_t queue_depth=4) noexcept</argsstring>
        <name>ConfigureAdvancedRmt</name>
        <qualifiedname>McuPio::ConfigureAdvancedRmt</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>memory_blocks</declname>
          <defval>64</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_dma</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_depth</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
<para>Configure advanced RMT channel settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of memory blocks (symbols) to allocate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_dma</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable DMA mode for large transfers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit queue depth </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="211" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a235047a491e67ab2fc2ae56634cbc023" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ConfigureCarrier</definition>
        <argsstring>(hf_u8_t channel_id, uint32_t carrier_freq_hz, float duty_cycle) noexcept</argsstring>
        <name>ConfigureCarrier</name>
        <qualifiedname>McuPio::ConfigureCarrier</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>carrier_freq_hz</declname>
        </param>
        <param>
          <type>float</type>
          <declname>duty_cycle</declname>
        </param>
        <briefdescription>
<para>Configure carrier modulation for IR protocols. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>carrier_freq_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Carrier frequency in Hz (0 to disable) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duty_cycle</parametername>
</parameternamelist>
<parameterdescription>
<para>Carrier duty cycle (0.0 to 1.0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="225" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ac31e87cee9ef3c57c752a3e5541b32a9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::EnableLoopback</definition>
        <argsstring>(hf_u8_t channel_id, bool enable) noexcept</argsstring>
        <name>EnableLoopback</name>
        <qualifiedname>McuPio::EnableLoopback</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable/disable loopback mode for testing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable loopback, false to disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="234" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a7aba05eee26491524bdf77097dc776df" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t McuPio::GetMaxSymbolCount</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetMaxSymbolCount</name>
        <qualifiedname>McuPio::GetMaxSymbolCount</qualifiedname>
        <briefdescription>
<para>Get the maximum number of symbols that can be transmitted in one operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum symbol count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="240" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1afb1b8ede1c30e3e23b740b12f5108a8f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool McuPio::ValidatePioSystem</definition>
        <argsstring>() noexcept</argsstring>
        <name>ValidatePioSystem</name>
        <qualifiedname>McuPio::ValidatePioSystem</qualifiedname>
        <briefdescription>
<para>Comprehensive PIO system validation and performance test. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if all systems pass validation, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="246" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ab2cd8eac5da2ac94d8f10fa06afa6cc6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ConfigureEncoder</definition>
        <argsstring>(hf_u8_t channel_id, const hf_pio_symbol_t &amp;bit0_config, const hf_pio_symbol_t &amp;bit1_config) noexcept</argsstring>
        <name>ConfigureEncoder</name>
        <qualifiedname>McuPio::ConfigureEncoder</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> &amp;</type>
          <declname>bit0_config</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> &amp;</type>
          <declname>bit1_config</declname>
        </param>
        <briefdescription>
<para>Configure RMT encoder for specific protocol. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit0_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration for bit 0 encoding </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit1_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration for bit 1 encoding </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="255" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ae38ee47cce9166ab479b58198c4a2194" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::SetIdleLevel</definition>
        <argsstring>(hf_u8_t channel_id, bool idle_level) noexcept</argsstring>
        <name>SetIdleLevel</name>
        <qualifiedname>McuPio::SetIdleLevel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>idle_level</declname>
        </param>
        <briefdescription>
<para>Set RMT channel idle output level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idle_level</parametername>
</parameternamelist>
<parameterdescription>
<para>true for high, false for low </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="264" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a1564e4f1e62b381ad3553dcc6a35e2db" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::GetChannelStatistics</definition>
        <argsstring>(hf_u8_t channel_id, hf_pio_channel_statistics_t &amp;stats) const noexcept</argsstring>
        <name>GetChannelStatistics</name>
        <qualifiedname>McuPio::GetChannelStatistics</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="structhf__pio__channel__statistics__t" kindref="compound">hf_pio_channel_statistics_t</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Get current RMT channel statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] Channel statistics structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="272" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1aa1f971dde2b16aec4c1c40d16bc11ffb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ResetChannelStatistics</definition>
        <argsstring>(hf_u8_t channel_id) noexcept</argsstring>
        <name>ResetChannelStatistics</name>
        <qualifiedname>McuPio::ResetChannelStatistics</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Reset channel statistics counters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code indicating success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="280" column="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classMcuPio_1aa24ec23c2c6af6099fec4093c4953c7d" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool McuPio::IsValidChannelId</definition>
        <argsstring>(hf_u8_t channel_id) const noexcept</argsstring>
        <name>IsValidChannelId</name>
        <qualifiedname>McuPio::IsValidChannelId</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Validate channel ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="342" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a0e612f0de34c1fa14443f58d02b10431" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ConvertToRmtSymbols</definition>
        <argsstring>(const hf_pio_symbol_t *symbols, size_t symbol_count, rmt_symbol_word_t *rmt_symbols, size_t &amp;rmt_symbol_count) noexcept</argsstring>
        <name>ConvertToRmtSymbols</name>
        <qualifiedname>McuPio::ConvertToRmtSymbols</qualifiedname>
        <param>
          <type>const <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> *</type>
          <declname>symbols</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>symbol_count</declname>
        </param>
        <param>
          <type>rmt_symbol_word_t *</type>
          <declname>rmt_symbols</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>rmt_symbol_count</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> array to RMT symbol format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="346" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a8806ff16836457cc95cc5425e27602db" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ConvertFromRmtSymbols</definition>
        <argsstring>(const rmt_symbol_word_t *rmt_symbols, size_t rmt_symbol_count, hf_pio_symbol_t *symbols, size_t &amp;symbol_count) noexcept</argsstring>
        <name>ConvertFromRmtSymbols</name>
        <qualifiedname>McuPio::ConvertFromRmtSymbols</qualifiedname>
        <param>
          <type>const rmt_symbol_word_t *</type>
          <declname>rmt_symbols</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>rmt_symbol_count</declname>
        </param>
        <param>
          <type><ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> *</type>
          <declname>symbols</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>symbol_count</declname>
        </param>
        <briefdescription>
<para>Convert RMT symbols back to <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="353" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a29896f99006a22e2e683189bac751905" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::InitializeChannel</definition>
        <argsstring>(hf_u8_t channel_id) noexcept</argsstring>
        <name>InitializeChannel</name>
        <qualifiedname>McuPio::InitializeChannel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Initialize a specific channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="367" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a259d53eb9ab18f330c1814359ef9823f" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::DeinitializeChannel</definition>
        <argsstring>(hf_u8_t channel_id) noexcept</argsstring>
        <name>DeinitializeChannel</name>
        <qualifiedname>McuPio::DeinitializeChannel</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Deinitialize a specific channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="372" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a67fba8ef3102ac5a2f263a58a7f40927" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
        <definition>hf_pio_err_t McuPio::ValidateSymbols</definition>
        <argsstring>(const hf_pio_symbol_t *symbols, size_t symbol_count) const noexcept</argsstring>
        <name>ValidateSymbols</name>
        <qualifiedname>McuPio::ValidateSymbols</qualifiedname>
        <param>
          <type>const <ref refid="structhf__pio__symbol__t" kindref="compound">hf_pio_symbol_t</ref> *</type>
          <declname>symbols</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>symbol_count</declname>
        </param>
        <briefdescription>
<para>Validate symbol array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="377" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ab68071fc1cd3d04056593cbec19d98a2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void McuPio::UpdateChannelStatus</definition>
        <argsstring>(hf_u8_t channel_id) noexcept</argsstring>
        <name>UpdateChannelStatus</name>
        <qualifiedname>McuPio::UpdateChannelStatus</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Update channel status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="382" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1a8b8fd42cb8208732addd96438adbc3a7" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void McuPio::InvokeErrorCallback</definition>
        <argsstring>(hf_u8_t channel_id, hf_pio_err_t error) noexcept</argsstring>
        <name>InvokeErrorCallback</name>
        <qualifiedname>McuPio::InvokeErrorCallback</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="BasePio_8h_1ade576ec4d2f6bb2cc4e011ee31e1d48e" kindref="member">hf_pio_err_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Invoke error callback if set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="387" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classMcuPio_1ac0853f52f495fe15dcf89617dda15aed" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t McuPio::CalculateClockDivider</definition>
        <argsstring>(uint32_t resolution_ns) const noexcept</argsstring>
        <name>CalculateClockDivider</name>
        <qualifiedname>McuPio::CalculateClockDivider</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>resolution_ns</declname>
        </param>
        <briefdescription>
<para>Calculate RMT clock divider for desired resolution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspPio.h" line="392" column="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ESP32C6 RMT-based Programmable IO Channel implementation with advanced ESP-IDF v5.5+ features. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements the <ref refid="classBasePio" kindref="compound">BasePio</ref> interface using the ESP32C6&apos;s advanced RMT peripheral with full ESP-IDF v5.5+ feature support. The RMT peripheral is specifically designed for generating and receiving infrared remote control signals, but it&apos;s versatile enough to handle many types of precisely-timed digital protocols with hardware acceleration.</para>
<para><bold>Key ESP32C6 RMT features utilized:</bold><itemizedlist>
<listitem><para>Hardware symbol encoding with configurable timing and DMA support</para>
</listitem><listitem><para>Built-in carrier generation for IR protocols with precise frequency control</para>
</listitem><listitem><para>Configurable idle levels and end markers with hardware validation</para>
</listitem><listitem><para>Interrupt-driven operation with minimal CPU overhead and advanced callbacks</para>
</listitem><listitem><para>Support for both transmission and reception with hardware filtering</para>
</listitem><listitem><para>Advanced power management and ULP integration capabilities</para>
</listitem><listitem><para>Hardware oversampling and digital filtering for noise reduction</para>
</listitem><listitem><para>Multi-channel synchronization and triggered sampling support</para>
</listitem></itemizedlist>
</para>
<para><bold>Advanced ESP-IDF v5.5+ Features:</bold><itemizedlist>
<listitem><para>DMA-accelerated transfers for high-throughput applications</para>
</listitem><listitem><para>Hardware-based digital filters for signal conditioning</para>
</listitem><listitem><para>Advanced calibration and drift compensation mechanisms</para>
</listitem><listitem><para>Real-time threshold monitoring with interrupt notifications</para>
</listitem><listitem><para>Zero-crossing detection for AC signal analysis</para>
</listitem><listitem><para>Adaptive power management for battery-powered applications</para>
</listitem></itemizedlist>
</para>
<para><bold>Robustness Features:</bold><itemizedlist>
<listitem><para>True lazy initialization (no hardware access until needed)</para>
</listitem><listitem><para>Comprehensive error handling and diagnostics</para>
</listitem><listitem><para>Thread-safe operation with mutex protection</para>
</listitem><listitem><para>Resource leak prevention with RAII principles</para>
</listitem><listitem><para>Extensive validation and bounds checking</para>
</listitem></itemizedlist>
</para>
<para><bold>Limitations:</bold><itemizedlist>
<listitem><para>Maximum symbol duration depends on RMT clock configuration</para>
</listitem><listitem><para>Symbol buffer size is limited by available memory</para>
</listitem><listitem><para>Some advanced features may not be available on all ESP32 variants</para>
</listitem><listitem><para>DMA mode requires continuous memory allocation</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This implementation prioritizes performance, accuracy, and resource efficiency. </para>
</simplesect>
<simplesect kind="note"><para>All advanced features are gracefully degraded on older ESP-IDF versions. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BasePio</label>
        <link refid="classBasePio"/>
      </node>
      <node id="1">
        <label>McuPio</label>
        <link refid="classMcuPio"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BasePio</label>
        <link refid="classBasePio"/>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>McuPio</label>
        <link refid="classMcuPio"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>state_mutex_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="4">
        <label>hf_pio_diagnostics_t</label>
        <link refid="structhf__pio__diagnostics__t"/>
      </node>
      <node id="3">
        <label>hf_pio_statistics_t</label>
        <link refid="structhf__pio__statistics__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspPio.h" line="110" column="1" bodyfile="inc/mcu/esp32/EspPio.h" bodystart="110" bodyend="396"/>
    <listofallmembers>
      <member refid="classBasePio_1a9d3dfc822fc2be86f8184af210aa6703" prot="public" virt="non-virtual"><scope>McuPio</scope><name>BasePio</name></member>
      <member refid="classBasePio_1abae3c0afca5d357c8d481c97b27d38f4" prot="public" virt="non-virtual"><scope>McuPio</scope><name>BasePio</name></member>
      <member refid="classBasePio_1ad904e700f0e2693fbbe9b59bed2d3d7a" prot="protected" virt="non-virtual"><scope>McuPio</scope><name>BasePio</name></member>
      <member refid="classMcuPio_1ac0853f52f495fe15dcf89617dda15aed" prot="private" virt="non-virtual"><scope>McuPio</scope><name>CalculateClockDivider</name></member>
      <member refid="classMcuPio_1a7ba8f1bb7c10ab7e9fcb9e9bcc6088d2" prot="private" virt="non-virtual"><scope>McuPio</scope><name>callback_user_data_</name></member>
      <member refid="classMcuPio_1a3835b317767c09bc4d4995c231623fc1" prot="private" virt="non-virtual"><scope>McuPio</scope><name>channels_</name></member>
      <member refid="classMcuPio_1a0323b10d162b327b4b560ca38459abcb" prot="public" virt="virtual"><scope>McuPio</scope><name>ClearCallbacks</name></member>
      <member refid="classMcuPio_1a7987765dcf497cd8f4f537ebb69e2a09" prot="public" virt="non-virtual"><scope>McuPio</scope><name>ConfigureAdvancedRmt</name></member>
      <member refid="classMcuPio_1a235047a491e67ab2fc2ae56634cbc023" prot="public" virt="non-virtual"><scope>McuPio</scope><name>ConfigureCarrier</name></member>
      <member refid="classMcuPio_1a3a7d3e831fbe60fb9da7ce8677f14008" prot="public" virt="virtual"><scope>McuPio</scope><name>ConfigureChannel</name></member>
      <member refid="classMcuPio_1ab2cd8eac5da2ac94d8f10fa06afa6cc6" prot="public" virt="non-virtual"><scope>McuPio</scope><name>ConfigureEncoder</name></member>
      <member refid="classMcuPio_1a8806ff16836457cc95cc5425e27602db" prot="private" virt="non-virtual"><scope>McuPio</scope><name>ConvertFromRmtSymbols</name></member>
      <member refid="classMcuPio_1a0e612f0de34c1fa14443f58d02b10431" prot="private" virt="non-virtual"><scope>McuPio</scope><name>ConvertToRmtSymbols</name></member>
      <member refid="classMcuPio_1a4ec0adc96e4104e3cf0d1f7919847c37" prot="private" virt="non-virtual"><scope>McuPio</scope><name>DEFAULT_RESOLUTION_NS</name></member>
      <member refid="classMcuPio_1a63c9d1084cfa903e9104c4d993322cb3" prot="public" virt="virtual"><scope>McuPio</scope><name>Deinitialize</name></member>
      <member refid="classMcuPio_1a259d53eb9ab18f330c1814359ef9823f" prot="private" virt="non-virtual"><scope>McuPio</scope><name>DeinitializeChannel</name></member>
      <member refid="classBasePio_1a406b6488d939e7253a014910f7f152c0" prot="protected" virt="non-virtual"><scope>McuPio</scope><name>diagnostics_</name></member>
      <member refid="classMcuPio_1ac31e87cee9ef3c57c752a3e5541b32a9" prot="public" virt="non-virtual"><scope>McuPio</scope><name>EnableLoopback</name></member>
      <member refid="classBasePio_1a53a078ae16674075bcd7ed8355227b96" prot="public" virt="non-virtual"><scope>McuPio</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBasePio_1a28949d17756d23eb8fdaf1bd437b7b4b" prot="public" virt="non-virtual"><scope>McuPio</scope><name>EnsureInitialized</name></member>
      <member refid="classMcuPio_1a17382dd11fc8a5104bb30b2d4034971f" prot="private" virt="non-virtual"><scope>McuPio</scope><name>error_callback_</name></member>
      <member refid="classMcuPio_1a84000b1bdb584584fb07b86e6234c596" prot="public" virt="virtual"><scope>McuPio</scope><name>GetCapabilities</name></member>
      <member refid="classMcuPio_1a1564e4f1e62b381ad3553dcc6a35e2db" prot="public" virt="non-virtual"><scope>McuPio</scope><name>GetChannelStatistics</name></member>
      <member refid="classMcuPio_1a8e9948c9beffc5154320cdafc863cdfd" prot="public" virt="virtual"><scope>McuPio</scope><name>GetChannelStatus</name></member>
      <member refid="classMcuPio_1aef058145b1926f58424a7cc4735b1df6" prot="public" virt="virtual"><scope>McuPio</scope><name>GetDiagnostics</name></member>
      <member refid="classMcuPio_1a7aba05eee26491524bdf77097dc776df" prot="public" virt="non-virtual"><scope>McuPio</scope><name>GetMaxSymbolCount</name></member>
      <member refid="classMcuPio_1a1cab0aa8cb382a87b5d0d10b687c5a48" prot="public" virt="virtual"><scope>McuPio</scope><name>GetStatistics</name></member>
      <member refid="classMcuPio_1ad5f3744152480e91d708174ec9123927" prot="public" virt="virtual"><scope>McuPio</scope><name>Initialize</name></member>
      <member refid="classMcuPio_1a29896f99006a22e2e683189bac751905" prot="private" virt="non-virtual"><scope>McuPio</scope><name>InitializeChannel</name></member>
      <member refid="classMcuPio_1afef4749fcc95ba2360137f7046ffe26b" prot="private" virt="non-virtual"><scope>McuPio</scope><name>initialized_</name></member>
      <member refid="classMcuPio_1a8b8fd42cb8208732addd96438adbc3a7" prot="private" virt="non-virtual"><scope>McuPio</scope><name>InvokeErrorCallback</name></member>
      <member refid="classMcuPio_1acddca5a620498356a83b97f1387050c0" prot="public" virt="virtual"><scope>McuPio</scope><name>IsChannelBusy</name></member>
      <member refid="classBasePio_1aa8c8aea41f16846d52410e3a0ade354e" prot="public" virt="non-virtual"><scope>McuPio</scope><name>IsInitialized</name></member>
      <member refid="classMcuPio_1aa24ec23c2c6af6099fec4093c4953c7d" prot="private" virt="non-virtual"><scope>McuPio</scope><name>IsValidChannelId</name></member>
      <member refid="classMcuPio_1a821fcc491e2ebe4ab5a768283c21a903" prot="private" virt="non-virtual"><scope>McuPio</scope><name>MAX_CHANNELS</name></member>
      <member refid="classMcuPio_1a4557d1d6ef7971b3146d74c2a5800276" prot="private" virt="non-virtual"><scope>McuPio</scope><name>MAX_SYMBOLS_PER_TRANSMISSION</name></member>
      <member refid="classMcuPio_1a7d7468229888083cc7dafafaa68b33b5" prot="public" virt="non-virtual"><scope>McuPio</scope><name>McuPio</name></member>
      <member refid="classMcuPio_1a3502a32cecb4737ab9d05bc457070001" prot="public" virt="non-virtual"><scope>McuPio</scope><name>McuPio</name></member>
      <member refid="classMcuPio_1a71462e26c290ac3d812e7cdef4098356" prot="public" virt="non-virtual"><scope>McuPio</scope><name>McuPio</name></member>
      <member refid="classMcuPio_1aaf8e749f0d7e21e8f148a4fb122ec739" prot="public" virt="non-virtual"><scope>McuPio</scope><name>operator=</name></member>
      <member refid="classMcuPio_1a4629da876bb8a51f9d3f4bb82bdffd5d" prot="public" virt="non-virtual"><scope>McuPio</scope><name>operator=</name></member>
      <member refid="classBasePio_1aefb1a462906e0cc9b444d453391b0134" prot="public" virt="non-virtual" ambiguityscope="BasePio::"><scope>McuPio</scope><name>operator=</name></member>
      <member refid="classBasePio_1a61cc18335b235d0c6f0b69642a783435" prot="public" virt="non-virtual" ambiguityscope="BasePio::"><scope>McuPio</scope><name>operator=</name></member>
      <member refid="classMcuPio_1a8ffb165aa26d4744deea85670d096054" prot="private" virt="non-virtual"><scope>McuPio</scope><name>receive_callback_</name></member>
      <member refid="classMcuPio_1ac8359b099a923cb942e2cee8a7567a6f" prot="public" virt="non-virtual"><scope>McuPio</scope><name>ReceiveRawRmtSymbols</name></member>
      <member refid="classMcuPio_1aa1f971dde2b16aec4c1c40d16bc11ffb" prot="public" virt="non-virtual"><scope>McuPio</scope><name>ResetChannelStatistics</name></member>
      <member refid="classBasePio_1a8d13978e9ffdc3a25ba1021e636d657f" prot="public" virt="virtual"><scope>McuPio</scope><name>ResetDiagnostics</name></member>
      <member refid="classBasePio_1abb16fcb7c34065f552eefebd0eb7d99a" prot="public" virt="virtual"><scope>McuPio</scope><name>ResetStatistics</name></member>
      <member refid="classMcuPio_1a60338a19ad42d8fc4ecee8ea5eabfc11" prot="private" virt="non-virtual"><scope>McuPio</scope><name>RMT_CLK_SRC_FREQ</name></member>
      <member refid="classMcuPio_1a0bd954ebe830cb787aa2826129e18a8a" prot="public" virt="virtual"><scope>McuPio</scope><name>SetErrorCallback</name></member>
      <member refid="classMcuPio_1ae38ee47cce9166ab479b58198c4a2194" prot="public" virt="non-virtual"><scope>McuPio</scope><name>SetIdleLevel</name></member>
      <member refid="classMcuPio_1a3a7ab9ec9e6b42e32e3f8aa9ca0857d9" prot="public" virt="virtual"><scope>McuPio</scope><name>SetReceiveCallback</name></member>
      <member refid="classMcuPio_1a1ff6d8271cb0c6142fd169c24f39de0e" prot="public" virt="virtual"><scope>McuPio</scope><name>SetTransmitCallback</name></member>
      <member refid="classMcuPio_1a61d61c38a73f77602b86c7d9a51cea6d" prot="public" virt="virtual"><scope>McuPio</scope><name>StartReceive</name></member>
      <member refid="classMcuPio_1af26e443e7fcd40856b85434b56930786" prot="private" virt="non-virtual"><scope>McuPio</scope><name>state_mutex_</name></member>
      <member refid="classBasePio_1a4391997ece89f854a236dbe006748369" prot="protected" virt="non-virtual"><scope>McuPio</scope><name>statistics_</name></member>
      <member refid="classMcuPio_1a4db163f6756247a73c8b373d1abcf912" prot="public" virt="virtual"><scope>McuPio</scope><name>StopReceive</name></member>
      <member refid="classMcuPio_1a83745413753c5222bcdbbc3b32644876" prot="private" virt="non-virtual"><scope>McuPio</scope><name>TAG</name></member>
      <member refid="classMcuPio_1af85792ba88e2d5f1d4d8f154180c21a0" prot="public" virt="virtual"><scope>McuPio</scope><name>Transmit</name></member>
      <member refid="classMcuPio_1aaf8d9302e85493e905c039ad206045d3" prot="private" virt="non-virtual"><scope>McuPio</scope><name>transmit_callback_</name></member>
      <member refid="classMcuPio_1a1014ed59e50b1f82e0c27a10e8cd3813" prot="public" virt="non-virtual"><scope>McuPio</scope><name>TransmitRawRmtSymbols</name></member>
      <member refid="classMcuPio_1ab68071fc1cd3d04056593cbec19d98a2" prot="private" virt="non-virtual"><scope>McuPio</scope><name>UpdateChannelStatus</name></member>
      <member refid="classMcuPio_1afb1b8ede1c30e3e23b740b12f5108a8f" prot="public" virt="non-virtual"><scope>McuPio</scope><name>ValidatePioSystem</name></member>
      <member refid="classMcuPio_1a67fba8ef3102ac5a2f263a58a7f40927" prot="private" virt="non-virtual"><scope>McuPio</scope><name>ValidateSymbols</name></member>
      <member refid="classBasePio_1a81ed01134b7a35294779050ef94ed204" prot="public" virt="virtual"><scope>McuPio</scope><name>~BasePio</name></member>
      <member refid="classMcuPio_1ac5d60ff6d313adf026dddbad186c89d4" prot="public" virt="non-virtual"><scope>McuPio</scope><name>~McuPio</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
