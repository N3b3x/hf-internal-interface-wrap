<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classEspI2cBus" kind="class" language="C++" prot="public">
    <compoundname>EspI2cBus</compoundname>
    <includes refid="EspI2c_8h" local="no">EspI2c.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspI2cBus_1af4c723ed3eaa9cc7cc0d661da8a1e38c" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref></type>
        <definition>hf_i2c_master_bus_config_t EspI2cBus::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>EspI2cBus::config_</qualifiedname>
        <briefdescription>
<para>Bus configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="390" column="30" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cBus_1a7f7964f5265bac35588a90ab8acb5d43" prot="private" static="no" mutable="no">
        <type>i2c_master_bus_handle_t</type>
        <definition>i2c_master_bus_handle_t EspI2cBus::bus_handle_</definition>
        <argsstring></argsstring>
        <name>bus_handle_</name>
        <qualifiedname>EspI2cBus::bus_handle_</qualifiedname>
        <briefdescription>
<para>ESP-IDF bus handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="391" column="27" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cBus_1af31a98abe753b202bfe5000b6d16240d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspI2cBus::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>EspI2cBus::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="392" column="8" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cBus_1a192e73bcd0037b109c4a181e44366612" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspI2cBus::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspI2cBus::mutex_</qualifiedname>
        <briefdescription>
<para>Bus mutex for thread safety. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="393" column="21" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspI2cBus_1ae50b7ab4785f7b60e6a05fbb87a90094" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;EspI2cDevice&gt; &gt; EspI2cBus::devices_</definition>
        <argsstring></argsstring>
        <name>devices_</name>
        <qualifiedname>EspI2cBus::devices_</qualifiedname>
        <briefdescription>
<para>Device instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="394" column="15" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="394" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspI2cBus_1a4eb323a3531218e2623d8126d31d255d" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspI2cBus::EspI2cBus</definition>
        <argsstring>(const hf_i2c_master_bus_config_t &amp;config) noexcept</argsstring>
        <name>EspI2cBus</name>
        <qualifiedname>EspI2cBus::EspI2cBus</qualifiedname>
        <param>
          <type>const <ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="254" column="12" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1af387e087bc25f527bfede2222e830fed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspI2cBus::~EspI2cBus</definition>
        <argsstring>() noexcept</argsstring>
        <name>~EspI2cBus</name>
        <qualifiedname>EspI2cBus::~EspI2cBus</qualifiedname>
        <briefdescription>
<para>Destructor. Automatically deinitializes the bus if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="259" column="3" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a7f02893ec64ac76767d1303af6d98343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspI2cBus::EspI2cBus</definition>
        <argsstring>(const EspI2cBus &amp;)=delete</argsstring>
        <name>EspI2cBus</name>
        <qualifiedname>EspI2cBus::EspI2cBus</qualifiedname>
        <param>
          <type>const <ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="262" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a6a93e7a215e14bef1fd1cb0042420b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> &amp;</type>
        <definition>EspI2cBus &amp; EspI2cBus::operator=</definition>
        <argsstring>(const EspI2cBus &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspI2cBus::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="263" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a98a8b554bb5d0b04b214661f3b3c0dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspI2cBus::EspI2cBus</definition>
        <argsstring>(EspI2cBus &amp;&amp;)=delete</argsstring>
        <name>EspI2cBus</name>
        <qualifiedname>EspI2cBus::EspI2cBus</qualifiedname>
        <param>
          <type><ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="264" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a3ab0c633ce258424585cf19f89d8cb52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> &amp;</type>
        <definition>EspI2cBus &amp; EspI2cBus::operator=</definition>
        <argsstring>(EspI2cBus &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspI2cBus::operator=</qualifiedname>
        <param>
          <type><ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="265" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a4ac590e55ca816e06b5e6749781ad1de" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cBus::Initialize</definition>
        <argsstring>() noexcept</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspI2cBus::Initialize</qualifiedname>
        <briefdescription>
<para>Initialize the I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="271" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="63" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a3f9a9142733743906449d119a25c3cf1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cBus::Deinitialize</definition>
        <argsstring>() noexcept</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspI2cBus::Deinitialize</qualifiedname>
        <briefdescription>
<para>Deinitialize the I2C bus and remove all devices. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="277" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="99" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a578c36e975b01c96fe15a492de148e51" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EspI2cBus::CreateDevice</definition>
        <argsstring>(const hf_i2c_device_config_t &amp;device_config) noexcept</argsstring>
        <name>CreateDevice</name>
        <qualifiedname>EspI2cBus::CreateDevice</qualifiedname>
        <param>
          <type>const <ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref> &amp;</type>
          <declname>device_config</declname>
        </param>
        <briefdescription>
<para>Create and add a device to the I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Device configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device index (&gt;= 0) if successful, -1 if failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="284" column="7" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="126" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a185a28a9e32b8ebb22d72e19318bcd02" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> *</type>
        <definition>BaseI2c * EspI2cBus::GetDevice</definition>
        <argsstring>(int device_index) noexcept</argsstring>
        <name>GetDevice</name>
        <qualifiedname>EspI2cBus::GetDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get device by index (<ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> interface). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> device, or nullptr if invalid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="291" column="11" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="173" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1aa871503a0126efc9c5f28503fd19b47c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> *</type>
        <definition>const BaseI2c * EspI2cBus::GetDevice</definition>
        <argsstring>(int device_index) const noexcept</argsstring>
        <name>GetDevice</name>
        <qualifiedname>EspI2cBus::GetDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get device by index (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to const <ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> device, or nullptr if invalid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="298" column="17" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="184" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1aeaec58a5ab33498346eec68f5caa56a3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref> *</type>
        <definition>EspI2cDevice * EspI2cBus::GetEspDevice</definition>
        <argsstring>(int device_index) noexcept</argsstring>
        <name>GetEspDevice</name>
        <qualifiedname>EspI2cBus::GetEspDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get ESP-specific device by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>, or nullptr if invalid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="305" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="194" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a40c5b3910dc38f33d15a956af36ba2e7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref> *</type>
        <definition>const EspI2cDevice * EspI2cBus::GetEspDevice</definition>
        <argsstring>(int device_index) const noexcept</argsstring>
        <name>GetEspDevice</name>
        <qualifiedname>EspI2cBus::GetEspDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get ESP-specific device by index (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the device </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to const <ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>, or nullptr if invalid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="312" column="22" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="204" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a007e11c4560179ac0a5d8989a43d4733" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> *</type>
        <definition>BaseI2c * EspI2cBus::GetDeviceByAddress</definition>
        <argsstring>(hf_u16_t device_address) noexcept</argsstring>
        <name>GetDeviceByAddress</name>
        <qualifiedname>EspI2cBus::GetDeviceByAddress</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>device_address</declname>
        </param>
        <briefdescription>
<para>Get device by address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> device, or nullptr if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="319" column="11" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="214" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1ad96d7e4b8693fdad686c134bada1034b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t EspI2cBus::GetDeviceCount</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetDeviceCount</name>
        <qualifiedname>EspI2cBus::GetDeviceCount</qualifiedname>
        <briefdescription>
<para>Get number of devices on the bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of devices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="325" column="15" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1af6c29fb3e4e40662a32cd9aa3fc0eace" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cBus::RemoveDevice</definition>
        <argsstring>(int device_index) noexcept</argsstring>
        <name>RemoveDevice</name>
        <qualifiedname>EspI2cBus::RemoveDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Remove a device from the bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the device to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="332" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="230" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1ae029e38875a64d1ca4c5ec590a1cb3ff" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cBus::RemoveDeviceByAddress</definition>
        <argsstring>(hf_u16_t device_address) noexcept</argsstring>
        <name>RemoveDeviceByAddress</name>
        <qualifiedname>EspI2cBus::RemoveDeviceByAddress</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>device_address</declname>
        </param>
        <briefdescription>
<para>Remove a device from the bus by address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the device to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="339" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="247" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1aaf11e8ab91b3e06ee1ccae192397aceb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref> &amp;</type>
        <definition>const hf_i2c_master_bus_config_t &amp; EspI2cBus::GetConfig</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetConfig</name>
        <qualifiedname>EspI2cBus::GetConfig</qualifiedname>
        <briefdescription>
<para>Get the bus configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="345" column="36" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a39671c0d8d5ae9aa4cf34814cda7fe52" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>i2c_master_bus_handle_t</type>
        <definition>i2c_master_bus_handle_t EspI2cBus::GetHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetHandle</name>
        <qualifiedname>EspI2cBus::GetHandle</qualifiedname>
        <briefdescription>
<para>Get the ESP-IDF bus handle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>i2c_master_bus_handle_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="351" column="27" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1addc8bd3b1e92d4cf94e0b6895b18930e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EspI2cBus::GetPort</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetPort</name>
        <qualifiedname>EspI2cBus::GetPort</qualifiedname>
        <briefdescription>
<para>Get the I2C port number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>I2C port number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="357" column="7" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1ab5ab97f8ed52a4c33f6ddf248b1b67a2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cBus::IsInitialized</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsInitialized</name>
        <qualifiedname>EspI2cBus::IsInitialized</qualifiedname>
        <briefdescription>
<para>Check if the bus is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="363" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a0194e2061ba595d2b4015aaafedb0512" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t EspI2cBus::ScanDevices</definition>
        <argsstring>(std::vector&lt; hf_u16_t &gt; &amp;found_devices, hf_u16_t start_addr=0x08, hf_u16_t end_addr=0x77) noexcept</argsstring>
        <name>ScanDevices</name>
        <qualifiedname>EspI2cBus::ScanDevices</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref> &gt; &amp;</type>
          <declname>found_devices</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>start_addr</declname>
          <defval>0x08</defval>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>end_addr</declname>
          <defval>0x77</defval>
        </param>
        <briefdescription>
<para>Scan the I2C bus for devices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>found_devices</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store found device addresses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting address for scan (default: 0x08) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Ending address for scan (default: 0x77) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of devices found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="372" column="10" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="274" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1aacfda38edbc57b2320e1b9e505aab75d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cBus::ProbeDevice</definition>
        <argsstring>(hf_u16_t device_addr) noexcept</argsstring>
        <name>ProbeDevice</name>
        <qualifiedname>EspI2cBus::ProbeDevice</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>device_addr</declname>
        </param>
        <briefdescription>
<para>Probe for device presence on the bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address to probe </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if device responds, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="381" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="295" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1ada599f9418ee55133905049270d08163" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspI2cBus::ResetBus</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetBus</name>
        <qualifiedname>EspI2cBus::ResetBus</qualifiedname>
        <briefdescription>
<para>Reset the I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="387" column="8" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="304" bodyend="318"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEspI2cBus_1aa5ae51a75e373009e9cae8d97ee4b811" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EspI2cBus::FindDeviceIndexByAddress</definition>
        <argsstring>(hf_u16_t device_address) const noexcept</argsstring>
        <name>FindDeviceIndexByAddress</name>
        <qualifiedname>EspI2cBus::FindDeviceIndexByAddress</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>device_address</declname>
        </param>
        <briefdescription>
<para>Find device index by address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device index if found, -1 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="401" column="7" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="320" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classEspI2cBus_1a38441634852078aeb598cf204e239637" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref></type>
        <definition>hf_i2c_err_t EspI2cBus::ConvertEspError</definition>
        <argsstring>(esp_err_t esp_error) const noexcept</argsstring>
        <name>ConvertEspError</name>
        <qualifiedname>EspI2cBus::ConvertEspError</qualifiedname>
        <param>
          <type>esp_err_t</type>
          <declname>esp_error</declname>
        </param>
        <briefdescription>
<para>Convert ESP-IDF error to HardFOC error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>esp_error</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HardFOC I2C error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspI2c.h" line="408" column="16" bodyfile="src/mcu/esp32/EspI2c.cpp" bodystart="329" bodyend="348"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Manages a single I2C bus. Handles bus initialization and device creation. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides full configuration and control for the I2C bus, including device management, bus initialization, and ESP-IDF v5.5+ features. Thread-safe device management with proper resource cleanup. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>EspI2cBus</label>
        <link refid="classEspI2cBus"/>
        <childnode refid="2" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="2">
        <label>hf_i2c_master_bus_config_t</label>
        <link refid="structhf__i2c__master__bus__config__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspI2c.h" line="248" column="1" bodyfile="inc/mcu/esp32/EspI2c.h" bodystart="248" bodyend="409"/>
    <listofallmembers>
      <member refid="classEspI2cBus_1a7f7964f5265bac35588a90ab8acb5d43" prot="private" virt="non-virtual"><scope>EspI2cBus</scope><name>bus_handle_</name></member>
      <member refid="classEspI2cBus_1af4c723ed3eaa9cc7cc0d661da8a1e38c" prot="private" virt="non-virtual"><scope>EspI2cBus</scope><name>config_</name></member>
      <member refid="classEspI2cBus_1a38441634852078aeb598cf204e239637" prot="private" virt="non-virtual"><scope>EspI2cBus</scope><name>ConvertEspError</name></member>
      <member refid="classEspI2cBus_1a578c36e975b01c96fe15a492de148e51" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>CreateDevice</name></member>
      <member refid="classEspI2cBus_1a3f9a9142733743906449d119a25c3cf1" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>Deinitialize</name></member>
      <member refid="classEspI2cBus_1ae50b7ab4785f7b60e6a05fbb87a90094" prot="private" virt="non-virtual"><scope>EspI2cBus</scope><name>devices_</name></member>
      <member refid="classEspI2cBus_1a4eb323a3531218e2623d8126d31d255d" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>EspI2cBus</name></member>
      <member refid="classEspI2cBus_1a7f02893ec64ac76767d1303af6d98343" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>EspI2cBus</name></member>
      <member refid="classEspI2cBus_1a98a8b554bb5d0b04b214661f3b3c0dec" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>EspI2cBus</name></member>
      <member refid="classEspI2cBus_1aa5ae51a75e373009e9cae8d97ee4b811" prot="private" virt="non-virtual"><scope>EspI2cBus</scope><name>FindDeviceIndexByAddress</name></member>
      <member refid="classEspI2cBus_1aaf11e8ab91b3e06ee1ccae192397aceb" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetConfig</name></member>
      <member refid="classEspI2cBus_1a185a28a9e32b8ebb22d72e19318bcd02" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetDevice</name></member>
      <member refid="classEspI2cBus_1aa871503a0126efc9c5f28503fd19b47c" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetDevice</name></member>
      <member refid="classEspI2cBus_1a007e11c4560179ac0a5d8989a43d4733" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetDeviceByAddress</name></member>
      <member refid="classEspI2cBus_1ad96d7e4b8693fdad686c134bada1034b" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetDeviceCount</name></member>
      <member refid="classEspI2cBus_1aeaec58a5ab33498346eec68f5caa56a3" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetEspDevice</name></member>
      <member refid="classEspI2cBus_1a40c5b3910dc38f33d15a956af36ba2e7" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetEspDevice</name></member>
      <member refid="classEspI2cBus_1a39671c0d8d5ae9aa4cf34814cda7fe52" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetHandle</name></member>
      <member refid="classEspI2cBus_1addc8bd3b1e92d4cf94e0b6895b18930e" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>GetPort</name></member>
      <member refid="classEspI2cBus_1a4ac590e55ca816e06b5e6749781ad1de" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>Initialize</name></member>
      <member refid="classEspI2cBus_1af31a98abe753b202bfe5000b6d16240d" prot="private" virt="non-virtual"><scope>EspI2cBus</scope><name>initialized_</name></member>
      <member refid="classEspI2cBus_1ab5ab97f8ed52a4c33f6ddf248b1b67a2" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>IsInitialized</name></member>
      <member refid="classEspI2cBus_1a192e73bcd0037b109c4a181e44366612" prot="private" virt="non-virtual"><scope>EspI2cBus</scope><name>mutex_</name></member>
      <member refid="classEspI2cBus_1a6a93e7a215e14bef1fd1cb0042420b98" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>operator=</name></member>
      <member refid="classEspI2cBus_1a3ab0c633ce258424585cf19f89d8cb52" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>operator=</name></member>
      <member refid="classEspI2cBus_1aacfda38edbc57b2320e1b9e505aab75d" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>ProbeDevice</name></member>
      <member refid="classEspI2cBus_1af6c29fb3e4e40662a32cd9aa3fc0eace" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>RemoveDevice</name></member>
      <member refid="classEspI2cBus_1ae029e38875a64d1ca4c5ec590a1cb3ff" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>RemoveDeviceByAddress</name></member>
      <member refid="classEspI2cBus_1ada599f9418ee55133905049270d08163" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>ResetBus</name></member>
      <member refid="classEspI2cBus_1a0194e2061ba595d2b4015aaafedb0512" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>ScanDevices</name></member>
      <member refid="classEspI2cBus_1af387e087bc25f527bfede2222e830fed" prot="public" virt="non-virtual"><scope>EspI2cBus</scope><name>~EspI2cBus</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
