<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classEspSpiBus" kind="class" language="C++" prot="public">
    <compoundname>EspSpiBus</compoundname>
    <includes refid="EspSpi_8h" local="no">EspSpi.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspSpiBus_1a066b8df253bffacf1e21d729850bf99e" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__spi__bus__config__t" kindref="compound">hf_spi_bus_config_t</ref></type>
        <definition>hf_spi_bus_config_t EspSpiBus::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>EspSpiBus::config_</qualifiedname>
        <briefdescription>
<para>Bus configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="259" column="23" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspSpiBus_1a697d0f6da659676a7506145ebbec98f5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspSpiBus::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>EspSpiBus::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="260" column="8" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspSpiBus_1a9c42c64731d332892f30ecb2e262dd2d" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspSpiBus::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspSpiBus::mutex_</qualifiedname>
        <briefdescription>
<para>Thread safety (mutable for const operations) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="261" column="21" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspSpiBus_1a4f89488fce018ca532e6753d6f864280" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classEspSpiDevice" kindref="compound">EspSpiDevice</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;EspSpiDevice&gt; &gt; EspSpiBus::devices_</definition>
        <argsstring></argsstring>
        <name>devices_</name>
        <qualifiedname>EspSpiBus::devices_</qualifiedname>
        <briefdescription>
<para>Managed devices on this bus. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="262" column="15" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="262" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspSpiBus_1afe5fca7a6837b6274ffa885a927edb2f" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspSpiBus::EspSpiBus</definition>
        <argsstring>(const hf_spi_bus_config_t &amp;config) noexcept</argsstring>
        <name>EspSpiBus</name>
        <qualifiedname>EspSpiBus::EspSpiBus</qualifiedname>
        <param>
          <type>const <ref refid="structhf__spi__bus__config__t" kindref="compound">hf_spi_bus_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classEspSpiBus" kindref="compound">EspSpiBus</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus configuration (<ref refid="structhf__spi__bus__config__t" kindref="compound">hf_spi_bus_config_t</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="175" column="12" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="54" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1aa6c27620fbe0b014e6c20ad95d06e5b4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspSpiBus::~EspSpiBus</definition>
        <argsstring>() noexcept</argsstring>
        <name>~EspSpiBus</name>
        <qualifiedname>EspSpiBus::~EspSpiBus</qualifiedname>
        <briefdescription>
<para>Destructor. Automatically deinitializes the bus if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="179" column="3" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1a6bfcf437a03ca71293499558973ca750" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspSpiBus::Initialize</definition>
        <argsstring>() noexcept</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspSpiBus::Initialize</qualifiedname>
        <briefdescription>
<para>Initialize the SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="185" column="8" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="60" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1ac0f954dce3fa54452afc0d48b4542f33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspSpiBus::IsInitialized</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsInitialized</name>
        <qualifiedname>EspSpiBus::IsInitialized</qualifiedname>
        <briefdescription>
<para>Check if the bus is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="191" column="8" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1af1b10e1d4105c450fc0c20d0ef134ddb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspSpiBus::Deinitialize</definition>
        <argsstring>() noexcept</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspSpiBus::Deinitialize</qualifiedname>
        <briefdescription>
<para>Deinitialize the SPI bus and free resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="197" column="8" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="105" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1a53555ddb858bd9e9957d2faf30d9c19e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int EspSpiBus::CreateDevice</definition>
        <argsstring>(const hf_spi_device_config_t &amp;device_config) noexcept</argsstring>
        <name>CreateDevice</name>
        <qualifiedname>EspSpiBus::CreateDevice</qualifiedname>
        <param>
          <type>const <ref refid="structhf__spi__device__config__t" kindref="compound">hf_spi_device_config_t</ref> &amp;</type>
          <declname>device_config</declname>
        </param>
        <briefdescription>
<para>Create a new SPI device on this bus and store it internally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Device configuration (<ref refid="structhf__spi__device__config__t" kindref="compound">hf_spi_device_config_t</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the created device (use with GetDevice), or -1 on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="204" column="7" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="133" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1aa9cf3395ff959ca06d4955bbc64b5c6a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> *</type>
        <definition>BaseSpi * EspSpiBus::GetDevice</definition>
        <argsstring>(int device_index) noexcept</argsstring>
        <name>GetDevice</name>
        <qualifiedname>EspSpiBus::GetDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get a device by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index returned by <ref refid="classEspSpiBus_1a53555ddb858bd9e9957d2faf30d9c19e" kindref="member">CreateDevice()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> device, or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="211" column="11" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1ae74c1cdb60d440e4b308bded6324fbf7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> *</type>
        <definition>const BaseSpi * EspSpiBus::GetDevice</definition>
        <argsstring>(int device_index) const noexcept</argsstring>
        <name>GetDevice</name>
        <qualifiedname>EspSpiBus::GetDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get a device by index (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index returned by <ref refid="classEspSpiBus_1a53555ddb858bd9e9957d2faf30d9c19e" kindref="member">CreateDevice()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Const pointer to <ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> device, or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="218" column="17" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="159" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1a474a4980339555fa7087c02c695069c5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classEspSpiDevice" kindref="compound">EspSpiDevice</ref> *</type>
        <definition>EspSpiDevice * EspSpiBus::GetEspDevice</definition>
        <argsstring>(int device_index) noexcept</argsstring>
        <name>GetEspDevice</name>
        <qualifiedname>EspSpiBus::GetEspDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get an ESP-specific device by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index returned by <ref refid="classEspSpiBus_1a53555ddb858bd9e9957d2faf30d9c19e" kindref="member">CreateDevice()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="classEspSpiDevice" kindref="compound">EspSpiDevice</ref>, or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="225" column="16" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="167" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1a75493835cb349608c794cc709d436141" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classEspSpiDevice" kindref="compound">EspSpiDevice</ref> *</type>
        <definition>const EspSpiDevice * EspSpiBus::GetEspDevice</definition>
        <argsstring>(int device_index) const noexcept</argsstring>
        <name>GetEspDevice</name>
        <qualifiedname>EspSpiBus::GetEspDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Get an ESP-specific device by index (const version). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index returned by <ref refid="classEspSpiBus_1a53555ddb858bd9e9957d2faf30d9c19e" kindref="member">CreateDevice()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Const pointer to <ref refid="classEspSpiDevice" kindref="compound">EspSpiDevice</ref>, or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="232" column="22" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="175" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1af0ed4cee7a894357f16e6e6befc31755" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t EspSpiBus::GetDeviceCount</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetDeviceCount</name>
        <qualifiedname>EspSpiBus::GetDeviceCount</qualifiedname>
        <briefdescription>
<para>Get number of devices on this bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of devices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="238" column="15" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1aa7d4c40e6567f8cf67a280807d6f2095" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspSpiBus::RemoveDevice</definition>
        <argsstring>(int device_index) noexcept</argsstring>
        <name>RemoveDevice</name>
        <qualifiedname>EspSpiBus::RemoveDevice</qualifiedname>
        <param>
          <type>int</type>
          <declname>device_index</declname>
        </param>
        <briefdescription>
<para>Remove a device from the bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of device to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="245" column="8" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="188" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1a55e6ea75454e132acece8a337bc4b16d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structhf__spi__bus__config__t" kindref="compound">hf_spi_bus_config_t</ref> &amp;</type>
        <definition>const hf_spi_bus_config_t &amp; EspSpiBus::GetConfig</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetConfig</name>
        <qualifiedname>EspSpiBus::GetConfig</qualifiedname>
        <briefdescription>
<para>Get the bus configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structhf__spi__bus__config__t" kindref="compound">hf_spi_bus_config_t</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="251" column="29" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiBus_1a61699b15fb8f109b10084e824ec6f3df" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>spi_host_device_t</type>
        <definition>spi_host_device_t EspSpiBus::GetHost</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetHost</name>
        <qualifiedname>EspSpiBus::GetHost</qualifiedname>
        <briefdescription>
<para>Get the ESP-IDF host ID for this bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>spi_host_device_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="256" column="21" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="203" bodyend="205"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Manages a single SPI bus (host). Handles bus init/deinit and device creation. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides full configuration and control for the SPI bus, including DMA, IOMUX, and advanced ESP-IDF v5.5+ features. Thread-safe device management. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>EspSpiBus</label>
        <link refid="classEspSpiBus"/>
        <childnode refid="2" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="2">
        <label>hf_spi_bus_config_t</label>
        <link refid="structhf__spi__bus__config__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspSpi.h" line="169" column="1" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="169" bodyend="263"/>
    <listofallmembers>
      <member refid="classEspSpiBus_1a066b8df253bffacf1e21d729850bf99e" prot="private" virt="non-virtual"><scope>EspSpiBus</scope><name>config_</name></member>
      <member refid="classEspSpiBus_1a53555ddb858bd9e9957d2faf30d9c19e" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>CreateDevice</name></member>
      <member refid="classEspSpiBus_1af1b10e1d4105c450fc0c20d0ef134ddb" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>Deinitialize</name></member>
      <member refid="classEspSpiBus_1a4f89488fce018ca532e6753d6f864280" prot="private" virt="non-virtual"><scope>EspSpiBus</scope><name>devices_</name></member>
      <member refid="classEspSpiBus_1afe5fca7a6837b6274ffa885a927edb2f" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>EspSpiBus</name></member>
      <member refid="classEspSpiBus_1a55e6ea75454e132acece8a337bc4b16d" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>GetConfig</name></member>
      <member refid="classEspSpiBus_1aa9cf3395ff959ca06d4955bbc64b5c6a" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>GetDevice</name></member>
      <member refid="classEspSpiBus_1ae74c1cdb60d440e4b308bded6324fbf7" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>GetDevice</name></member>
      <member refid="classEspSpiBus_1af0ed4cee7a894357f16e6e6befc31755" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>GetDeviceCount</name></member>
      <member refid="classEspSpiBus_1a474a4980339555fa7087c02c695069c5" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>GetEspDevice</name></member>
      <member refid="classEspSpiBus_1a75493835cb349608c794cc709d436141" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>GetEspDevice</name></member>
      <member refid="classEspSpiBus_1a61699b15fb8f109b10084e824ec6f3df" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>GetHost</name></member>
      <member refid="classEspSpiBus_1a6bfcf437a03ca71293499558973ca750" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>Initialize</name></member>
      <member refid="classEspSpiBus_1a697d0f6da659676a7506145ebbec98f5" prot="private" virt="non-virtual"><scope>EspSpiBus</scope><name>initialized_</name></member>
      <member refid="classEspSpiBus_1ac0f954dce3fa54452afc0d48b4542f33" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>IsInitialized</name></member>
      <member refid="classEspSpiBus_1a9c42c64731d332892f30ecb2e262dd2d" prot="private" virt="non-virtual"><scope>EspSpiBus</scope><name>mutex_</name></member>
      <member refid="classEspSpiBus_1aa7d4c40e6567f8cf67a280807d6f2095" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>RemoveDevice</name></member>
      <member refid="classEspSpiBus_1aa6c27620fbe0b014e6c20ad95d06e5b4" prot="public" virt="non-virtual"><scope>EspSpiBus</scope><name>~EspSpiBus</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
