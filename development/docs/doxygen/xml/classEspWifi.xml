<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classEspWifi" kind="class" language="C++" prot="public">
    <compoundname>EspWifi</compoundname>
    <basecompoundref refid="classBaseWifi" prot="public" virt="non-virtual">BaseWifi</basecompoundref>
    <includes refid="EspWifi_8h" local="no">EspWifi.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspWifi_1aa0a9f8d2216f73029662106ba9112e8b" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspWifi::m_mutex</definition>
        <argsstring></argsstring>
        <name>m_mutex</name>
        <qualifiedname>EspWifi::m_mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main synchronization mutex </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="359" column="21" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1adb31106309d33af5ce16e90e46906939" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspWifi::m_initialized</definition>
        <argsstring></argsstring>
        <name>m_initialized</name>
        <qualifiedname>EspWifi::m_initialized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialization state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="360" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a545838e3b8d960377c122e753db8cf47" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspWifi::m_enabled</definition>
        <argsstring></argsstring>
        <name>m_enabled</name>
        <qualifiedname>EspWifi::m_enabled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>WiFi enabled state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="361" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a0d89e54dd5537c34d49da6bda7c74c4c" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; <ref refid="group__wifi_1ga90ab2c8a51fc7cb116b659df115407b9" kindref="member">hf_wifi_mode_t</ref> &gt;</type>
        <definition>std::atomic&lt;hf_wifi_mode_t&gt; EspWifi::m_mode</definition>
        <argsstring></argsstring>
        <name>m_mode</name>
        <qualifiedname>EspWifi::m_mode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current WiFi mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="362" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1aaf955c4a26114ca8ce1b9a436bab2ed5" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; <ref refid="group__wifi_1ga45e751432d70ba4ee36c1369914ee419" kindref="member">hf_wifi_state_t</ref> &gt;</type>
        <definition>std::atomic&lt;hf_wifi_state_t&gt; EspWifi::m_state</definition>
        <argsstring></argsstring>
        <name>m_state</name>
        <qualifiedname>EspWifi::m_state</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current WiFi state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="363" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a4a996c672bdce9931dfdea768d84179d" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__wifi__station__config__t" kindref="compound">hf_wifi_station_config_t</ref></type>
        <definition>hf_wifi_station_config_t EspWifi::m_sta_config</definition>
        <argsstring></argsstring>
        <name>m_sta_config</name>
        <qualifiedname>EspWifi::m_sta_config</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Station configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="366" column="28" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1ae403782c7db21e828d909f147cd8713b" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__wifi__ap__config__t" kindref="compound">hf_wifi_ap_config_t</ref></type>
        <definition>hf_wifi_ap_config_t EspWifi::m_ap_config</definition>
        <argsstring></argsstring>
        <name>m_ap_config</name>
        <qualifiedname>EspWifi::m_ap_config</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AP configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="367" column="23" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a979f148264a16344c727a705baeb1414" prot="private" static="no" mutable="no">
        <type><ref refid="structEspWifiAdvancedConfig" kindref="compound">EspWifiAdvancedConfig</ref></type>
        <definition>EspWifiAdvancedConfig EspWifi::m_advanced_config</definition>
        <argsstring></argsstring>
        <name>m_advanced_config</name>
        <qualifiedname>EspWifi::m_advanced_config</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advanced configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="368" column="25" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1ab07e9f6a54a566842081cb9e437f8c10" prot="private" static="no" mutable="no">
        <type>esp_netif_t *</type>
        <definition>esp_netif_t* EspWifi::m_sta_netif</definition>
        <argsstring></argsstring>
        <name>m_sta_netif</name>
        <qualifiedname>EspWifi::m_sta_netif</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Station network interface </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="371" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a1cc51a8850a5a1c8fdf4bcada04bde90" prot="private" static="no" mutable="no">
        <type>esp_netif_t *</type>
        <definition>esp_netif_t* EspWifi::m_ap_netif</definition>
        <argsstring></argsstring>
        <name>m_ap_netif</name>
        <qualifiedname>EspWifi::m_ap_netif</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AP network interface </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="372" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1adbfa09b39eb14ed286bd28b04cff7d98" prot="private" static="no" mutable="no">
        <type>EventGroupHandle_t</type>
        <definition>EventGroupHandle_t EspWifi::m_event_group</definition>
        <argsstring></argsstring>
        <name>m_event_group</name>
        <qualifiedname>EspWifi::m_event_group</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FreeRTOS event group for WiFi events </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="373" column="22" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a9f8dedfb68e0d7b6acf46ccdf231c798" prot="private" static="no" mutable="no">
        <type>esp_event_handler_instance_t</type>
        <definition>esp_event_handler_instance_t EspWifi::m_wifi_event_handler</definition>
        <argsstring></argsstring>
        <name>m_wifi_event_handler</name>
        <qualifiedname>EspWifi::m_wifi_event_handler</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>WiFi event handler </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="374" column="32" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1ae01a87adacafedea6f333196683bfe27" prot="private" static="no" mutable="no">
        <type>esp_event_handler_instance_t</type>
        <definition>esp_event_handler_instance_t EspWifi::m_ip_event_handler</definition>
        <argsstring></argsstring>
        <name>m_ip_event_handler</name>
        <qualifiedname>EspWifi::m_ip_event_handler</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IP event handler </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="375" column="32" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1ab1c6e03ad971d611da51fcdf3eed5cf8" prot="private" static="no" mutable="no">
        <type><ref refid="group__wifi_1gafc36eb4cdfaf0c2ea45afeaac3ad13c9" kindref="member">hf_wifi_event_callback_t</ref></type>
        <definition>hf_wifi_event_callback_t EspWifi::m_event_callback</definition>
        <argsstring></argsstring>
        <name>m_event_callback</name>
        <qualifiedname>EspWifi::m_event_callback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User event callback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="378" column="28" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a2c6d455345af43e9d7fbac62b7ccc71c" prot="private" static="no" mutable="no">
        <type><ref refid="group__wifi_1ga427cf6c849ca99b6624e9106cefd0d60" kindref="member">hf_wifi_scan_callback_t</ref></type>
        <definition>hf_wifi_scan_callback_t EspWifi::m_scan_callback</definition>
        <argsstring></argsstring>
        <name>m_scan_callback</name>
        <qualifiedname>EspWifi::m_scan_callback</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User scan callback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="379" column="27" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a3a1a88d567809ce53ce3d5575755b453" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* EspWifi::m_event_user_data</definition>
        <argsstring></argsstring>
        <name>m_event_user_data</name>
        <qualifiedname>EspWifi::m_event_user_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User data for event callback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="380" column="8" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a8667062fa9debd9273cdd2480636259f" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* EspWifi::m_scan_user_data</definition>
        <argsstring></argsstring>
        <name>m_scan_user_data</name>
        <qualifiedname>EspWifi::m_scan_user_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User data for scan callback </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="381" column="8" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1ab362b3836b671682f5789ca2e9fad4d6" prot="private" static="no" mutable="no">
        <type>std::queue&lt; std::pair&lt; <ref refid="group__wifi_1ga0fc5cd83d2820476528dba010f9ccfbb" kindref="member">hf_wifi_event_t</ref>, void * &gt; &gt;</type>
        <definition>std::queue&lt;std::pair&lt;hf_wifi_event_t, void*&gt; &gt; EspWifi::m_event_queue</definition>
        <argsstring></argsstring>
        <name>m_event_queue</name>
        <qualifiedname>EspWifi::m_event_queue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event queue </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="382" column="14" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a3d42ddd9a7a2790eeeec94c1519c0995" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspWifi::m_event_mutex</definition>
        <argsstring></argsstring>
        <name>m_event_mutex</name>
        <qualifiedname>EspWifi::m_event_mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event queue mutex </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="383" column="21" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a5d96729fa9dac2b05153578461f1e781" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structhf__wifi__network__info__t" kindref="compound">hf_wifi_network_info_t</ref> &gt;</type>
        <definition>std::vector&lt;hf_wifi_network_info_t&gt; EspWifi::m_scan_results</definition>
        <argsstring></argsstring>
        <name>m_scan_results</name>
        <qualifiedname>EspWifi::m_scan_results</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Last scan results </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="386" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a7035508c06cc3cd794c3c0baec151f30" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspWifi::m_scanning</definition>
        <argsstring></argsstring>
        <name>m_scanning</name>
        <qualifiedname>EspWifi::m_scanning</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scanning state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="387" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a06558cebbce99692087713ec7985ae31" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspWifi::m_scan_mutex</definition>
        <argsstring></argsstring>
        <name>m_scan_mutex</name>
        <qualifiedname>EspWifi::m_scan_mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scan results mutex </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="388" column="21" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1af91498a9a25bfbe8819054cc8235a644" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspWifi::m_connected</definition>
        <argsstring></argsstring>
        <name>m_connected</name>
        <qualifiedname>EspWifi::m_connected</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="391" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1aa803cd3263ba9a2ae68fae0ed07e2693" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspWifi::m_ap_active</definition>
        <argsstring></argsstring>
        <name>m_ap_active</name>
        <qualifiedname>EspWifi::m_ap_active</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>AP active state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="392" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1acf74e0cf81678090bfd6217dbfc5d0ad" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; int8_t &gt;</type>
        <definition>std::atomic&lt;int8_t&gt; EspWifi::m_rssi</definition>
        <argsstring></argsstring>
        <name>m_rssi</name>
        <qualifiedname>EspWifi::m_rssi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current RSSI </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="393" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1ad9bcdfee7deaa0fd3bd1c41378e359dc" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; uint8_t &gt;</type>
        <definition>std::atomic&lt;uint8_t&gt; EspWifi::m_channel</definition>
        <argsstring></argsstring>
        <name>m_channel</name>
        <qualifiedname>EspWifi::m_channel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="394" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1acf463caaf71fcae20d22a391a0e66250" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspWifi::m_smartconfig_active</definition>
        <argsstring></argsstring>
        <name>m_smartconfig_active</name>
        <qualifiedname>EspWifi::m_smartconfig_active</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SmartConfig active </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="397" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspWifi_1a54eddd362c8341bba3715f70a68dbd86" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspWifi::m_mesh_active</definition>
        <argsstring></argsstring>
        <name>m_mesh_active</name>
        <qualifiedname>EspWifi::m_mesh_active</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mesh active </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="399" column="15" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="399" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspWifi_1aa2ad725cf4b8c9880a6a2649f75ccbd4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspWifi::EspWifi</definition>
        <argsstring>(const EspWifiAdvancedConfig *advanced_config=nullptr)</argsstring>
        <name>EspWifi</name>
        <qualifiedname>EspWifi::EspWifi</qualifiedname>
        <param>
          <type>const <ref refid="structEspWifiAdvancedConfig" kindref="compound">EspWifiAdvancedConfig</ref> *</type>
          <declname>advanced_config</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Constructor with optional advanced configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>advanced_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Advanced ESP32-specific configuration (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="149" column="12" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="206" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ad68fd60e9409c00ca010c613b97885ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>EspWifi::~EspWifi</definition>
        <argsstring>()</argsstring>
        <name>~EspWifi</name>
        <qualifiedname>EspWifi::~EspWifi</qualifiedname>
        <briefdescription>
<para>Destructor - ensures proper cleanup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="154" column="11" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1aba6a1fd280dbcd23fee9281eaaef7a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::Initialize</definition>
        <argsstring>(hf_wifi_mode_t mode) override</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspWifi::Initialize</qualifiedname>
        <reimplements refid="classBaseWifi_1afb3f364e100cf74087b65c8529bda6da">Initialize</reimplements>
        <param>
          <type><ref refid="group__wifi_1ga90ab2c8a51fc7cb116b659df115407b9" kindref="member">hf_wifi_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initialize the WiFi subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>WiFi operating mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="159" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="227" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a08a5f89824b7d4f845cecabc4278f356" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::Deinitialize</definition>
        <argsstring>() override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspWifi::Deinitialize</qualifiedname>
        <reimplements refid="classBaseWifi_1afaf483e98b1f98467356bdfed5071069">Deinitialize</reimplements>
        <briefdescription>
<para>Deinitialize the WiFi subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="160" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="360" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a8ac15d4e7a8156eafa7b2850495c3083" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool EspWifi::IsInitialized</definition>
        <argsstring>() const override</argsstring>
        <name>IsInitialized</name>
        <qualifiedname>EspWifi::IsInitialized</qualifiedname>
        <reimplements refid="classBaseWifi_1a0f9a5bb5a9fbee7af3412385286baf59">IsInitialized</reimplements>
        <briefdescription>
<para>Check if WiFi is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="161" column="8" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ad572aec1ea4575004b5639a386948c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::SetMode</definition>
        <argsstring>(hf_wifi_mode_t mode) override</argsstring>
        <name>SetMode</name>
        <qualifiedname>EspWifi::SetMode</qualifiedname>
        <reimplements refid="classBaseWifi_1afd648ddba6ad1f2e10941318dcb0dfab">SetMode</reimplements>
        <param>
          <type><ref refid="group__wifi_1ga90ab2c8a51fc7cb116b659df115407b9" kindref="member">hf_wifi_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set WiFi operating mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>WiFi operating mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="162" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="453" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a916f331fe7258222a58f213dec3e3a0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__wifi_1ga90ab2c8a51fc7cb116b659df115407b9" kindref="member">hf_wifi_mode_t</ref></type>
        <definition>hf_wifi_mode_t EspWifi::GetMode</definition>
        <argsstring>() const override</argsstring>
        <name>GetMode</name>
        <qualifiedname>EspWifi::GetMode</qualifiedname>
        <reimplements refid="classBaseWifi_1a849f44352adf62aab5d07cb9f4666b8e">GetMode</reimplements>
        <briefdescription>
<para>Get current WiFi operating mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current WiFi mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="163" column="18" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="992" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1af9d85df22e5b2f7f0e4a9f083a68e27b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::ConfigureStation</definition>
        <argsstring>(const hf_wifi_station_config_t &amp;config) override</argsstring>
        <name>ConfigureStation</name>
        <qualifiedname>EspWifi::ConfigureStation</qualifiedname>
        <reimplements refid="classBaseWifi_1aed3ba55f847bb8de043fc794394e85d9">ConfigureStation</reimplements>
        <param>
          <type>const <ref refid="structhf__wifi__station__config__t" kindref="compound">hf_wifi_station_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure station parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Station configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="166" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="488" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ac4dc5a2ff0d3699cb5dfc7dabe2e4522" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::Connect</definition>
        <argsstring>(uint32_t timeout_ms=0) override</argsstring>
        <name>Connect</name>
        <qualifiedname>EspWifi::Connect</qualifiedname>
        <reimplements refid="classBaseWifi_1ada2eadb6792ac79148a0e2c4fccab27d">Connect</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Connect to a WiFi network (station mode) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection timeout in milliseconds (0 for default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="167" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="520" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1af8511154338b1285cb386ba2cde71158" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::Disconnect</definition>
        <argsstring>() override</argsstring>
        <name>Disconnect</name>
        <qualifiedname>EspWifi::Disconnect</qualifiedname>
        <reimplements refid="classBaseWifi_1a116ea68e8e5e29ed87b3a3ab60df164e">Disconnect</reimplements>
        <briefdescription>
<para>Disconnect from WiFi network. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="168" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1104" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ae3418e13e9da9cbe0b0b68656233847a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool EspWifi::IsConnected</definition>
        <argsstring>() const override</argsstring>
        <name>IsConnected</name>
        <qualifiedname>EspWifi::IsConnected</qualifiedname>
        <reimplements refid="classBaseWifi_1a7d913dc24e648f770066873000af4d1e">IsConnected</reimplements>
        <briefdescription>
<para>Check if connected to a network. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if connected, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="169" column="8" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1115" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1accc189589995ac17cd27a9ba60d63c9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int8_t</type>
        <definition>int8_t EspWifi::GetRssi</definition>
        <argsstring>() const override</argsstring>
        <name>GetRssi</name>
        <qualifiedname>EspWifi::GetRssi</qualifiedname>
        <reimplements refid="classBaseWifi_1a3a314875b45ef4198c7b69ccc0660066">GetRssi</reimplements>
        <briefdescription>
<para>Get signal strength (RSSI) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Signal strength in dBm, or INT8_MIN on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="170" column="10" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1120" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a91b02d2cc3f0a1bc3a93bef5ac1767f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::GetIpInfo</definition>
        <argsstring>(hf_wifi_ip_info_t &amp;ip_info) const override</argsstring>
        <name>GetIpInfo</name>
        <qualifiedname>EspWifi::GetIpInfo</qualifiedname>
        <reimplements refid="classBaseWifi_1a2f92e5e27c043ea1d5cc90ed3d473bec">GetIpInfo</reimplements>
        <param>
          <type><ref refid="structhf__wifi__ip__info__t" kindref="compound">hf_wifi_ip_info_t</ref> &amp;</type>
          <declname>ip_info</declname>
        </param>
        <briefdescription>
<para>Get current IP information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ip_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store IP information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="171" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="546" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a2a2b0ecff30d6d953da490565c8ca0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::ConfigureAccessPoint</definition>
        <argsstring>(const hf_wifi_ap_config_t &amp;config) override</argsstring>
        <name>ConfigureAccessPoint</name>
        <qualifiedname>EspWifi::ConfigureAccessPoint</qualifiedname>
        <reimplements refid="classBaseWifi_1ab5e8e2fc7f09be74b034260b4e499d96">ConfigureAccessPoint</reimplements>
        <param>
          <type>const <ref refid="structhf__wifi__ap__config__t" kindref="compound">hf_wifi_ap_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure Access Point parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>AP configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="174" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="567" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a1f140a31ef650411478818c285aef64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StartAccessPoint</definition>
        <argsstring>() override</argsstring>
        <name>StartAccessPoint</name>
        <qualifiedname>EspWifi::StartAccessPoint</qualifiedname>
        <reimplements refid="classBaseWifi_1ab038bcdbce9651c4c3b0305805cbd7f3">StartAccessPoint</reimplements>
        <briefdescription>
<para>Start Access Point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="175" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="594" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1aeec25630ed35de561df39b358418e566" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StopAccessPoint</definition>
        <argsstring>() override</argsstring>
        <name>StopAccessPoint</name>
        <qualifiedname>EspWifi::StopAccessPoint</qualifiedname>
        <reimplements refid="classBaseWifi_1a8671f5c88289bc48f1dbdbf109d5e4d0">StopAccessPoint</reimplements>
        <briefdescription>
<para>Stop Access Point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="176" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="621" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a5a1d456000d644dfd8282673ba4f5009" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool EspWifi::IsAccessPointActive</definition>
        <argsstring>() const override</argsstring>
        <name>IsAccessPointActive</name>
        <qualifiedname>EspWifi::IsAccessPointActive</qualifiedname>
        <reimplements refid="classBaseWifi_1ab0b198b02ca774d1ca2fe0ac9b468c61">IsAccessPointActive</reimplements>
        <briefdescription>
<para>Check if Access Point is running. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if AP is active, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="177" column="8" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="663" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1abf1bc4660bcef2ae9d213b5f93f3ca8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int EspWifi::GetConnectedStationCount</definition>
        <argsstring>() const override</argsstring>
        <name>GetConnectedStationCount</name>
        <qualifiedname>EspWifi::GetConnectedStationCount</qualifiedname>
        <reimplements refid="classBaseWifi_1abf5439db72fa1f93e0d37ac8ccaffef8">GetConnectedStationCount</reimplements>
        <briefdescription>
<para>Get number of connected stations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of connected stations, or -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="178" column="7" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="668" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1af8eb0906128aeb938eb5822a910d7d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StartScan</definition>
        <argsstring>(bool show_hidden=false, bool passive=false, uint32_t max_scan_time_ms=0) override</argsstring>
        <name>StartScan</name>
        <qualifiedname>EspWifi::StartScan</qualifiedname>
        <reimplements refid="classBaseWifi_1a309f30f05a1b4e26687ca19e55a12667">StartScan</reimplements>
        <param>
          <type>bool</type>
          <declname>show_hidden</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>passive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_scan_time_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Start network scan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>show_hidden</parametername>
</parameternamelist>
<parameterdescription>
<para>Include hidden networks in scan </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passive</parametername>
</parameternamelist>
<parameterdescription>
<para>Use passive scanning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_scan_time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum scan time per channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="181" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="684" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a5397db2984b1531639511dee9c013a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::GetScanResults</definition>
        <argsstring>(std::vector&lt; hf_wifi_network_info_t &gt; &amp;networks, uint16_t max_networks=0) override</argsstring>
        <name>GetScanResults</name>
        <qualifiedname>EspWifi::GetScanResults</qualifiedname>
        <reimplements refid="classBaseWifi_1a8d71d17477b03d2775f5c8d89aecbf52">GetScanResults</reimplements>
        <param>
          <type>std::vector&lt; <ref refid="structhf__wifi__network__info__t" kindref="compound">hf_wifi_network_info_t</ref> &gt; &amp;</type>
          <declname>networks</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_networks</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get scan results. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>networks</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store found networks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_networks</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of networks to return (0 for all) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="183" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="736" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a43e97cdf4af2c05b2e68031add87d782" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool EspWifi::IsScanning</definition>
        <argsstring>() const override</argsstring>
        <name>IsScanning</name>
        <qualifiedname>EspWifi::IsScanning</qualifiedname>
        <reimplements refid="classBaseWifi_1a3470b0cf542ca2aed0cf2fa36674edb2">IsScanning</reimplements>
        <briefdescription>
<para>Check if scan is in progress. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if scanning, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="185" column="8" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="813" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1abaa4ac07b9ef057964dfd07dd2948e47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__wifi_1ga45e751432d70ba4ee36c1369914ee419" kindref="member">hf_wifi_state_t</ref></type>
        <definition>hf_wifi_state_t EspWifi::GetState</definition>
        <argsstring>() const override</argsstring>
        <name>GetState</name>
        <qualifiedname>EspWifi::GetState</qualifiedname>
        <reimplements refid="classBaseWifi_1add13affb5f6071fc54a24f25545f8098">GetState</reimplements>
        <briefdescription>
<para>Get current WiFi state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current WiFi state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="188" column="19" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="818" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1af65c3becf925791207bc7333be78d3ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string EspWifi::GetConnectedSsid</definition>
        <argsstring>() const override</argsstring>
        <name>GetConnectedSsid</name>
        <qualifiedname>EspWifi::GetConnectedSsid</qualifiedname>
        <reimplements refid="classBaseWifi_1afcbe903d63da73d424ecd932ca038b08">GetConnectedSsid</reimplements>
        <briefdescription>
<para>Get connected network SSID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SSID string, empty if not connected </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="189" column="15" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="823" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ac35856636ff6281693e9ce57dc13d162" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::GetConnectedBssid</definition>
        <argsstring>(uint8_t bssid[6]) const override</argsstring>
        <name>GetConnectedBssid</name>
        <qualifiedname>EspWifi::GetConnectedBssid</qualifiedname>
        <reimplements refid="classBaseWifi_1a02b0af73b308b92b8cc8ad2ce0f27bc8">GetConnectedBssid</reimplements>
        <param>
          <type>uint8_t</type>
          <declname>bssid</declname>
          <array>[6]</array>
        </param>
        <briefdescription>
<para>Get connected network BSSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bssid</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store BSSID (6 bytes) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="190" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="839" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a3d22fc24922e5e4d08531fdeaacfe371" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::SetPowerSave</definition>
        <argsstring>(hf_wifi_power_save_t mode) override</argsstring>
        <name>SetPowerSave</name>
        <qualifiedname>EspWifi::SetPowerSave</qualifiedname>
        <reimplements refid="classBaseWifi_1ab17695fd4b2f50230451d82ac8c746e4">SetPowerSave</reimplements>
        <param>
          <type><ref refid="group__wifi_1gafd37336bb8e3a8528795ddfdbd9d5760" kindref="member">hf_wifi_power_save_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set power save mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Power save mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="193" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="856" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1acc350fad8c7d5563b6dcff4fdbc3c8a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__wifi_1gafd37336bb8e3a8528795ddfdbd9d5760" kindref="member">hf_wifi_power_save_t</ref></type>
        <definition>hf_wifi_power_save_t EspWifi::GetPowerSave</definition>
        <argsstring>() const override</argsstring>
        <name>GetPowerSave</name>
        <qualifiedname>EspWifi::GetPowerSave</qualifiedname>
        <reimplements refid="classBaseWifi_1a0b1b27bfd6843ed21e3d9220ddaad908">GetPowerSave</reimplements>
        <briefdescription>
<para>Get current power save mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current power save mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="194" column="24" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="882" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a3fb1805a09d9f9ff00bd15a9af693d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::RegisterEventCallback</definition>
        <argsstring>(hf_wifi_event_callback_t callback) override</argsstring>
        <name>RegisterEventCallback</name>
        <qualifiedname>EspWifi::RegisterEventCallback</qualifiedname>
        <reimplements refid="classBaseWifi_1a46ce6ae5f1b9193941c1e3daaf88ae0c">RegisterEventCallback</reimplements>
        <param>
          <type><ref refid="group__wifi_1gafc36eb4cdfaf0c2ea45afeaac3ad13c9" kindref="member">hf_wifi_event_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Register event callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Event callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="197" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="907" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a9cd11cd1acebc5455ca6b7357987daa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::UnregisterEventCallback</definition>
        <argsstring>() override</argsstring>
        <name>UnregisterEventCallback</name>
        <qualifiedname>EspWifi::UnregisterEventCallback</qualifiedname>
        <reimplements refid="classBaseWifi_1a6b722385f7ca418d40f17c853f1483b4">UnregisterEventCallback</reimplements>
        <briefdescription>
<para>Unregister event callback. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="198" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="913" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a98c82d71b4bf54dfaa20c305fae750d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::GetMacAddress</definition>
        <argsstring>(uint8_t mac[6], uint8_t interface=0) const override</argsstring>
        <name>GetMacAddress</name>
        <qualifiedname>EspWifi::GetMacAddress</qualifiedname>
        <reimplements refid="classBaseWifi_1a87af382a1139b74961f048b094e60cb5">GetMacAddress</reimplements>
        <param>
          <type>uint8_t</type>
          <declname>mac</declname>
          <array>[6]</array>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>interface</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get MAC address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store MAC address (6 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>WiFi interface (0 for station, 1 for AP) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="201" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="919" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a91ddbfd6b2f471e1ed5329ad32833401" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::SetMacAddress</definition>
        <argsstring>(const uint8_t mac[6], uint8_t interface=0) override</argsstring>
        <name>SetMacAddress</name>
        <qualifiedname>EspWifi::SetMacAddress</qualifiedname>
        <reimplements refid="classBaseWifi_1aace6973de51aaa1b7157f15cf677f0f2">SetMacAddress</reimplements>
        <param>
          <type>const uint8_t</type>
          <declname>mac</declname>
          <array>[6]</array>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>interface</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set MAC address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mac</parametername>
</parameternamelist>
<parameterdescription>
<para>MAC address to set (6 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interface</parametername>
</parameternamelist>
<parameterdescription>
<para>WiFi interface (0 for station, 1 for AP) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="202" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="942" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a3807a44527938991f110f33e70ab0caa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>uint8_t</type>
        <definition>uint8_t EspWifi::GetChannel</definition>
        <argsstring>() const override</argsstring>
        <name>GetChannel</name>
        <qualifiedname>EspWifi::GetChannel</qualifiedname>
        <reimplements refid="classBaseWifi_1a2b10843cc30b6e3aac4f81db0ab03cb0">GetChannel</reimplements>
        <briefdescription>
<para>Get WiFi channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current channel, or 0 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="203" column="11" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="965" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1aa24463dc5e86cc6c851044213ce711d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::SetChannel</definition>
        <argsstring>(uint8_t channel) override</argsstring>
        <name>SetChannel</name>
        <qualifiedname>EspWifi::SetChannel</qualifiedname>
        <reimplements refid="classBaseWifi_1ab8b157a985ffb062418456b66d523f92">SetChannel</reimplements>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Set WiFi channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number (1-14) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="204" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="981" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a14f566033c19a84722983c1d5888cf4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::SetAdvancedConfig</definition>
        <argsstring>(const EspWifiAdvancedConfig &amp;config)</argsstring>
        <name>SetAdvancedConfig</name>
        <qualifiedname>EspWifi::SetAdvancedConfig</qualifiedname>
        <param>
          <type>const <ref refid="structEspWifiAdvancedConfig" kindref="compound">EspWifiAdvancedConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Set advanced ESP32-specific configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Advanced configuration structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="213" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a74e97d6fb2a28c6af5b73a27977c5789" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::GetAdvancedConfig</definition>
        <argsstring>(EspWifiAdvancedConfig &amp;config) const</argsstring>
        <name>GetAdvancedConfig</name>
        <qualifiedname>EspWifi::GetAdvancedConfig</qualifiedname>
        <param>
          <type><ref refid="structEspWifiAdvancedConfig" kindref="compound">EspWifiAdvancedConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get current advanced configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store current configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="220" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1319" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a3358bcb3cae09e022d3343eff09f69b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::EnableWpa3Transition</definition>
        <argsstring>(bool enable)</argsstring>
        <name>EnableWpa3Transition</name>
        <qualifiedname>EspWifi::EnableWpa3Transition</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable WPA3 transition mode (WPA2/WPA3 mixed) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable transition mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="227" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a481a3cefdcae5362c5314e3ec50e1efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::ConfigureRoaming</definition>
        <argsstring>(bool enable_11k, bool enable_11r, bool enable_11v)</argsstring>
        <name>ConfigureRoaming</name>
        <qualifiedname>EspWifi::ConfigureRoaming</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable_11k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_11r</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_11v</declname>
        </param>
        <briefdescription>
<para>Configure 802.11k/r/v roaming features. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable_11k</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable 802.11k Radio Resource Management </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_11r</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable 802.11r Fast BSS Transition </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_11v</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable 802.11v BSS Transition Management </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="236" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a92f3b8669675d2c6735e71987f4cfb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::ConfigureEnterprise</definition>
        <argsstring>(const std::string &amp;username, const std::string &amp;password, const std::string &amp;ca_cert=&quot;&quot;, const std::string &amp;client_cert=&quot;&quot;, const std::string &amp;client_key=&quot;&quot;)</argsstring>
        <name>ConfigureEnterprise</name>
        <qualifiedname>EspWifi::ConfigureEnterprise</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>password</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ca_cert</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>client_cert</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>client_key</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Configure WPA2/WPA3 Enterprise authentication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>Enterprise username </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>Enterprise password </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ca_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>CA certificate (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>Client certificate (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Client private key (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="247" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a7a84d3d76c4d53344b418da4b53f7433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StartSmartConfig</definition>
        <argsstring>(smartconfig_type_t type=SC_TYPE_ESPTOUCH, uint32_t timeout_ms=60000)</argsstring>
        <name>StartSmartConfig</name>
        <qualifiedname>EspWifi::StartSmartConfig</qualifiedname>
        <param>
          <type>smartconfig_type_t</type>
          <declname>type</declname>
          <defval>SC_TYPE_ESPTOUCH</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout_ms</declname>
          <defval>60000</defval>
        </param>
        <briefdescription>
<para>Start SmartConfig provisioning. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>SmartConfig type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Provisioning timeout in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="258" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a385c3e3f99d1fb65cae8e194ccdd0dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StopSmartConfig</definition>
        <argsstring>()</argsstring>
        <name>StopSmartConfig</name>
        <qualifiedname>EspWifi::StopSmartConfig</qualifiedname>
        <briefdescription>
<para>Stop SmartConfig provisioning. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="265" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a1a9932ca927536ee20c8cea6074b1b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::InitMesh</definition>
        <argsstring>(const uint8_t mesh_id[6], uint8_t max_layer=6, uint16_t max_connection=10)</argsstring>
        <name>InitMesh</name>
        <qualifiedname>EspWifi::InitMesh</qualifiedname>
        <param>
          <type>const uint8_t</type>
          <declname>mesh_id</declname>
          <array>[6]</array>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>max_layer</declname>
          <defval>6</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_connection</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Initialize ESP-MESH networking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Mesh network ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_layer</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum mesh layers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_connection</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum connections per node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="289" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a2bdcc63c1e0be76c5172d2b968738fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StartMeshRoot</definition>
        <argsstring>()</argsstring>
        <name>StartMeshRoot</name>
        <qualifiedname>EspWifi::StartMeshRoot</qualifiedname>
        <briefdescription>
<para>Start ESP-MESH as root node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="296" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a9e5c92a07f6b5adbc9dfb18102321b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StartMeshChild</definition>
        <argsstring>()</argsstring>
        <name>StartMeshChild</name>
        <qualifiedname>EspWifi::StartMeshChild</qualifiedname>
        <briefdescription>
<para>Start ESP-MESH as child node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="302" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a4fc6b2c0a4eca9a2160641815a573a56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::StopMesh</definition>
        <argsstring>()</argsstring>
        <name>StopMesh</name>
        <qualifiedname>EspWifi::StopMesh</qualifiedname>
        <briefdescription>
<para>Stop ESP-MESH networking. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="308" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a9047ef32fc68f930803768a071c9198f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::GetStatistics</definition>
        <argsstring>(wifi_pkt_rx_ctrl_t &amp;stats) const</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>EspWifi::GetStatistics</qualifiedname>
        <param>
          <type>wifi_pkt_rx_ctrl_t &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Get WiFi statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store WiFi statistics </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="315" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a5633082de37e5cbec30a83797f1b07b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::SetTxPower</definition>
        <argsstring>(uint8_t power)</argsstring>
        <name>SetTxPower</name>
        <qualifiedname>EspWifi::SetTxPower</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Set WiFi TX power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>power</parametername>
</parameternamelist>
<parameterdescription>
<para>TX power in dBm (0-20) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="322" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1330" bodyend="1347"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ae5e01cbadeb8020b87dff80abf89d474" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t EspWifi::GetTxPower</definition>
        <argsstring>() const</argsstring>
        <name>GetTxPower</name>
        <qualifiedname>EspWifi::GetTxPower</qualifiedname>
        <briefdescription>
<para>Get WiFi TX power. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current TX power in dBm, or -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="328" column="10" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1349" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a8a1834e3fa7ee01a5cab72d28e1ccfa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::SetBandwidth</definition>
        <argsstring>(wifi_bandwidth_t bandwidth)</argsstring>
        <name>SetBandwidth</name>
        <qualifiedname>EspWifi::SetBandwidth</qualifiedname>
        <param>
          <type>wifi_bandwidth_t</type>
          <declname>bandwidth</declname>
        </param>
        <briefdescription>
<para>Set WiFi channel bandwidth. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bandwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel bandwidth </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="335" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1359" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ae11fb0318c3118264269ed8c3f0f0190" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wifi_bandwidth_t</type>
        <definition>wifi_bandwidth_t EspWifi::GetBandwidth</definition>
        <argsstring>() const</argsstring>
        <name>GetBandwidth</name>
        <qualifiedname>EspWifi::GetBandwidth</qualifiedname>
        <briefdescription>
<para>Get WiFi channel bandwidth. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current channel bandwidth </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="341" column="20" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1370" bodyend="1378"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a695a29d07e81253c872c6e74f3ec2063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::PerformCalibration</definition>
        <argsstring>()</argsstring>
        <name>PerformCalibration</name>
        <qualifiedname>EspWifi::PerformCalibration</qualifiedname>
        <briefdescription>
<para>Perform WiFi calibration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="347" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a5e18ef2bcb49785dab2233210ff78d2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::GetConnectionInfo</definition>
        <argsstring>(wifi_ap_record_t &amp;info) const</argsstring>
        <name>GetConnectionInfo</name>
        <qualifiedname>EspWifi::GetConnectionInfo</qualifiedname>
        <param>
          <type>wifi_ap_record_t &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get detailed connection information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store connection information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="354" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEspWifi_1af403775cb53f1bfebb26574310ed39ce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::InitNetif</definition>
        <argsstring>()</argsstring>
        <name>InitNetif</name>
        <qualifiedname>EspWifi::InitNetif</qualifiedname>
        <briefdescription>
<para>Initialize ESP-IDF network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="407" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ad654b6954920eef0906b3d4439e39c8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::DeinitNetif</definition>
        <argsstring>()</argsstring>
        <name>DeinitNetif</name>
        <qualifiedname>EspWifi::DeinitNetif</qualifiedname>
        <briefdescription>
<para>Deinitialize ESP-IDF network interface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="413" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1091" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a02a9ff4c16b5096b2912bd1e4a93056e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::RegisterEventHandlers</definition>
        <argsstring>()</argsstring>
        <name>RegisterEventHandlers</name>
        <qualifiedname>EspWifi::RegisterEventHandlers</qualifiedname>
        <briefdescription>
<para>Register ESP-IDF event handlers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="419" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a219d3df4683abcdfa67b05cf28578bcf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::UnregisterEventHandlers</definition>
        <argsstring>()</argsstring>
        <name>UnregisterEventHandlers</name>
        <qualifiedname>EspWifi::UnregisterEventHandlers</qualifiedname>
        <briefdescription>
<para>Unregister ESP-IDF event handlers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="425" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a02d8d51377fc2b7c74b040bd2b376a81" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wifi_mode_t</type>
        <definition>wifi_mode_t EspWifi::ConvertToEspMode</definition>
        <argsstring>(hf_wifi_mode_t mode) const</argsstring>
        <name>ConvertToEspMode</name>
        <qualifiedname>EspWifi::ConvertToEspMode</qualifiedname>
        <param>
          <type><ref refid="group__wifi_1ga90ab2c8a51fc7cb116b659df115407b9" kindref="member">hf_wifi_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Convert HardFOC WiFi mode to ESP-IDF mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>HardFOC WiFi mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP-IDF WiFi mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="432" column="15" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1008" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1abd1b5b7ed9c18fe3f6731e125c78e385" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__wifi_1ga90ab2c8a51fc7cb116b659df115407b9" kindref="member">hf_wifi_mode_t</ref></type>
        <definition>hf_wifi_mode_t EspWifi::ConvertFromEspMode</definition>
        <argsstring>(wifi_mode_t mode) const</argsstring>
        <name>ConvertFromEspMode</name>
        <qualifiedname>EspWifi::ConvertFromEspMode</qualifiedname>
        <param>
          <type>wifi_mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Convert ESP-IDF WiFi mode to HardFOC mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF WiFi mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HardFOC WiFi mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="439" column="18" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1244" bodyend="1257"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a85184affd47380dc4c18243c52695aff" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>wifi_auth_mode_t</type>
        <definition>wifi_auth_mode_t EspWifi::ConvertToEspAuthMode</definition>
        <argsstring>(hf_wifi_security_t security) const</argsstring>
        <name>ConvertToEspAuthMode</name>
        <qualifiedname>EspWifi::ConvertToEspAuthMode</qualifiedname>
        <param>
          <type><ref refid="group__wifi_1gaa433fd9116606cbe69d1feeb748f41f7" kindref="member">hf_wifi_security_t</ref></type>
          <declname>security</declname>
        </param>
        <briefdescription>
<para>Convert HardFOC security to ESP-IDF auth mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>security</parametername>
</parameternamelist>
<parameterdescription>
<para>HardFOC security type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP-IDF auth mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="446" column="20" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1259" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ab9b25f64fc30d6f86d4cb3e701eee2c5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__wifi_1gaa433fd9116606cbe69d1feeb748f41f7" kindref="member">hf_wifi_security_t</ref></type>
        <definition>hf_wifi_security_t EspWifi::ConvertFromEspAuthMode</definition>
        <argsstring>(wifi_auth_mode_t auth_mode) const</argsstring>
        <name>ConvertFromEspAuthMode</name>
        <qualifiedname>EspWifi::ConvertFromEspAuthMode</qualifiedname>
        <param>
          <type>wifi_auth_mode_t</type>
          <declname>auth_mode</declname>
        </param>
        <briefdescription>
<para>Convert ESP-IDF auth mode to HardFOC security. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auth_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF auth mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HardFOC security type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="453" column="22" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1287" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a51a8bcf4f7e88ff33930b878333c0453" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::ConvertEspError</definition>
        <argsstring>(esp_err_t esp_err) const</argsstring>
        <name>ConvertEspError</name>
        <qualifiedname>EspWifi::ConvertEspError</qualifiedname>
        <param>
          <type>esp_err_t</type>
          <declname>esp_err</declname>
        </param>
        <briefdescription>
<para>Convert ESP-IDF error to HardFOC error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>esp_err</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HardFOC WiFi error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="460" column="17" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1038" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a53e8186fcd0b012235228f62264d616c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::handleWifiEvent</definition>
        <argsstring>(int32_t event_id, void *event_data)</argsstring>
        <name>handleWifiEvent</name>
        <qualifiedname>EspWifi::handleWifiEvent</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
<para>Handle WiFi events internally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF event ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Event data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="497" column="8" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1136" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a080e6d8828cc502fe12217cb8702ceb1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::handleIpEvent</definition>
        <argsstring>(int32_t event_id, void *event_data)</argsstring>
        <name>handleIpEvent</name>
        <qualifiedname>EspWifi::handleIpEvent</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
<para>Handle IP events internally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF event ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Event data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="504" column="8" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1202" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ae6ab0e3f8f9ce7a8a0c2710b3069e52e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::handleSmartconfigEvent</definition>
        <argsstring>(int32_t event_id, void *event_data)</argsstring>
        <name>handleSmartconfigEvent</name>
        <qualifiedname>EspWifi::handleSmartconfigEvent</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
<para>Handle SmartConfig events internally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF event ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Event data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="511" column="8" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1229" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a77de796e68ddc5176f8d9d7ec5c16188" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::NotifyEventCallback</definition>
        <argsstring>(hf_wifi_event_t event, void *event_data)</argsstring>
        <name>NotifyEventCallback</name>
        <qualifiedname>EspWifi::NotifyEventCallback</qualifiedname>
        <param>
          <type><ref refid="group__wifi_1ga0fc5cd83d2820476528dba010f9ccfbb" kindref="member">hf_wifi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
<para>Notify user event callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>HardFOC WiFi event </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Event data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="518" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1ac0a0787613efaf1d60a90904ff0c055a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::UpdateState</definition>
        <argsstring>(hf_wifi_state_t new_state)</argsstring>
        <name>UpdateState</name>
        <qualifiedname>EspWifi::UpdateState</qualifiedname>
        <param>
          <type><ref refid="group__wifi_1ga45e751432d70ba4ee36c1369914ee419" kindref="member">hf_wifi_state_t</ref></type>
          <declname>new_state</declname>
        </param>
        <briefdescription>
<para>Update internal state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_state</parametername>
</parameternamelist>
<parameterdescription>
<para>New WiFi state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="524" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a9d784a26c3ea531c17112e0e3465b3ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8" kindref="member">hf_wifi_err_t</ref></type>
        <definition>hf_wifi_err_t EspWifi::ApplyAdvancedConfig</definition>
        <argsstring>()</argsstring>
        <name>ApplyAdvancedConfig</name>
        <qualifiedname>EspWifi::ApplyAdvancedConfig</qualifiedname>
        <briefdescription>
<para>Apply advanced configuration settings. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="BaseWifi_8h_1a0d4cc4d0f717f7a4e0287c31be9f4da8a23d810fd453be783ee7acbe5126e5c78" kindref="member">hf_wifi_err_t::WIFI_SUCCESS</ref> on success, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="530" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1aabc702294956cafe64737dee7a463d77" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspWifi::ValidateConfig</definition>
        <argsstring>(const hf_wifi_station_config_t &amp;config) const</argsstring>
        <name>ValidateConfig</name>
        <qualifiedname>EspWifi::ValidateConfig</qualifiedname>
        <param>
          <type>const <ref refid="structhf__wifi__station__config__t" kindref="compound">hf_wifi_station_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Validate configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="537" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a961be99b2a602814d89231be57006f71" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspWifi::ValidateApConfig</definition>
        <argsstring>(const hf_wifi_ap_config_t &amp;config) const</argsstring>
        <name>ValidateApConfig</name>
        <qualifiedname>EspWifi::ValidateApConfig</qualifiedname>
        <param>
          <type>const <ref refid="structhf__wifi__ap__config__t" kindref="compound">hf_wifi_ap_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Validate AP configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>AP configuration to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="544" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a2f3b9b5a7e2cc5997508835e9b997163" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspWifi::EspWifi</definition>
        <argsstring>(const EspWifi &amp;)=delete</argsstring>
        <name>EspWifi</name>
        <qualifiedname>EspWifi::EspWifi</qualifiedname>
        <param>
          <type>const <ref refid="classEspWifi" kindref="compound">EspWifi</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="547" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a0118baa225037dd065107956fbef81a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspWifi" kindref="compound">EspWifi</ref> &amp;</type>
        <definition>EspWifi &amp; EspWifi::operator=</definition>
        <argsstring>(const EspWifi &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspWifi::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classEspWifi" kindref="compound">EspWifi</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="548" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classEspWifi_1a85ea58d88862a24b24e337551056b4f6" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::wifiEventHandler</definition>
        <argsstring>(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data)</argsstring>
        <name>wifiEventHandler</name>
        <qualifiedname>EspWifi::wifiEventHandler</qualifiedname>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>esp_event_base_t</type>
          <declname>event_base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
<para>Static WiFi event handler for ESP-IDF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User argument (<ref refid="classEspWifi" kindref="compound">EspWifi</ref> instance) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_base</parametername>
</parameternamelist>
<parameterdescription>
<para>Event base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Event data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="469" column="15" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1016" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a23bfa099193ab347fbe7022193e6ff47" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::ipEventHandler</definition>
        <argsstring>(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data)</argsstring>
        <name>ipEventHandler</name>
        <qualifiedname>EspWifi::ipEventHandler</qualifiedname>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>esp_event_base_t</type>
          <declname>event_base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
<para>Static IP event handler for ESP-IDF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User argument (<ref refid="classEspWifi" kindref="compound">EspWifi</ref> instance) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_base</parametername>
</parameternamelist>
<parameterdescription>
<para>Event base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Event data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="479" column="15" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1022" bodyend="1026"/>
      </memberdef>
      <memberdef kind="function" id="classEspWifi_1a096aada913999e7bfbd3ec2c1b8d570f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EspWifi::smartconfigEventHandler</definition>
        <argsstring>(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data)</argsstring>
        <name>smartconfigEventHandler</name>
        <qualifiedname>EspWifi::smartconfigEventHandler</qualifiedname>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>esp_event_base_t</type>
          <declname>event_base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>event_data</declname>
        </param>
        <briefdescription>
<para>Static SmartConfig event handler for ESP-IDF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User argument (<ref refid="classEspWifi" kindref="compound">EspWifi</ref> instance) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_base</parametername>
</parameternamelist>
<parameterdescription>
<para>Event base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Event data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspWifi.h" line="489" column="15" bodyfile="src/mcu/esp32/EspWifi.cpp" bodystart="1028" bodyend="1032"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Advanced ESP32 implementation of unified <ref refid="classBaseWifi" kindref="compound">BaseWifi</ref> with ESP-IDF v5.5+ features. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a comprehensive implementation of <ref refid="classBaseWifi" kindref="compound">BaseWifi</ref> for ESP32 microcontrollers with support for both basic and advanced features including:</para>
<para><bold>Basic Features:</bold><itemizedlist>
<listitem><para>Station and Access Point modes</para>
</listitem><listitem><para>Network scanning and connection management</para>
</listitem><listitem><para>WPA/WPA2/WPA3 security support</para>
</listitem><listitem><para>Power management and optimization</para>
</listitem><listitem><para>Thread-safe state management</para>
</listitem></itemizedlist>
</para>
<para><bold>Advanced Features (ESP-IDF v5.5+):</bold><itemizedlist>
<listitem><para>WPA3 Personal and Enterprise security</para>
</listitem><listitem><para>802.11k/r/v roaming standards</para>
</listitem><listitem><para>Protected Management Frames (PMF)</para>
</listitem><listitem><para>A-MPDU aggregation for performance</para>
</listitem><listitem><para>ESP-MESH networking</para>
</listitem><listitem><para>SmartConfig and WPS provisioning</para>
</listitem><listitem><para>Enterprise authentication (EAP-TLS, PEAP, etc.)</para>
</listitem><listitem><para>Advanced power save modes</para>
</listitem><listitem><para>Fast BSS transition and roaming</para>
</listitem></itemizedlist>
</para>
<para><bold>Performance Optimizations:</bold><itemizedlist>
<listitem><para>Hardware-accelerated cryptography</para>
</listitem><listitem><para>DMA-based data transfers</para>
</listitem><listitem><para>Optimized buffer management</para>
</listitem><listitem><para>Low-latency event handling</para>
</listitem><listitem><para>Memory pool management</para>
</listitem></itemizedlist>
</para>
<para><bold>Thread Safety:</bold><itemizedlist>
<listitem><para>All public methods are thread-safe</para>
</listitem><listitem><para>Internal state protection with mutexes</para>
</listitem><listitem><para>Atomic operations for status flags</para>
</listitem><listitem><para>Event queue synchronization </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BaseWifi</label>
        <link refid="classBaseWifi"/>
      </node>
      <node id="1">
        <label>EspWifi</label>
        <link refid="classEspWifi"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BaseWifi</label>
        <link refid="classBaseWifi"/>
      </node>
      <node id="1">
        <label>EspWifi</label>
        <link refid="classEspWifi"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_event_mutex</edgelabel>
          <edgelabel>m_mutex</edgelabel>
          <edgelabel>m_scan_mutex</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_sta_config</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_ap_config</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_advanced_config</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>EspWifiAdvancedConfig</label>
        <link refid="structEspWifiAdvancedConfig"/>
      </node>
      <node id="3">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="5">
        <label>hf_wifi_ap_config_t</label>
        <link refid="structhf__wifi__ap__config__t"/>
      </node>
      <node id="4">
        <label>hf_wifi_station_config_t</label>
        <link refid="structhf__wifi__station__config__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspWifi.h" line="143" column="1" bodyfile="inc/mcu/esp32/EspWifi.h" bodystart="143" bodyend="549"/>
    <listofallmembers>
      <member refid="classEspWifi_1a9d784a26c3ea531c17112e0e3465b3ad" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ApplyAdvancedConfig</name></member>
      <member refid="classBaseWifi_1a150dc952c7f2336aa1ba5dbf53fe2f9d" prot="protected" virt="non-virtual"><scope>EspWifi</scope><name>BaseWifi</name></member>
      <member refid="classBaseWifi_1a850a025d5f7ddceaf6f8f551cde22cf2" prot="protected" virt="non-virtual"><scope>EspWifi</scope><name>BaseWifi</name></member>
      <member refid="classEspWifi_1a2a2b0ecff30d6d953da490565c8ca0b9" prot="public" virt="virtual"><scope>EspWifi</scope><name>ConfigureAccessPoint</name></member>
      <member refid="classEspWifi_1a92f3b8669675d2c6735e71987f4cfb4e" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>ConfigureEnterprise</name></member>
      <member refid="classEspWifi_1a481a3cefdcae5362c5314e3ec50e1efc" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>ConfigureRoaming</name></member>
      <member refid="classEspWifi_1af9d85df22e5b2f7f0e4a9f083a68e27b" prot="public" virt="virtual"><scope>EspWifi</scope><name>ConfigureStation</name></member>
      <member refid="classEspWifi_1ac4dc5a2ff0d3699cb5dfc7dabe2e4522" prot="public" virt="virtual"><scope>EspWifi</scope><name>Connect</name></member>
      <member refid="classEspWifi_1a51a8bcf4f7e88ff33930b878333c0453" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ConvertEspError</name></member>
      <member refid="classEspWifi_1ab9b25f64fc30d6f86d4cb3e701eee2c5" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ConvertFromEspAuthMode</name></member>
      <member refid="classEspWifi_1abd1b5b7ed9c18fe3f6731e125c78e385" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ConvertFromEspMode</name></member>
      <member refid="classEspWifi_1a85184affd47380dc4c18243c52695aff" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ConvertToEspAuthMode</name></member>
      <member refid="classEspWifi_1a02d8d51377fc2b7c74b040bd2b376a81" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ConvertToEspMode</name></member>
      <member refid="classEspWifi_1a08a5f89824b7d4f845cecabc4278f356" prot="public" virt="virtual"><scope>EspWifi</scope><name>Deinitialize</name></member>
      <member refid="classEspWifi_1ad654b6954920eef0906b3d4439e39c8c" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>DeinitNetif</name></member>
      <member refid="classEspWifi_1af8511154338b1285cb386ba2cde71158" prot="public" virt="virtual"><scope>EspWifi</scope><name>Disconnect</name></member>
      <member refid="classEspWifi_1a3358bcb3cae09e022d3343eff09f69b2" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>EnableWpa3Transition</name></member>
      <member refid="classEspWifi_1aa2ad725cf4b8c9880a6a2649f75ccbd4" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>EspWifi</name></member>
      <member refid="classEspWifi_1a2f3b9b5a7e2cc5997508835e9b997163" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>EspWifi</name></member>
      <member refid="classEspWifi_1a74e97d6fb2a28c6af5b73a27977c5789" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>GetAdvancedConfig</name></member>
      <member refid="classEspWifi_1ae11fb0318c3118264269ed8c3f0f0190" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>GetBandwidth</name></member>
      <member refid="classEspWifi_1a3807a44527938991f110f33e70ab0caa" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetChannel</name></member>
      <member refid="classEspWifi_1ac35856636ff6281693e9ce57dc13d162" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetConnectedBssid</name></member>
      <member refid="classEspWifi_1af65c3becf925791207bc7333be78d3ef" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetConnectedSsid</name></member>
      <member refid="classEspWifi_1abf1bc4660bcef2ae9d213b5f93f3ca8c" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetConnectedStationCount</name></member>
      <member refid="classEspWifi_1a5e18ef2bcb49785dab2233210ff78d2d" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>GetConnectionInfo</name></member>
      <member refid="group__wifi_1gafde1b68efc0648ef58ccb0ee5d3d9644" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>GetErrorString</name></member>
      <member refid="classEspWifi_1a91b02d2cc3f0a1bc3a93bef5ac1767f0" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetIpInfo</name></member>
      <member refid="classEspWifi_1a98c82d71b4bf54dfaa20c305fae750d2" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetMacAddress</name></member>
      <member refid="classEspWifi_1a916f331fe7258222a58f213dec3e3a0b" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetMode</name></member>
      <member refid="classEspWifi_1acc350fad8c7d5563b6dcff4fdbc3c8a6" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetPowerSave</name></member>
      <member refid="classEspWifi_1accc189589995ac17cd27a9ba60d63c9a" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetRssi</name></member>
      <member refid="classEspWifi_1a5397db2984b1531639511dee9c013a9f" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetScanResults</name></member>
      <member refid="classEspWifi_1abaa4ac07b9ef057964dfd07dd2948e47" prot="public" virt="virtual"><scope>EspWifi</scope><name>GetState</name></member>
      <member refid="classEspWifi_1a9047ef32fc68f930803768a071c9198f" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>GetStatistics</name></member>
      <member refid="classEspWifi_1ae5e01cbadeb8020b87dff80abf89d474" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>GetTxPower</name></member>
      <member refid="classEspWifi_1a080e6d8828cc502fe12217cb8702ceb1" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>handleIpEvent</name></member>
      <member refid="classEspWifi_1ae6ab0e3f8f9ce7a8a0c2710b3069e52e" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>handleSmartconfigEvent</name></member>
      <member refid="classEspWifi_1a53e8186fcd0b012235228f62264d616c" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>handleWifiEvent</name></member>
      <member refid="classEspWifi_1aba6a1fd280dbcd23fee9281eaaef7a20" prot="public" virt="virtual"><scope>EspWifi</scope><name>Initialize</name></member>
      <member refid="classEspWifi_1a1a9932ca927536ee20c8cea6074b1b8d" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>InitMesh</name></member>
      <member refid="classEspWifi_1af403775cb53f1bfebb26574310ed39ce" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>InitNetif</name></member>
      <member refid="classEspWifi_1a23bfa099193ab347fbe7022193e6ff47" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ipEventHandler</name></member>
      <member refid="classEspWifi_1a5a1d456000d644dfd8282673ba4f5009" prot="public" virt="virtual"><scope>EspWifi</scope><name>IsAccessPointActive</name></member>
      <member refid="classEspWifi_1ae3418e13e9da9cbe0b0b68656233847a" prot="public" virt="virtual"><scope>EspWifi</scope><name>IsConnected</name></member>
      <member refid="classEspWifi_1a8ac15d4e7a8156eafa7b2850495c3083" prot="public" virt="virtual"><scope>EspWifi</scope><name>IsInitialized</name></member>
      <member refid="classEspWifi_1a43e97cdf4af2c05b2e68031add87d782" prot="public" virt="virtual"><scope>EspWifi</scope><name>IsScanning</name></member>
      <member refid="classEspWifi_1a979f148264a16344c727a705baeb1414" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_advanced_config</name></member>
      <member refid="classEspWifi_1aa803cd3263ba9a2ae68fae0ed07e2693" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_ap_active</name></member>
      <member refid="classEspWifi_1ae403782c7db21e828d909f147cd8713b" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_ap_config</name></member>
      <member refid="classEspWifi_1a1cc51a8850a5a1c8fdf4bcada04bde90" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_ap_netif</name></member>
      <member refid="classEspWifi_1ad9bcdfee7deaa0fd3bd1c41378e359dc" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_channel</name></member>
      <member refid="classEspWifi_1af91498a9a25bfbe8819054cc8235a644" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_connected</name></member>
      <member refid="classEspWifi_1a545838e3b8d960377c122e753db8cf47" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_enabled</name></member>
      <member refid="classEspWifi_1ab1c6e03ad971d611da51fcdf3eed5cf8" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_event_callback</name></member>
      <member refid="classEspWifi_1adbfa09b39eb14ed286bd28b04cff7d98" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_event_group</name></member>
      <member refid="classEspWifi_1a3d42ddd9a7a2790eeeec94c1519c0995" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_event_mutex</name></member>
      <member refid="classEspWifi_1ab362b3836b671682f5789ca2e9fad4d6" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_event_queue</name></member>
      <member refid="classEspWifi_1a3a1a88d567809ce53ce3d5575755b453" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_event_user_data</name></member>
      <member refid="classEspWifi_1adb31106309d33af5ce16e90e46906939" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_initialized</name></member>
      <member refid="classEspWifi_1ae01a87adacafedea6f333196683bfe27" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_ip_event_handler</name></member>
      <member refid="classEspWifi_1a54eddd362c8341bba3715f70a68dbd86" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_mesh_active</name></member>
      <member refid="classEspWifi_1a0d89e54dd5537c34d49da6bda7c74c4c" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_mode</name></member>
      <member refid="classEspWifi_1aa0a9f8d2216f73029662106ba9112e8b" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_mutex</name></member>
      <member refid="classEspWifi_1acf74e0cf81678090bfd6217dbfc5d0ad" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_rssi</name></member>
      <member refid="classEspWifi_1a2c6d455345af43e9d7fbac62b7ccc71c" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_scan_callback</name></member>
      <member refid="classEspWifi_1a06558cebbce99692087713ec7985ae31" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_scan_mutex</name></member>
      <member refid="classEspWifi_1a5d96729fa9dac2b05153578461f1e781" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_scan_results</name></member>
      <member refid="classEspWifi_1a8667062fa9debd9273cdd2480636259f" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_scan_user_data</name></member>
      <member refid="classEspWifi_1a7035508c06cc3cd794c3c0baec151f30" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_scanning</name></member>
      <member refid="classEspWifi_1acf463caaf71fcae20d22a391a0e66250" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_smartconfig_active</name></member>
      <member refid="classEspWifi_1a4a996c672bdce9931dfdea768d84179d" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_sta_config</name></member>
      <member refid="classEspWifi_1ab07e9f6a54a566842081cb9e437f8c10" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_sta_netif</name></member>
      <member refid="classEspWifi_1aaf955c4a26114ca8ce1b9a436bab2ed5" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_state</name></member>
      <member refid="classEspWifi_1a9f8dedfb68e0d7b6acf46ccdf231c798" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>m_wifi_event_handler</name></member>
      <member refid="classEspWifi_1a77de796e68ddc5176f8d9d7ec5c16188" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>NotifyEventCallback</name></member>
      <member refid="classEspWifi_1a0118baa225037dd065107956fbef81a2" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>operator=</name></member>
      <member refid="classBaseWifi_1a4c3a60c174313577476f5ede80d0382b" prot="protected" virt="non-virtual" ambiguityscope="BaseWifi::"><scope>EspWifi</scope><name>operator=</name></member>
      <member refid="classEspWifi_1a695a29d07e81253c872c6e74f3ec2063" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>PerformCalibration</name></member>
      <member refid="classEspWifi_1a3fb1805a09d9f9ff00bd15a9af693d88" prot="public" virt="virtual"><scope>EspWifi</scope><name>RegisterEventCallback</name></member>
      <member refid="classEspWifi_1a02a9ff4c16b5096b2912bd1e4a93056e" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>RegisterEventHandlers</name></member>
      <member refid="classEspWifi_1a14f566033c19a84722983c1d5888cf4d" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>SetAdvancedConfig</name></member>
      <member refid="classEspWifi_1a8a1834e3fa7ee01a5cab72d28e1ccfa6" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>SetBandwidth</name></member>
      <member refid="classEspWifi_1aa24463dc5e86cc6c851044213ce711d3" prot="public" virt="virtual"><scope>EspWifi</scope><name>SetChannel</name></member>
      <member refid="classEspWifi_1a91ddbfd6b2f471e1ed5329ad32833401" prot="public" virt="virtual"><scope>EspWifi</scope><name>SetMacAddress</name></member>
      <member refid="classEspWifi_1ad572aec1ea4575004b5639a386948c04" prot="public" virt="virtual"><scope>EspWifi</scope><name>SetMode</name></member>
      <member refid="classEspWifi_1a3d22fc24922e5e4d08531fdeaacfe371" prot="public" virt="virtual"><scope>EspWifi</scope><name>SetPowerSave</name></member>
      <member refid="classEspWifi_1a5633082de37e5cbec30a83797f1b07b7" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>SetTxPower</name></member>
      <member refid="classEspWifi_1a096aada913999e7bfbd3ec2c1b8d570f" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>smartconfigEventHandler</name></member>
      <member refid="classEspWifi_1a1f140a31ef650411478818c285aef64b" prot="public" virt="virtual"><scope>EspWifi</scope><name>StartAccessPoint</name></member>
      <member refid="classEspWifi_1a9e5c92a07f6b5adbc9dfb18102321b81" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>StartMeshChild</name></member>
      <member refid="classEspWifi_1a2bdcc63c1e0be76c5172d2b968738fae" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>StartMeshRoot</name></member>
      <member refid="classEspWifi_1af8eb0906128aeb938eb5822a910d7d63" prot="public" virt="virtual"><scope>EspWifi</scope><name>StartScan</name></member>
      <member refid="classEspWifi_1a7a84d3d76c4d53344b418da4b53f7433" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>StartSmartConfig</name></member>
      <member refid="classEspWifi_1aeec25630ed35de561df39b358418e566" prot="public" virt="virtual"><scope>EspWifi</scope><name>StopAccessPoint</name></member>
      <member refid="classEspWifi_1a4fc6b2c0a4eca9a2160641815a573a56" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>StopMesh</name></member>
      <member refid="classEspWifi_1a385c3e3f99d1fb65cae8e194ccdd0dba" prot="public" virt="non-virtual"><scope>EspWifi</scope><name>StopSmartConfig</name></member>
      <member refid="classEspWifi_1a9cd11cd1acebc5455ca6b7357987daa9" prot="public" virt="virtual"><scope>EspWifi</scope><name>UnregisterEventCallback</name></member>
      <member refid="classEspWifi_1a219d3df4683abcdfa67b05cf28578bcf" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>UnregisterEventHandlers</name></member>
      <member refid="classEspWifi_1ac0a0787613efaf1d60a90904ff0c055a" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>UpdateState</name></member>
      <member refid="classEspWifi_1a961be99b2a602814d89231be57006f71" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ValidateApConfig</name></member>
      <member refid="classEspWifi_1aabc702294956cafe64737dee7a463d77" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>ValidateConfig</name></member>
      <member refid="classEspWifi_1a85ea58d88862a24b24e337551056b4f6" prot="private" virt="non-virtual"><scope>EspWifi</scope><name>wifiEventHandler</name></member>
      <member refid="classBaseWifi_1a564fef8c0ffdd4f1d69b367bb58cbf73" prot="public" virt="virtual"><scope>EspWifi</scope><name>~BaseWifi</name></member>
      <member refid="classEspWifi_1ad68fd60e9409c00ca010c613b97885ac" prot="public" virt="virtual"><scope>EspWifi</scope><name>~EspWifi</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
