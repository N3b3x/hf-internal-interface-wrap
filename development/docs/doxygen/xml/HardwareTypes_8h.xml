<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="HardwareTypes_8h" kind="file" language="C++">
    <compoundname>HardwareTypes.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">limits</includes>
    <includedby refid="SpiComprehensiveTest_8cpp" local="yes">examples/esp32/main/SpiComprehensiveTest.cpp</includedby>
    <includedby refid="TestFramework_8h" local="yes">examples/esp32/main/TestFramework.h</includedby>
    <includedby refid="BaseAdc_8h" local="yes">inc/base/BaseAdc.h</includedby>
    <includedby refid="BaseBluetooth_8h" local="yes">inc/base/BaseBluetooth.h</includedby>
    <includedby refid="BaseCan_8h" local="yes">inc/base/BaseCan.h</includedby>
    <includedby refid="BaseGpio_8h" local="yes">inc/base/BaseGpio.h</includedby>
    <includedby refid="BaseI2c_8h" local="yes">inc/base/BaseI2c.h</includedby>
    <includedby refid="BaseLogger_8h" local="yes">inc/base/BaseLogger.h</includedby>
    <includedby refid="BaseNvs_8h" local="yes">inc/base/BaseNvs.h</includedby>
    <includedby refid="BasePeriodicTimer_8h" local="yes">inc/base/BasePeriodicTimer.h</includedby>
    <includedby refid="BasePio_8h" local="yes">inc/base/BasePio.h</includedby>
    <includedby refid="BasePwm_8h" local="yes">inc/base/BasePwm.h</includedby>
    <includedby refid="BaseSpi_8h" local="yes">inc/base/BaseSpi.h</includedby>
    <includedby refid="BaseTemperature_8h" local="yes">inc/base/BaseTemperature.h</includedby>
    <includedby refid="BaseUart_8h" local="yes">inc/base/BaseUart.h</includedby>
    <includedby refid="BaseWifi_8h" local="yes">inc/base/BaseWifi.h</includedby>
    <includedby refid="EspBluetooth_8h" local="yes">inc/mcu/esp32/EspBluetooth.h</includedby>
    <includedby refid="EspTypes_8h" local="yes">inc/mcu/esp32/utils/EspTypes.h</includedby>
    <includedby refid="EspTypes__ADC_8h" local="yes">inc/mcu/esp32/utils/EspTypes_ADC.h</includedby>
    <includedby refid="EspTypes__Base_8h" local="yes">inc/mcu/esp32/utils/EspTypes_Base.h</includedby>
    <includedby refid="EspTypes__CAN_8h" local="yes">inc/mcu/esp32/utils/EspTypes_CAN.h</includedby>
    <includedby refid="EspTypes__GPIO_8h" local="yes">inc/mcu/esp32/utils/EspTypes_GPIO.h</includedby>
    <includedby refid="EspTypes__I2C_8h" local="yes">inc/mcu/esp32/utils/EspTypes_I2C.h</includedby>
    <includedby refid="EspTypes__NVS_8h" local="yes">inc/mcu/esp32/utils/EspTypes_NVS.h</includedby>
    <includedby refid="EspTypes__PIO_8h" local="yes">inc/mcu/esp32/utils/EspTypes_PIO.h</includedby>
    <includedby refid="EspTypes__PWM_8h" local="yes">inc/mcu/esp32/utils/EspTypes_PWM.h</includedby>
    <includedby refid="EspTypes__SPI_8h" local="yes">inc/mcu/esp32/utils/EspTypes_SPI.h</includedby>
    <includedby refid="EspTypes__Timer_8h" local="yes">inc/mcu/esp32/utils/EspTypes_Timer.h</includedby>
    <includedby refid="EspTypes__UART_8h" local="yes">inc/mcu/esp32/utils/EspTypes_UART.h</includedby>
    <includedby refid="DigitalOutputGuard_8h" local="yes">inc/utils/DigitalOutputGuard.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>inc/base/HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>examples/esp32/main/AdcComprehensiveTest.cpp</label>
        <link refid="AdcComprehensiveTest_8cpp"/>
      </node>
      <node id="5">
        <label>examples/esp32/main/AsciiArtComprehensiveTest.cpp</label>
        <link refid="AsciiArtComprehensiveTest_8cpp"/>
      </node>
      <node id="6">
        <label>examples/esp32/main/BluetoothComprehensiveTest.cpp</label>
        <link refid="BluetoothComprehensiveTest_8cpp"/>
      </node>
      <node id="7">
        <label>examples/esp32/main/CanComprehensiveTest.cpp</label>
        <link refid="CanComprehensiveTest_8cpp"/>
      </node>
      <node id="8">
        <label>examples/esp32/main/DigitalOutputGuardComprehensiveTest.cpp</label>
        <link refid="DigitalOutputGuardComprehensiveTest_8cpp"/>
      </node>
      <node id="9">
        <label>examples/esp32/main/GpioComprehensiveTest.cpp</label>
        <link refid="GpioComprehensiveTest_8cpp"/>
      </node>
      <node id="10">
        <label>examples/esp32/main/I2cComprehensiveTest.cpp</label>
        <link refid="I2cComprehensiveTest_8cpp"/>
      </node>
      <node id="11">
        <label>examples/esp32/main/LoggerComprehensiveTest.cpp</label>
        <link refid="LoggerComprehensiveTest_8cpp"/>
      </node>
      <node id="12">
        <label>examples/esp32/main/NvsComprehensiveTest.cpp</label>
        <link refid="NvsComprehensiveTest_8cpp"/>
      </node>
      <node id="13">
        <label>examples/esp32/main/PioComprehensiveTest.cpp</label>
        <link refid="PioComprehensiveTest_8cpp"/>
      </node>
      <node id="14">
        <label>examples/esp32/main/PwmComprehensiveTest.cpp</label>
        <link refid="PwmComprehensiveTest_8cpp"/>
      </node>
      <node id="2">
        <label>examples/esp32/main/SpiComprehensiveTest.cpp</label>
        <link refid="SpiComprehensiveTest_8cpp"/>
      </node>
      <node id="15">
        <label>examples/esp32/main/TemperatureComprehensiveTest.cpp</label>
        <link refid="TemperatureComprehensiveTest_8cpp"/>
      </node>
      <node id="3">
        <label>examples/esp32/main/TestFramework.h</label>
        <link refid="TestFramework_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>examples/esp32/main/TimerComprehensiveTest.cpp</label>
        <link refid="TimerComprehensiveTest_8cpp"/>
      </node>
      <node id="17">
        <label>examples/esp32/main/UartComprehensiveTest.cpp</label>
        <link refid="UartComprehensiveTest_8cpp"/>
      </node>
      <node id="18">
        <label>examples/esp32/main/WifiComprehensiveTest.cpp</label>
        <link refid="WifiComprehensiveTest_8cpp"/>
      </node>
      <node id="19">
        <label>inc/base/BaseAdc.h</label>
        <link refid="BaseAdc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>inc/base/BaseBluetooth.h</label>
        <link refid="BaseBluetooth_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>inc/base/BaseCan.h</label>
        <link refid="BaseCan_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>inc/base/BaseGpio.h</label>
        <link refid="BaseGpio_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>inc/base/BaseI2c.h</label>
        <link refid="BaseI2c_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>inc/base/BaseLogger.h</label>
        <link refid="BaseLogger_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>inc/base/BaseNvs.h</label>
        <link refid="BaseNvs_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>inc/base/BasePeriodicTimer.h</label>
        <link refid="BasePeriodicTimer_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>inc/base/BasePio.h</label>
        <link refid="BasePio_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>inc/base/BasePwm.h</label>
        <link refid="BasePwm_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>inc/base/BaseSpi.h</label>
        <link refid="BaseSpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>inc/base/BaseTemperature.h</label>
        <link refid="BaseTemperature_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>inc/base/BaseUart.h</label>
        <link refid="BaseUart_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>inc/base/BaseWifi.h</label>
        <link refid="BaseWifi_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/base/HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>inc/mcu/esp32/EspAdc.h</label>
        <link refid="EspAdc_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>inc/mcu/esp32/EspBluetooth.h</label>
        <link refid="EspBluetooth_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>inc/mcu/esp32/EspCan.h</label>
        <link refid="EspCan_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>inc/mcu/esp32/EspGpio.h</label>
        <link refid="EspGpio_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>inc/mcu/esp32/EspI2c.h</label>
        <link refid="EspI2c_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>inc/mcu/esp32/EspLogger.h</label>
        <link refid="EspLogger_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>inc/mcu/esp32/EspNvs.h</label>
        <link refid="EspNvs_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>inc/mcu/esp32/EspPeriodicTimer.h</label>
        <link refid="EspPeriodicTimer_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>inc/mcu/esp32/EspPio.h</label>
        <link refid="EspPio_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>inc/mcu/esp32/EspPwm.h</label>
        <link refid="EspPwm_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>inc/mcu/esp32/EspSpi.h</label>
        <link refid="EspSpi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>inc/mcu/esp32/EspTemperature.h</label>
        <link refid="EspTemperature_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>inc/mcu/esp32/EspUart.h</label>
        <link refid="EspUart_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>inc/mcu/esp32/EspWifi.h</label>
        <link refid="EspWifi_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>inc/mcu/esp32/utils/EspTypes.h</label>
        <link refid="EspTypes_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>inc/mcu/esp32/utils/EspTypes_ADC.h</label>
        <link refid="EspTypes__ADC_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>inc/mcu/esp32/utils/EspTypes_Base.h</label>
        <link refid="EspTypes__Base_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>inc/mcu/esp32/utils/EspTypes_CAN.h</label>
        <link refid="EspTypes__CAN_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>inc/mcu/esp32/utils/EspTypes_GPIO.h</label>
        <link refid="EspTypes__GPIO_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>inc/mcu/esp32/utils/EspTypes_I2C.h</label>
        <link refid="EspTypes__I2C_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>inc/mcu/esp32/utils/EspTypes_NVS.h</label>
        <link refid="EspTypes__NVS_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>inc/mcu/esp32/utils/EspTypes_PIO.h</label>
        <link refid="EspTypes__PIO_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>inc/mcu/esp32/utils/EspTypes_PWM.h</label>
        <link refid="EspTypes__PWM_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>inc/mcu/esp32/utils/EspTypes_SPI.h</label>
        <link refid="EspTypes__SPI_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>inc/mcu/esp32/utils/EspTypes_Timer.h</label>
        <link refid="EspTypes__Timer_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>inc/mcu/esp32/utils/EspTypes_UART.h</label>
        <link refid="EspTypes__UART_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>inc/mcu/esp32/utils/EspTypes_WiFi.h</label>
        <link refid="EspTypes__WiFi_8h"/>
      </node>
      <node id="48">
        <label>inc/utils/DigitalOutputGuard.h</label>
        <link refid="DigitalOutputGuard_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>src/mcu/esp32/EspAdc.cpp</label>
        <link refid="EspAdc_8cpp"/>
      </node>
      <node id="36">
        <label>src/mcu/esp32/EspBluetooth.cpp</label>
        <link refid="EspBluetooth_8cpp"/>
      </node>
      <node id="39">
        <label>src/mcu/esp32/EspCan.cpp</label>
        <link refid="EspCan_8cpp"/>
      </node>
      <node id="43">
        <label>src/mcu/esp32/EspGpio.cpp</label>
        <link refid="EspGpio_8cpp"/>
      </node>
      <node id="25">
        <label>src/mcu/esp32/EspI2c.cpp</label>
        <link refid="EspI2c_8cpp"/>
      </node>
      <node id="54">
        <label>src/mcu/esp32/EspLogger.cpp</label>
        <link refid="EspLogger_8cpp"/>
      </node>
      <node id="57">
        <label>src/mcu/esp32/EspNvs.cpp</label>
        <link refid="EspNvs_8cpp"/>
      </node>
      <node id="27">
        <label>src/mcu/esp32/EspPeriodicTimer.cpp</label>
        <link refid="EspPeriodicTimer_8cpp"/>
      </node>
      <node id="29">
        <label>src/mcu/esp32/EspPio.cpp</label>
        <link refid="EspPio_8cpp"/>
      </node>
      <node id="47">
        <label>src/mcu/esp32/EspPwm.cpp</label>
        <link refid="EspPwm_8cpp"/>
      </node>
      <node id="31">
        <label>src/mcu/esp32/EspSpi.cpp</label>
        <link refid="EspSpi_8cpp"/>
      </node>
      <node id="67">
        <label>src/mcu/esp32/EspTemperature.cpp</label>
        <link refid="EspTemperature_8cpp"/>
      </node>
      <node id="33">
        <label>src/mcu/esp32/EspUart.cpp</label>
        <link refid="EspUart_8cpp"/>
      </node>
      <node id="72">
        <label>src/mcu/esp32/EspWifi.cpp</label>
        <link refid="EspWifi_8cpp"/>
      </node>
      <node id="49">
        <label>src/utils/DigitalOutputGuard.cpp</label>
        <link refid="DigitalOutputGuard_8cpp"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using hf_u8_t =  uint8_t</definition>
        <argsstring></argsstring>
        <name>hf_u8_t</name>
        <briefdescription>
<para>Platform-agnostic 8-bit unsigned integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps uint8_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="40" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using hf_u16_t =  uint16_t</definition>
        <argsstring></argsstring>
        <name>hf_u16_t</name>
        <briefdescription>
<para>Platform-agnostic 16-bit unsigned integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps uint16_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="46" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using hf_u32_t =  uint32_t</definition>
        <argsstring></argsstring>
        <name>hf_u32_t</name>
        <briefdescription>
<para>Platform-agnostic 32-bit unsigned integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps uint32_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="52" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using hf_u64_t =  uint64_t</definition>
        <argsstring></argsstring>
        <name>hf_u64_t</name>
        <briefdescription>
<para>Platform-agnostic 64-bit unsigned integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps uint64_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="58" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" prot="public" static="no">
        <type>int8_t</type>
        <definition>using hf_i8_t =  int8_t</definition>
        <argsstring></argsstring>
        <name>hf_i8_t</name>
        <briefdescription>
<para>Platform-agnostic 8-bit signed integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps int8_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="64" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a13afc13c9b02814b3b34a38049d48fd2" prot="public" static="no">
        <type>int16_t</type>
        <definition>using hf_i16_t =  int16_t</definition>
        <argsstring></argsstring>
        <name>hf_i16_t</name>
        <briefdescription>
<para>Platform-agnostic 16-bit signed integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps int16_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="70" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a6f35fb1148845d5b0f16b81aa58ac150" prot="public" static="no">
        <type>int32_t</type>
        <definition>using hf_i32_t =  int32_t</definition>
        <argsstring></argsstring>
        <name>hf_i32_t</name>
        <briefdescription>
<para>Platform-agnostic 32-bit signed integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps int32_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="76" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1ac755e76ae3da1d695793ce88e9c88c35" prot="public" static="no">
        <type>int64_t</type>
        <definition>using hf_i64_t =  int64_t</definition>
        <argsstring></argsstring>
        <name>hf_i64_t</name>
        <briefdescription>
<para>Platform-agnostic 64-bit signed integer type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps int64_t for consistent naming across the HardFOC system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="82" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a9986e3ac7705b215b439b4ebf595e7b0" prot="public" static="no">
        <type>bool</type>
        <definition>using hf_bool_t =  bool</definition>
        <argsstring></argsstring>
        <name>hf_bool_t</name>
        <briefdescription>
<para>Platform-agnostic boolean type. </para>
        </briefdescription>
        <detaileddescription>
<para>Wraps bool for consistent naming and future extensibility. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="88" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a6f35fb1148845d5b0f16b81aa58ac150" kindref="member">hf_i32_t</ref></type>
        <definition>using hf_pin_num_t =  hf_i32_t</definition>
        <argsstring></argsstring>
        <name>hf_pin_num_t</name>
        <briefdescription>
<para>Platform-agnostic GPIO pin number type. </para>
        </briefdescription>
        <detaileddescription>
<para>Generic pin identifier that works across different hardware platforms. Uses hf_i32_t to handle both positive pin numbers and invalid (-1) values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="99" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>using hf_port_num_t =  hf_u32_t</definition>
        <argsstring></argsstring>
        <name>hf_port_num_t</name>
        <briefdescription>
<para>Platform-agnostic port/controller identifier type. </para>
        </briefdescription>
        <detaileddescription>
<para>Generic identifier for communication ports (I2C, SPI, UART, etc.). Uses hf_u32_t to accommodate various controller numbering schemes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="120" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>using hf_host_id_t =  hf_u32_t</definition>
        <argsstring></argsstring>
        <name>hf_host_id_t</name>
        <briefdescription>
<para>Platform-agnostic host/controller identifier type. </para>
        </briefdescription>
        <detaileddescription>
<para>Used for SPI hosts, I2C controllers, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="131" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>using hf_frequency_hz_t =  hf_u32_t</definition>
        <argsstring></argsstring>
        <name>hf_frequency_hz_t</name>
        <briefdescription>
<para>Platform-agnostic frequency type (in Hz). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="145" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a0aaf0cae92e0cfdf445fbfdc6fea9e1e" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref></type>
        <definition>using hf_frequency_t =  hf_frequency_hz_t</definition>
        <argsstring></argsstring>
        <name>hf_frequency_t</name>
        <briefdescription>
<para>Backward compatibility alias. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="148" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1ae912723679c2a3f1d9d45b80157a1f35" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>using hf_baud_rate_t =  hf_u32_t</definition>
        <argsstring></argsstring>
        <name>hf_baud_rate_t</name>
        <briefdescription>
<para>Platform-agnostic baud rate type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="153" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>using hf_channel_id_t =  hf_u32_t</definition>
        <argsstring></argsstring>
        <name>hf_channel_id_t</name>
        <briefdescription>
<para>Platform-agnostic channel identifier type. </para>
        </briefdescription>
        <detaileddescription>
<para>Used for ADC channels, PWM channels, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="163" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>using hf_time_t =  hf_u32_t</definition>
        <argsstring></argsstring>
        <name>hf_time_t</name>
        <briefdescription>
<para>Platform-agnostic time type in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="173" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a0cee3b9b361b164ca1a9c4fb94d4fbaa" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref></type>
        <definition>using hf_timeout_ms_t =  hf_time_t</definition>
        <argsstring></argsstring>
        <name>hf_timeout_ms_t</name>
        <briefdescription>
<para>Timeout value in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="178" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1a74e30c5bd28b83d076801d5bfd46e36f" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref></type>
        <definition>using hf_timeout_us_t =  hf_time_t</definition>
        <argsstring></argsstring>
        <name>hf_timeout_us_t</name>
        <briefdescription>
<para>Timeout value in microseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="183" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="HardwareTypes_8h_1aeb396ad1ef3b4a08174b33b0a6290c24" prot="public" static="no">
        <type><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref></type>
        <definition>using hf_timestamp_us_t =  hf_u64_t</definition>
        <argsstring></argsstring>
        <name>hf_timestamp_us_t</name>
        <briefdescription>
<para>Timestamp value in microseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="188" column="1" bodyfile="inc/base/HardwareTypes.h" bodystart="188" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="HardwareTypes_8h_1a3d44dce54e55270498aaf5fcf36b58b5" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref></type>
        <definition>constexpr hf_pin_num_t HF_INVALID_PIN</definition>
        <argsstring></argsstring>
        <name>HF_INVALID_PIN</name>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Invalid pin constant for unassigned or invalid pins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="104" column="24" bodyfile="inc/base/HardwareTypes.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="HardwareTypes_8h_1a909aa3a014a7353c382f69d1707a72d8" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref></type>
        <definition>constexpr hf_pin_num_t HF_MAX_PIN_NUMBER</definition>
        <argsstring></argsstring>
        <name>HF_MAX_PIN_NUMBER</name>
        <initializer>= 255</initializer>
        <briefdescription>
<para>Maximum pin number supported by the abstraction layer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="109" column="24" bodyfile="inc/base/HardwareTypes.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="HardwareTypes_8h_1adacf11d73033d641ab570e7944a6b8e1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" kindref="member">hf_port_num_t</ref></type>
        <definition>constexpr hf_port_num_t HF_INVALID_PORT</definition>
        <argsstring></argsstring>
        <name>HF_INVALID_PORT</name>
        <initializer>= std::numeric_limits&lt;<ref refid="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" kindref="member">hf_port_num_t</ref>&gt;::max()</initializer>
        <briefdescription>
<para>Invalid port constant for unassigned or invalid ports. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="125" column="25" bodyfile="inc/base/HardwareTypes.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="HardwareTypes_8h_1a83677633154f5703eaf13d4907429171" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" kindref="member">hf_host_id_t</ref></type>
        <definition>constexpr hf_host_id_t HF_INVALID_HOST</definition>
        <argsstring></argsstring>
        <name>HF_INVALID_HOST</name>
        <initializer>= std::numeric_limits&lt;<ref refid="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" kindref="member">hf_host_id_t</ref>&gt;::max()</initializer>
        <briefdescription>
<para>Invalid host constant for unassigned or invalid hosts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="136" column="24" bodyfile="inc/base/HardwareTypes.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="HardwareTypes_8h_1af5d64ca3788d96b0cdbebb65ea79fc66" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
        <definition>constexpr hf_channel_id_t HF_INVALID_CHANNEL</definition>
        <argsstring></argsstring>
        <name>HF_INVALID_CHANNEL</name>
        <initializer>= std::numeric_limits&lt;<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref>&gt;::max()</initializer>
        <briefdescription>
<para>Invalid channel constant for unassigned or invalid channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="168" column="27" bodyfile="inc/base/HardwareTypes.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="HardwareTypes_8h_1a154ea09cf44df6d1e2345636c076c2c0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref></type>
        <definition>constexpr hf_time_t HF_TIMEOUT_DEFAULT_MS</definition>
        <argsstring></argsstring>
        <name>HF_TIMEOUT_DEFAULT_MS</name>
        <initializer>= 1000</initializer>
        <briefdescription>
<para>Default timeout value in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="197" column="21" bodyfile="inc/base/HardwareTypes.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="HardwareTypes_8h_1a2e55b662f257ca97264dcde7eab37a3e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref></type>
        <definition>constexpr hf_time_t HF_TIMEOUT_NONE</definition>
        <argsstring></argsstring>
        <name>HF_TIMEOUT_NONE</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>No timeout (wait indefinitely). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="202" column="21" bodyfile="inc/base/HardwareTypes.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="HardwareTypes_8h_1a309d52c7fb38e56ee2dfafa363248a76" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref></type>
        <definition>constexpr hf_time_t HF_TIMEOUT_MAX</definition>
        <argsstring></argsstring>
        <name>HF_TIMEOUT_MAX</name>
        <initializer>= std::numeric_limits&lt;<ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref>&gt;::max()</initializer>
        <briefdescription>
<para>Maximum timeout value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="207" column="21" bodyfile="inc/base/HardwareTypes.h" bodystart="207" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="HardwareTypes_8h_1abaf046a86ed01ee84670bfab0bacbda0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool IsValidPin</definition>
        <argsstring>(hf_pin_num_t pin) noexcept</argsstring>
        <name>IsValidPin</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Check if a pin number is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="218" column="16" bodyfile="inc/base/HardwareTypes.h" bodystart="218" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="HardwareTypes_8h_1acbdc463a3d9f62d1e53e745345053c14" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool IsValidPort</definition>
        <argsstring>(hf_port_num_t port) noexcept</argsstring>
        <name>IsValidPort</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" kindref="member">hf_port_num_t</ref></type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Check if a port number is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port number to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="227" column="16" bodyfile="inc/base/HardwareTypes.h" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="HardwareTypes_8h_1a50184ef4582378754c08ef6682ec7121" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool IsValidHost</definition>
        <argsstring>(hf_host_id_t host) noexcept</argsstring>
        <name>IsValidHost</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" kindref="member">hf_host_id_t</ref></type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>Check if a host ID is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>Host ID to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="236" column="16" bodyfile="inc/base/HardwareTypes.h" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="HardwareTypes_8h_1aaa87ba0f6ecdb5eac7552f89d00b69fb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool IsValidChannel</definition>
        <argsstring>(hf_channel_id_t channel) noexcept</argsstring>
        <name>IsValidChannel</name>
        <param>
          <type><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref></type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Check if a channel ID is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/base/HardwareTypes.h" line="245" column="16" bodyfile="inc/base/HardwareTypes.h" bodystart="245" bodyend="247"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Platform-agnostic hardware type definitions for the HardFOC system. </para>
    </briefdescription>
    <detaileddescription>
<para>This file defines platform-agnostic types used by base interface classes. These types provide a consistent API across different hardware platforms without exposing MCU-specific implementation details. All hardware abstraction layers use these common types for portability and consistency.</para>
<para><simplesect kind="author"><para>Nebiyu Tadesse </para>
</simplesect>
<simplesect kind="date"><para>2025 </para>
</simplesect>
<simplesect kind="copyright"><para>HardFOC</para>
</simplesect>
<simplesect kind="note"><para>These types are designed to be platform-independent and should not include any MCU-specific headers or definitions. </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PLATFORM-AGNOSTIC<sp/>TYPE<sp/>WRAPPING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref><sp/>=<sp/>uint8_t;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref><sp/>=<sp/>uint16_t;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>=<sp/>uint32_t;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>=<sp/>uint64_t;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a88065d24fa2d174cf7b698ce5d498c44" kindref="member">hf_i8_t</ref><sp/>=<sp/>int8_t;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="HardwareTypes_8h_1a13afc13c9b02814b3b34a38049d48fd2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a13afc13c9b02814b3b34a38049d48fd2" kindref="member">hf_i16_t</ref><sp/>=<sp/>int16_t;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="HardwareTypes_8h_1a6f35fb1148845d5b0f16b81aa58ac150" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a6f35fb1148845d5b0f16b81aa58ac150" kindref="member">hf_i32_t</ref><sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="HardwareTypes_8h_1ac755e76ae3da1d695793ce88e9c88c35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1ac755e76ae3da1d695793ce88e9c88c35" kindref="member">hf_i64_t</ref><sp/>=<sp/>int64_t;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="HardwareTypes_8h_1a9986e3ac7705b215b439b4ebf595e7b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a9986e3ac7705b215b439b4ebf595e7b0" kindref="member">hf_bool_t</ref><sp/>=<sp/>bool;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PLATFORM-AGNOSTIC<sp/>GPIO<sp/>TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a6f35fb1148845d5b0f16b81aa58ac150" kindref="member">hf_i32_t</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="HardwareTypes_8h_1a3d44dce54e55270498aaf5fcf36b58b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/><ref refid="HardwareTypes_8h_1a3d44dce54e55270498aaf5fcf36b58b5" kindref="member">HF_INVALID_PIN</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="HardwareTypes_8h_1a909aa3a014a7353c382f69d1707a72d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/><ref refid="HardwareTypes_8h_1a909aa3a014a7353c382f69d1707a72d8" kindref="member">HF_MAX_PIN_NUMBER</ref><sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PLATFORM-AGNOSTIC<sp/>PORT/CONTROLLER<sp/>TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" kindref="member">hf_port_num_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="HardwareTypes_8h_1adacf11d73033d641ab570e7944a6b8e1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" kindref="member">hf_port_num_t</ref><sp/><ref refid="HardwareTypes_8h_1adacf11d73033d641ab570e7944a6b8e1" kindref="member">HF_INVALID_PORT</ref><sp/>=<sp/>std::numeric_limits&lt;hf_port_num_t&gt;::max();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" kindref="member">hf_host_id_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="HardwareTypes_8h_1a83677633154f5703eaf13d4907429171" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" kindref="member">hf_host_id_t</ref><sp/><ref refid="HardwareTypes_8h_1a83677633154f5703eaf13d4907429171" kindref="member">HF_INVALID_HOST</ref><sp/>=<sp/>std::numeric_limits&lt;hf_host_id_t&gt;::max();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>COMMUNICATION<sp/>FREQUENCY<sp/>TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="HardwareTypes_8h_1a0aaf0cae92e0cfdf445fbfdc6fea9e1e" refkind="member"><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a0aaf0cae92e0cfdf445fbfdc6fea9e1e" kindref="member">hf_frequency_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1ae68c5caacf4873c3a0df851e11657bbc" kindref="member">hf_frequency_hz_t</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="HardwareTypes_8h_1ae912723679c2a3f1d9d45b80157a1f35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1ae912723679c2a3f1d9d45b80157a1f35" kindref="member">hf_baud_rate_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CHANNEL<sp/>AND<sp/>TIMING<sp/>TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="HardwareTypes_8h_1af5d64ca3788d96b0cdbebb65ea79fc66" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/><ref refid="HardwareTypes_8h_1af5d64ca3788d96b0cdbebb65ea79fc66" kindref="member">HF_INVALID_CHANNEL</ref><sp/>=<sp/>std::numeric_limits&lt;hf_channel_id_t&gt;::max();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="HardwareTypes_8h_1a0cee3b9b361b164ca1a9c4fb94d4fbaa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a0cee3b9b361b164ca1a9c4fb94d4fbaa" kindref="member">hf_timeout_ms_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="HardwareTypes_8h_1a74e30c5bd28b83d076801d5bfd46e36f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a74e30c5bd28b83d076801d5bfd46e36f" kindref="member">hf_timeout_us_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="HardwareTypes_8h_1aeb396ad1ef3b4a08174b33b0a6290c24" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="BasePeriodicTimer_8h_1aeb396ad1ef3b4a08174b33b0a6290c24" kindref="member">hf_timestamp_us_t</ref><sp/>=<sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TIMEOUT<sp/>CONSTANTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="HardwareTypes_8h_1a154ea09cf44df6d1e2345636c076c2c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref><sp/><ref refid="HardwareTypes_8h_1a154ea09cf44df6d1e2345636c076c2c0" kindref="member">HF_TIMEOUT_DEFAULT_MS</ref><sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="HardwareTypes_8h_1a2e55b662f257ca97264dcde7eab37a3e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref><sp/><ref refid="HardwareTypes_8h_1a2e55b662f257ca97264dcde7eab37a3e" kindref="member">HF_TIMEOUT_NONE</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="HardwareTypes_8h_1a309d52c7fb38e56ee2dfafa363248a76" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a27a508352782b33586da5be2f528d0e9" kindref="member">hf_time_t</ref><sp/><ref refid="HardwareTypes_8h_1a309d52c7fb38e56ee2dfafa363248a76" kindref="member">HF_TIMEOUT_MAX</ref><sp/>=<sp/>std::numeric_limits&lt;hf_time_t&gt;::max();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VALIDATION<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="HardwareTypes_8h_1abaf046a86ed01ee84670bfab0bacbda0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1abaf046a86ed01ee84670bfab0bacbda0" kindref="member">IsValidPin</ref>(<ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/>pin)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pin<sp/>&lt;=<sp/><ref refid="HardwareTypes_8h_1a909aa3a014a7353c382f69d1707a72d8" kindref="member">HF_MAX_PIN_NUMBER</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="HardwareTypes_8h_1acbdc463a3d9f62d1e53e745345053c14" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1acbdc463a3d9f62d1e53e745345053c14" kindref="member">IsValidPort</ref>(<ref refid="HardwareTypes_8h_1a5ae8212050d5f285c3c001078e3be3aa" kindref="member">hf_port_num_t</ref><sp/>port)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port<sp/>!=<sp/><ref refid="HardwareTypes_8h_1adacf11d73033d641ab570e7944a6b8e1" kindref="member">HF_INVALID_PORT</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="HardwareTypes_8h_1a50184ef4582378754c08ef6682ec7121" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a50184ef4582378754c08ef6682ec7121" kindref="member">IsValidHost</ref>(<ref refid="HardwareTypes_8h_1a9ae8d2dd0a150205395ab179f14739a8" kindref="member">hf_host_id_t</ref><sp/>host)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>host<sp/>!=<sp/><ref refid="HardwareTypes_8h_1a83677633154f5703eaf13d4907429171" kindref="member">HF_INVALID_HOST</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="HardwareTypes_8h_1aaa87ba0f6ecdb5eac7552f89d00b69fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1aaa87ba0f6ecdb5eac7552f89d00b69fb" kindref="member">IsValidChannel</ref>(<ref refid="HardwareTypes_8h_1ae0889610252306068bb566d31b5494c7" kindref="member">hf_channel_id_t</ref><sp/>channel)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channel<sp/>!=<sp/><ref refid="HardwareTypes_8h_1af5d64ca3788d96b0cdbebb65ea79fc66" kindref="member">HF_INVALID_CHANNEL</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="inc/base/HardwareTypes.h"/>
  </compounddef>
</doxygen>
