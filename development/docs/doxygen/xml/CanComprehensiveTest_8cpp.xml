<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="CanComprehensiveTest_8cpp" kind="file" language="C++">
    <compoundname>CanComprehensiveTest.cpp</compoundname>
    <includes local="yes">esp_log.h</includes>
    <includes local="yes">esp_timer.h</includes>
    <includes local="yes">freertos/FreeRTOS.h</includes>
    <includes local="yes">freertos/event_groups.h</includes>
    <includes local="yes">freertos/task.h</includes>
    <includes refid="TestFramework_8h" local="yes">TestFramework.h</includes>
    <includes refid="BaseCan_8h" local="yes">base/BaseCan.h</includes>
    <includes refid="EspCan_8h" local="yes">mcu/esp32/EspCan.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="1">
        <label>examples/esp32/main/CanComprehensiveTest.cpp</label>
        <link refid="CanComprehensiveTest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>TestFramework.h</label>
        <link refid="TestFramework_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>base/BaseCan.h</label>
        <link refid="BaseCan_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>BaseGpio.h</label>
        <link refid="BaseGpio_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>mcu/esp32/EspCan.h</label>
        <link refid="EspCan_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>mcu/esp32/EspGpio.h</label>
        <link refid="EspGpio_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>EspTypes_Base.h</label>
        <link refid="EspTypes__Base_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>utils/EspTypes_CAN.h</label>
        <link refid="EspTypes__CAN_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>EspTypes_GPIO.h</label>
        <link refid="EspTypes__GPIO_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>../../utils/McuSelect.h</label>
        <link refid="McuSelect_8h"/>
      </node>
      <node id="28">
        <label>RtosMutex.h</label>
        <link refid="RtosMutex_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>atomic</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="14">
        <label>driver/gpio.h</label>
      </node>
      <node id="15">
        <label>esp_attr.h</label>
      </node>
      <node id="2">
        <label>esp_log.h</label>
      </node>
      <node id="3">
        <label>esp_timer.h</label>
      </node>
      <node id="26">
        <label>esp_twai.h</label>
      </node>
      <node id="27">
        <label>esp_twai_onchip.h</label>
      </node>
      <node id="4">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="5">
        <label>freertos/event_groups.h</label>
      </node>
      <node id="8">
        <label>freertos/queue.h</label>
      </node>
      <node id="9">
        <label>freertos/semphr.h</label>
      </node>
      <node id="6">
        <label>freertos/task.h</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="12">
        <label>limits</label>
      </node>
      <node id="30">
        <label>memory</label>
      </node>
      <node id="23">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>string_view</label>
      </node>
      <node id="31">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;CAN_Test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="86" column="19" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" prot="public" static="yes" mutable="no">
        <type><ref refid="structTestResults" kindref="compound">TestResults</ref></type>
        <definition>TestResults g_test_results</definition>
        <argsstring></argsstring>
        <name>g_test_results</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="88" column="20" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TEST_CAN_ID_STANDARD</definition>
        <argsstring></argsstring>
        <name>TEST_CAN_ID_STANDARD</name>
        <initializer>= 0x123</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="91" column="27" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a3b149cf1a3128b8fa645195f926efdad" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TEST_CAN_ID_EXTENDED</definition>
        <argsstring></argsstring>
        <name>TEST_CAN_ID_EXTENDED</name>
        <initializer>= 0x12345678</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="92" column="27" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TEST_BAUD_RATE</definition>
        <argsstring></argsstring>
        <name>TEST_BAUD_RATE</name>
        <initializer>= 500000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="93" column="27" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1aeefebee858364dc6e3afa5c8cb3ea4b9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TEST_TIMEOUT_MS</definition>
        <argsstring></argsstring>
        <name>TEST_TIMEOUT_MS</name>
        <initializer>= 5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="94" column="27" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref></type>
        <definition>constexpr hf_pin_num_t TEST_TX_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_TX_PIN</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="95" column="31" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref></type>
        <definition>constexpr hf_pin_num_t TEST_RX_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_RX_PIN</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="96" column="31" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int MESSAGE_RECEIVED_BIT</definition>
        <argsstring></argsstring>
        <name>MESSAGE_RECEIVED_BIT</name>
        <initializer>= BIT0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="99" column="22" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a291a8c35a22fe807f3c0eb8ebafdc151" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int ERROR_OCCURRED_BIT</definition>
        <argsstring></argsstring>
        <name>ERROR_OCCURRED_BIT</name>
        <initializer>= BIT1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="100" column="22" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1aafecba71a9d9ce157a62129d2d541472" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int STATE_CHANGED_BIT</definition>
        <argsstring></argsstring>
        <name>STATE_CHANGED_BIT</name>
        <initializer>= BIT2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="101" column="22" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" prot="public" static="yes" mutable="no">
        <type>EventGroupHandle_t</type>
        <definition>EventGroupHandle_t test_event_group</definition>
        <argsstring></argsstring>
        <name>test_event_group</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="104" column="27" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" prot="public" static="yes" mutable="no">
        <type>std::atomic&lt; uint32_t &gt;</type>
        <definition>std::atomic&lt;uint32_t&gt; messages_received</definition>
        <argsstring></argsstring>
        <name>messages_received</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="105" column="20" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a74090b495fccb3b5be00724fff5cec3c" prot="public" static="yes" mutable="no">
        <type>std::atomic&lt; uint32_t &gt;</type>
        <definition>std::atomic&lt;uint32_t&gt; errors_detected</definition>
        <argsstring></argsstring>
        <name>errors_detected</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="106" column="20" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" prot="public" static="yes" mutable="no">
        <type><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref></type>
        <definition>hf_can_message_t last_received_message</definition>
        <argsstring></argsstring>
        <name>last_received_message</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="107" column="25" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CORE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CORE_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="115" column="23" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ADVANCED_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ADVANCED_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="116" column="23" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1ac9980ee02b5f22eb42bb23a63fed7d60" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ERROR_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ERROR_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="117" column="23" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1a362ae025a7b83c898995613ee8fbddc7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_PERFORMANCE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_PERFORMANCE_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="118" column="23" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CanComprehensiveTest_8cpp_1ae9ce44061049719617642b191c9d293a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_TRANSCEIVER_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_TRANSCEIVER_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="119" column="23" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="119" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a9f7a9f239e24fa50256f4f00538ece6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void verify_can_pin_states</definition>
        <argsstring>()</argsstring>
        <name>verify_can_pin_states</name>
        <briefdescription>
<para>Verify CAN pin states before testing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="129" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="129" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_receive_callback_enhanced</definition>
        <argsstring>(const hf_can_message_t &amp;message, void *user_data)</argsstring>
        <name>test_receive_callback_enhanced</name>
        <param>
          <type>const <ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref> &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Test callback for received CAN messages (enhanced version with user data) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="145" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="145" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref></type>
        <definition>hf_can_message_t create_test_message</definition>
        <argsstring>(uint32_t id, bool extended=false, uint8_t dlc=8)</argsstring>
        <name>create_test_message</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extended</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dlc</declname>
          <defval>8</defval>
        </param>
        <briefdescription>
<para>Create a test CAN message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="162" column="18" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="162" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool wait_for_event</definition>
        <argsstring>(EventBits_t bits, uint32_t timeout_ms)</argsstring>
        <name>wait_for_event</name>
        <param>
          <type>EventBits_t</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Wait for events with timeout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="180" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1aae05643040204e3ff7a7d8ef0d91e04b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_basic_initialization</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_basic_initialization</name>
        <briefdescription>
<para>Test basic initialization and state management. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="193" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="193" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a6d6a2ae1c28d664cda2c22502f855612" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_message_transmission</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_message_transmission</name>
        <briefdescription>
<para>Test message transmission and reception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="237" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="237" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1aa95fe692493d545854a7d1efec334b6e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_acceptance_filtering</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_acceptance_filtering</name>
        <briefdescription>
<para>Test acceptance filtering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="291" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="291" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1adc84b01b6f41fd646a7e3ed3445e1f6d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_advanced_timing</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_advanced_timing</name>
        <briefdescription>
<para>Test advanced timing configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="339" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="339" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1af9975898e30af749a1f5dd0db8b12cd8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_statistics_diagnostics</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_statistics_diagnostics</name>
        <briefdescription>
<para>Test statistics and diagnostics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="371" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="371" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a3c142b0f533ce3a624a89894219b2c09" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_batch_transmission</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_batch_transmission</name>
        <briefdescription>
<para>Test batch message transmission. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="435" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="435" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a439230ad3ed34e4d4b8e6a04ac7f8821" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_error_handling</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_error_handling</name>
        <briefdescription>
<para>Test error handling and recovery. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="475" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="475" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a3b87a3ec7adf5ac1421463511f11974d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_espcan_comprehensive_functionality</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_espcan_comprehensive_functionality</name>
        <briefdescription>
<para>Comprehensive test to validate ALL <ref refid="classEspCan" kindref="compound">EspCan</ref> functionality This test systematically validates every aspect of the <ref refid="classEspCan" kindref="compound">EspCan</ref> implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="520" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="520" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1ae735bad5b790362e222ffd4f1f5dcdf6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_initialization</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_initialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="574" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="574" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1aa017f3c49e5203c9c211ff83ae7e4d1a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_self_test_mode</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_self_test_mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="629" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="629" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a1a5ace41a3da9893da74676f3ca16971" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_message_transmission</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_message_transmission</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="742" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="742" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1add8f3a80a5a35b22c828e80d807499c7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_acceptance_filtering</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_acceptance_filtering</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="829" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="829" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a610e875bfec26da82d26862eee079413" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_advanced_timing</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_advanced_timing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="933" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="933" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a416afd491136be930bda5109d92394c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_error_handling</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_error_handling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="988" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="988" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1aa3bc2653a52a6182eb4e5f8b389b7ee4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_bus_recovery</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_bus_recovery</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1055" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1055" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a2fa4240ea7c67ffbb7c6826c68564ac4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_batch_transmission</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_batch_transmission</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1107" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1107" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a5a1cbd830fb13ca11bdba428f616688e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_high_throughput</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_high_throughput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1170" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1170" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a720210db5a0b95ad5cd955ea299924fd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_external_physical_loopback</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_external_physical_loopback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1249" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1249" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a52afe048b4516a467a66e0355377dfdf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_loopback_comparison</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_loopback_comparison</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1326" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1326" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1af0c16d195a75aadad0869a1b182ced59" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_sn65_transceiver_integration</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_sn65_transceiver_integration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1391" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1391" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a35dd5351b620eefea92884b6e4b2dd26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_can_signal_quality</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_can_signal_quality</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1447" column="6" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1447" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="CanComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void app_main</definition>
        <argsstring>(void)</argsstring>
        <name>app_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/CanComprehensiveTest.cpp" line="1531" column="17" bodyfile="examples/esp32/main/CanComprehensiveTest.cpp" bodystart="1531" bodyend="1631"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Comprehensive CAN testing suite for ESP32-C6 with ESP-IDF v5.5 TWAI API and SN65 transceiver. </para>
    </briefdescription>
    <detaileddescription>
<para>This comprehensive test suite validates all <ref refid="classEspCan" kindref="compound">EspCan</ref> functionality including:<itemizedlist>
<listitem><para>ESP-IDF v5.5 TWAI node-based API compliance</para>
</listitem><listitem><para>ESP32-C6 TWAI controller operation</para>
</listitem><listitem><para>SN65 CAN transceiver integration</para>
</listitem><listitem><para>Advanced filtering and timing configuration</para>
</listitem><listitem><para>Event-driven callback systems</para>
</listitem><listitem><para>Single-callback per event with user data pointer</para>
</listitem><listitem><para>Error handling and bus recovery</para>
</listitem><listitem><para>Performance and stress testing</para>
</listitem><listitem><para>Self-test and loopback modes</para>
</listitem></itemizedlist>
</para>
<para>Hardware Requirements:<itemizedlist>
<listitem><para>ESP32-C6 DevKit</para>
</listitem><listitem><para>SN65HVD230/SN65HVD232 CAN transceiver</para>
</listitem><listitem><para>CAN bus termination resistors (120Ω)</para>
</listitem><listitem><para>Optional: Second CAN node for full bus testing</para>
</listitem></itemizedlist>
</para>
<para>Wiring for ESP32-C6 + SN65:<itemizedlist>
<listitem><para>GPIO4 (TX) -&gt; SN65 CTX pin</para>
</listitem><listitem><para>GPIO5 (RX) -&gt; SN65 CRX pin</para>
</listitem><listitem><para>3.3V -&gt; SN65 VCC</para>
</listitem><listitem><para>GND -&gt; SN65 GND</para>
</listitem><listitem><para>SN65 CANH/CANL -&gt; CAN bus</para>
</listitem></itemizedlist>
</para>
<para>For External Loopback Testing:<itemizedlist>
<listitem><para>Connect: SN65 CANH -&gt; 120Ω resistor -&gt; SN65 CANL</para>
</listitem><listitem><para>DO NOT short TWAI TX/RX lines directly!</para>
</listitem></itemizedlist>
</para>
<para>IMPORTANT: Two loopback modes are tested:</para>
<para><orderedlist>
<listitem><para>INTERNAL LOOPBACK (enable_loopback=true):<itemizedlist>
<listitem><para>Uses ESP32&apos;s internal hardware loopback</para>
</listitem><listitem><para>TX and RX on same pin (GPIO4)</para>
</listitem><listitem><para>No external hardware required</para>
</listitem><listitem><para>Interrupt callbacks work correctly</para>
</listitem><listitem><para>Used for: message_transmission, acceptance_filtering, batch_transmission, high_throughput, bus_recovery, self_test_mode</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>EXTERNAL LOOPBACK (enable_loopback=false):<itemizedlist>
<listitem><para>Requires proper CAN bus loopback AFTER the transceiver</para>
</listitem><listitem><para>Connect: SN65 CANH -&gt; 120Ω termination resistor -&gt; SN65 CANL</para>
</listitem><listitem><para>Uses real CAN transceiver hardware with proper CAN bus signaling</para>
</listitem><listitem><para>Tests actual CAN bus communication with differential signaling</para>
</listitem><listitem><para>Used for: external_physical_loopback (in SN65 transceiver section)</para>
</listitem><listitem><para>NOTE: Shorting TWAI TX/RX lines directly does NOT work!</para>
</listitem></itemizedlist>
</para>
</listitem></orderedlist>
</para>
<sect2 id="CanComprehensiveTest_8cpp_1autotoc_md18">
<title>Test Progression Indicator:</title><para>GPIO14 toggles HIGH/LOW after each test completion for visual feedback. Test sections are indicated by 5 blinks on GPIO14 (like SpiComprehensiveTest). This allows monitoring test progress without serial output.</para>
<para><simplesect kind="author"><para>Nebiyu Tadesse </para>
</simplesect>
<simplesect kind="date"><para>2025 </para>
</simplesect>
<simplesect kind="copyright"><para>HardFOC </para>
</simplesect>
</para>
</sect2>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>C<sp/>headers<sp/>must<sp/>be<sp/>wrapped<sp/>in<sp/>extern<sp/>&quot;C&quot;<sp/>for<sp/>C++<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/event_groups.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HardFOC<sp/>interface<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="TestFramework_8h" kindref="compound">TestFramework.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="BaseCan_8h" kindref="compound">base/BaseCan.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspCan_8h" kindref="compound">mcu/esp32/EspCan.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CAN_Test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structTestResults" kindref="compound">TestResults</ref><sp/><ref refid="CanComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>configuration<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref><sp/>=<sp/>0x123;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="CanComprehensiveTest_8cpp_1a3b149cf1a3128b8fa645195f926efdad" kindref="member">TEST_CAN_ID_EXTENDED</ref><sp/>=<sp/>0x12345678;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref><sp/>=<sp/>500000;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="CanComprehensiveTest_8cpp_1aeefebee858364dc6e3afa5c8cb3ea4b9" kindref="member">TEST_TIMEOUT_MS</ref><sp/>=<sp/>5000;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref><sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>+<sp/>SN65</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref><sp/>=<sp/>5;<sp/></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>+<sp/>SN65</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Event<sp/>bits<sp/>for<sp/>synchronization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref><sp/>=<sp/>BIT0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a291a8c35a22fe807f3c0eb8ebafdc151" kindref="member">ERROR_OCCURRED_BIT</ref><sp/>=<sp/>BIT1;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1aafecba71a9d9ce157a62129d2d541472" kindref="member">STATE_CHANGED_BIT</ref><sp/>=<sp/>BIT2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>test<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>EventGroupHandle_t<sp/><ref refid="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" kindref="member">test_event_group</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic&lt;uint32_t&gt;<sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>{0};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic&lt;uint32_t&gt;<sp/><ref refid="CanComprehensiveTest_8cpp_1a74090b495fccb3b5be00724fff5cec3c" kindref="member">errors_detected</ref>{0};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/><ref refid="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" kindref="member">last_received_message</ref>{};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>SECTION<sp/>CONFIGURATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable/disable<sp/>specific<sp/>test<sp/>categories<sp/>by<sp/>setting<sp/>to<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Core<sp/>CAN<sp/>functionality<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Initialization,<sp/>self-test,<sp/>message<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acceptance<sp/>filtering,<sp/>advanced<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1ac9980ee02b5f22eb42bb23a63fed7d60" kindref="member">ENABLE_ERROR_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>handling,<sp/>bus<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a362ae025a7b83c898995613ee8fbddc7" kindref="member">ENABLE_PERFORMANCE_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Batch<sp/>transmission,<sp/>high<sp/>throughput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1ae9ce44061049719617642b191c9d293a" kindref="member">ENABLE_TRANSCEIVER_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>SN65<sp/>transceiver<sp/>integration,<sp/>signal<sp/>quality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>HELPER<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a9f7a9f239e24fa50256f4f00538ece6d" kindref="member">verify_can_pin_states</ref>()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Verifying<sp/>CAN<sp/>pin<sp/>states...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>We<sp/>can&apos;t<sp/>directly<sp/>read<sp/>GPIO<sp/>states<sp/>in<sp/>this<sp/>context,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>can<sp/>log<sp/>the<sp/>expected<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>CAN<sp/>pin<sp/>behavior:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>TX<sp/>(GPIO%d):<sp/>LOW<sp/>when<sp/>idle<sp/>(recessive<sp/>state)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>RX<sp/>(GPIO%d):<sp/>HIGH<sp/>when<sp/>idle<sp/>(recessive<sp/>state)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Internal<sp/>loopback:<sp/>TX<sp/>and<sp/>RX<sp/>on<sp/>same<sp/>pin<sp/>(GPIO%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>External<sp/>loopback:<sp/>CANH-&gt;120Ω-&gt;CANL<sp/>(after<sp/>transceiver)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Safety:<sp/>Minimal<sp/>current<sp/>flow,<sp/>GPIO<sp/>protection<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref>&amp;<sp/>message,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>(void)user_data;<sp/></highlight><highlight class="comment">//<sp/>Unused<sp/>in<sp/>basic<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" kindref="member">last_received_message</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.fetch_add(1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>that<sp/>a<sp/>message<sp/>was<sp/>received<sp/>(for<sp/>test<sp/>synchronization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" kindref="member">test_event_group</ref>)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseType_t<sp/>higher_priority_task_woken<sp/>=<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>xEventGroupSetBitsFromISR(<ref refid="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" kindref="member">test_event_group</ref>,<sp/><ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>&amp;higher_priority_task_woken);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>No<sp/>portYIELD_FROM_ISR<sp/>needed<sp/>as<sp/>we&apos;re<sp/>not<sp/>in<sp/>a<sp/>critical<sp/>timing<sp/>scenario</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extended<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>uint8_t<sp/>dlc<sp/>=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/>message{};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>message.<ref refid="structhf__can__message__t_1a0b85c579dd4bb8ad383e91510ef5e1f4" kindref="member">id</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>message.<ref refid="structhf__can__message__t_1acb38dbcef71c8cc85fe70039fbfb0045" kindref="member">is_extended</ref><sp/>=<sp/>extended;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>message.<ref refid="structhf__can__message__t_1a8280abac48c54cbd49aa4a80aa620a22" kindref="member">dlc</ref><sp/>=<sp/>dlc;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>message.<ref refid="structhf__can__message__t_1a55b067aab266686216317dd487e222ad" kindref="member">is_rtr</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>with<sp/>test<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dlc<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>message.<ref refid="structhf__can__message__t_1a991f9b496db72054277c92e117b58940" kindref="member">data</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xA0<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(EventBits_t<sp/>bits,<sp/>uint32_t<sp/>timeout_ms)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>EventBits_t<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xEventGroupWaitBits(<ref refid="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" kindref="member">test_event_group</ref>,<sp/>bits,<sp/>pdTRUE,<sp/>pdFALSE,<sp/>pdMS_TO_TICKS(timeout_ms));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result<sp/>&amp;<sp/>bits)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>COMPREHENSIVE<sp/>ESPCAN<sp/>FUNCTIONALITY<sp/>VALIDATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1aae05643040204e3ff7a7d8ef0d91e04b" kindref="member">test_basic_initialization</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Feature<sp/>1:<sp/>Basic<sp/>Initialization<sp/>and<sp/>State<sp/>Management&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>config{};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>can(config);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>lazy<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Lazy<sp/>initialization<sp/>failed<sp/>-<sp/>should<sp/>not<sp/>be<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Initialization<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!can.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>IsInitialized()<sp/>should<sp/>return<sp/>true<sp/>after<sp/>Initialize()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Initialization<sp/>and<sp/>state<sp/>management<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>deinitialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.Deinitialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Deinitialization<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>IsInitialized()<sp/>should<sp/>return<sp/>false<sp/>after<sp/>Deinitialize()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a6d6a2ae1c28d664cda2c22502f855612" kindref="member">test_message_transmission</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Feature<sp/>2:<sp/>Message<sp/>Transmission<sp/>and<sp/>Reception&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>config{};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>same<sp/>pin<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>can(config);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>can.Initialize();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>standard<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>std_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x123,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.SendMessage(std_msg,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Standard<sp/>frame<sp/>transmission<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Standard<sp/>frame<sp/>transmission<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>extended<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ext_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x12345678,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>6);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.SendMessage(ext_msg,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Extended<sp/>frame<sp/>transmission<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Extended<sp/>frame<sp/>transmission<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>RTR<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/>rtr_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x456,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>rtr_msg.<ref refid="structhf__can__message__t_1a55b067aab266686216317dd487e222ad" kindref="member">is_rtr</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.SendMessage(rtr_msg,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>RTR<sp/>frame<sp/>transmission<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>RTR<sp/>frame<sp/>transmission<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1aa95fe692493d545854a7d1efec334b6e" kindref="member">test_acceptance_filtering</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Feature<sp/>3:<sp/>Acceptance<sp/>Filtering&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>config{};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>same<sp/>pin<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>can(config);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>can.Initialize();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>filter<sp/>to<sp/>accept<sp/>only<sp/>0x100-0x10F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.SetAcceptanceFilter(0x100,<sp/>0x7F0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>accepted<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accepted_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x105,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.SendMessage(accepted_msg,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Filter<sp/>acceptance<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Filter<sp/>acceptance<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>rejected<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rejected_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x200,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>can.SendMessage(rejected_msg,<sp/>1000);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>500))<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Filter<sp/>rejection<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Filter<sp/>rejection<sp/>-<sp/>FAILED<sp/>(message<sp/>should<sp/>have<sp/>been<sp/>filtered)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Filter<sp/>configuration<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1adc84b01b6f41fd646a7e3ed3445e1f6d" kindref="member">test_advanced_timing</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Feature<sp/>4:<sp/>Advanced<sp/>Timing<sp/>Configuration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>config{};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>config.baud_rate<sp/>=<sp/>250000;<sp/></highlight><highlight class="comment">//<sp/>Different<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>can(config);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>can.Initialize();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__timing__config__t" kindref="compound">hf_esp_can_timing_config_t</ref><sp/>timing{};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>timing.<ref refid="structhf__esp__can__timing__config__t_1a1eda91ba0c3f3725ce8c508c1315e828" kindref="member">brp</ref><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>timing.prop_seg<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>timing.tseg_1<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>timing.tseg_2<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>timing.sjw<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.ConfigureAdvancedTiming(timing)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Advanced<sp/>timing<sp/>configuration<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Advanced<sp/>timing<sp/>configuration<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1af9975898e30af749a1f5dd0db8b12cd8" kindref="member">test_statistics_diagnostics</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Feature<sp/>5:<sp/>Statistics<sp/>and<sp/>Diagnostics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>config{};</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>can(config);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>can.Initialize();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.ResetStatistics()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Reset<sp/>statistics<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>some<sp/>messages<sp/>to<sp/>generate<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x200<sp/>+<sp/>i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/>result<sp/>=<sp/>can.SendMessage(msg,<sp/>500);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>statistics<sp/>message<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(50));<sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>between<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(200));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__statistics__t" kindref="compound">hf_can_statistics_t</ref><sp/>stats{};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.GetStatistics(stats)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Statistics:<sp/>sent=%llu,<sp/>received=%llu&quot;</highlight><highlight class="normal">,<sp/>stats.messages_sent.load(),</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.messages_received.load());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stats.messages_sent.load()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Statistics<sp/>collection<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Statistics<sp/>collection<sp/>-<sp/>FAILED<sp/>(no<sp/>messages<sp/>recorded)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Get<sp/>statistics<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__diagnostics__t" kindref="compound">hf_can_diagnostics_t</ref><sp/>diagnostics{};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.GetDiagnostics(diagnostics)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Diagnostics<sp/>retrieval<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Diagnostics<sp/>retrieval<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a3c142b0f533ce3a624a89894219b2c09" kindref="member">test_batch_transmission</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Feature<sp/>6:<sp/>Batch<sp/>Message<sp/>Transmission&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>config{};</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>same<sp/>pin<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>config.tx_queue_depth<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>can(config);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>can.Initialize();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>batch<sp/>of<sp/>messages<sp/>(smaller<sp/>batch<sp/>to<sp/>avoid<sp/>memory<sp/>issues)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BATCH_SIZE<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/>batch_messages[BATCH_SIZE];<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>stack<sp/>array<sp/>instead<sp/>of<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BATCH_SIZE;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>batch_messages[i]<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x300<sp/>+<sp/>i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sent_count<sp/>=<sp/>can.SendMessageBatch(batch_messages,<sp/>BATCH_SIZE,<sp/>500);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(500));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sent_count<sp/>&gt;=<sp/>BATCH_SIZE<sp/>*<sp/>0.9f<sp/>&amp;&amp;<sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.load()<sp/>&gt;=<sp/>sent_count<sp/>*<sp/>0.9f)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Batch<sp/>transmission<sp/>-<sp/>PASSED<sp/>(sent:<sp/>%d,<sp/>received:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>sent_count,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.load());</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Batch<sp/>transmission<sp/>-<sp/>FAILED<sp/>(sent:<sp/>%d,<sp/>received:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>sent_count,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.load());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a439230ad3ed34e4d4b8e6a04ac7f8821" kindref="member">test_error_handling</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Feature<sp/>7:<sp/>Error<sp/>Handling<sp/>and<sp/>Recovery&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>config{};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>config.enable_alerts<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>can(config);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>can.Initialize();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>status<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__status__t" kindref="compound">hf_can_status_t</ref><sp/>status{};</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.GetStatus(status)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Status<sp/>retrieval<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Status<sp/>retrieval<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>reset<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.Reset()<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Reset<sp/>functionality<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Reset<sp/>functionality<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>bus<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(can.InitiateBusRecovery()<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Bus<sp/>recovery<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Bus<sp/>recovery<sp/>-<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a3b87a3ec7adf5ac1421463511f11974d" kindref="member">test_espcan_comprehensive_functionality</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;🔍<sp/>COMPREHENSIVE<sp/>EspCan<sp/>Functionality<sp/>Validation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>test<sp/>validates<sp/>ALL<sp/>EspCan<sp/>features<sp/>systematically&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>USING:<sp/>Internal<sp/>hardware<sp/>loopback<sp/>(TX<sp/>and<sp/>RX<sp/>on<sp/>GPIO%d)<sp/>***&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>individual<sp/>feature<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1aae05643040204e3ff7a7d8ef0d91e04b" kindref="member">test_basic_initialization</ref>())<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a6d6a2ae1c28d664cda2c22502f855612" kindref="member">test_message_transmission</ref>())<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1aa95fe692493d545854a7d1efec334b6e" kindref="member">test_acceptance_filtering</ref>())<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1adc84b01b6f41fd646a7e3ed3445e1f6d" kindref="member">test_advanced_timing</ref>())<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1af9975898e30af749a1f5dd0db8b12cd8" kindref="member">test_statistics_diagnostics</ref>())<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a3c142b0f533ce3a624a89894219b2c09" kindref="member">test_batch_transmission</ref>())<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a439230ad3ed34e4d4b8e6a04ac7f8821" kindref="member">test_error_handling</ref>())<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>all_features_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SUMMARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_features_passed)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;🎉<sp/>[SUCCESS]<sp/>✅<sp/>ALL<sp/>EspCan<sp/>features<sp/>validated<sp/>successfully!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>EspCan<sp/>implementation<sp/>is<sp/>fully<sp/>functional<sp/>and<sp/>ready<sp/>for<sp/>production<sp/>use.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;💥<sp/>[FAILED]<sp/>❌<sp/>Some<sp/>EspCan<sp/>features<sp/>failed<sp/>validation!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Review<sp/>the<sp/>failed<sp/>features<sp/>above<sp/>and<sp/>address<sp/>the<sp/>issues.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_features_passed;</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BASIC<sp/>FUNCTIONALITY<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1ae735bad5b790362e222ffd4f1f5dcdf6" kindref="member">test_can_initialization</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>initialization<sp/>with<sp/>ESP-IDF<sp/>v5.5<sp/>API...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>configuration<sp/>for<sp/>ESP32-C6<sp/>+<sp/>SN65<sp/>transceiver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>can_config.controller_id<sp/>=<sp/><ref refid="EspTypes__CAN_8h_1ab7f2de3bbd0be41bdd4749610fd787f6a218ec6a4ce230d831e99e3c9b5963581" kindref="member">hf_can_controller_id_t::HF_CAN_CONTROLLER_0</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>can_config.mode<sp/>=<sp/><ref refid="EspTypes__CAN_8h_1ae4ef9e23b0f4abb1538d7eb8ea653e7eafa95589dd70ad5ad1c080a3aa1458c80" kindref="member">hf_can_mode_t::HF_CAN_MODE_NORMAL</ref>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Using<sp/>external<sp/>SN65<sp/>transceiver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>can_config.tx_queue_depth<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>can_config.sample_point_permill<sp/>=<sp/>750;<sp/></highlight><highlight class="comment">//<sp/>75%<sp/>sample<sp/>point<sp/>for<sp/>reliability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>lazy<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>before<sp/>Initialize()<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>with<sp/>ESP-IDF<sp/>v5.5<sp/>API&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_can.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>should<sp/>be<sp/>initialized<sp/>after<sp/>Initialize()<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>double<sp/>initialization<sp/>(should<sp/>succeed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Double<sp/>initialization<sp/>should<sp/>succeed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>deinitialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Deinitialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>deinitialize<sp/>CAN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>after<sp/>Deinitialize()<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>initialization<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1aa017f3c49e5203c9c211ff83ae7e4d1a" kindref="member">test_can_self_test_mode</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>comprehensive<sp/>TWAI<sp/>self-test<sp/>modes<sp/>for<sp/>ESP32-C6...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TEST<sp/>1:<sp/>Pure<sp/>Internal<sp/>Hardware<sp/>Loopback<sp/>(ESP-IDF<sp/>v5.5<sp/>Style)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>1:<sp/>Internal<sp/>hardware<sp/>loopback<sp/>(enable_loopback=true)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>internal_config{};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>ACK<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>hardware<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>internal_can(internal_config);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>internal<sp/>loopback<sp/>CAN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>self-reception<sp/>request<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_msg.is_self<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Self-reception<sp/>request<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal_can.SendMessage(test_msg,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Internal<sp/>loopback<sp/>test<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;⚠️<sp/><sp/>Internal<sp/>loopback:<sp/>No<sp/>message<sp/>received<sp/>(may<sp/>be<sp/>ESP-IDF<sp/>v5.5<sp/>limitation)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Internal<sp/>loopback:<sp/>Failed<sp/>to<sp/>send<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TEST<sp/>2:<sp/>Performance<sp/>Test<sp/>with<sp/>Internal<sp/>Loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>2:<sp/>Performance<sp/>test<sp/>with<sp/>internal<sp/>loopback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>perf_config{};</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>perf_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>perf_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>same<sp/>pin<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>perf_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>perf_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>ACK<sp/>required<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>perf_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>perf_config.tx_queue_depth<sp/>=<sp/>20;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger<sp/>queue<sp/>for<sp/>performance<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>perf_can(perf_config);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(perf_can.Initialize()<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perf_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PERF_MESSAGE_COUNT<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>burst<sp/>of<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sent_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>PERF_MESSAGE_COUNT;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref><sp/>+<sp/>i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(perf_can.SendMessage(msg,<sp/>100)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sent_count++;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>all<sp/>messages<sp/>to<sp/>be<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(2000));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>duration_ms<sp/>=<sp/>(uint32_t)((end_time<sp/>-<sp/>start_time)<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>received_count<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.load();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance<sp/>results:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Messages<sp/>sent:<sp/>%d/%d&quot;</highlight><highlight class="normal">,<sp/>sent_count,<sp/>PERF_MESSAGE_COUNT);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Messages<sp/>received:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>received_count);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Duration:<sp/>%d<sp/>ms&quot;</highlight><highlight class="normal">,<sp/>duration_ms);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Success<sp/>rate:<sp/>%.1f%%&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)received_count<sp/>/<sp/>sent_count<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(received_count<sp/>&gt;=<sp/>sent_count<sp/>*<sp/>0.95f)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>95%<sp/>success<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Performance<sp/>test<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Performance<sp/>test<sp/>FAILED<sp/>-<sp/>Low<sp/>success<sp/>rate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_tests_passed)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>✅<sp/>Comprehensive<sp/>CAN<sp/>self-test<sp/>mode<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NOTE:<sp/>For<sp/>best<sp/>results,<sp/>ensure<sp/>GPIO%d<sp/>(TX)<sp/>is<sp/>connected<sp/>to<sp/>GPIO%d<sp/>(RX)<sp/>with<sp/>a<sp/>jumper<sp/>wire&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>,<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[FAILED]<sp/>❌<sp/>Some<sp/>CAN<sp/>self-test<sp/>modes<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_tests_passed;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a1a5ace41a3da9893da74676f3ca16971" kindref="member">test_can_message_transmission</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>message<sp/>transmission<sp/>with<sp/>ESP-IDF<sp/>v5.5<sp/>loopback<sp/>pattern...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>exact<sp/>same<sp/>configuration<sp/>as<sp/>the<sp/>working<sp/>ESP-IDF<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Same<sp/>pin<sp/>for<sp/>internal<sp/>loopback<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>ACK<sp/>required<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>with<sp/>loopback<sp/>configuration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>standard<sp/>frame<sp/>(matching<sp/>ESP-IDF<sp/>example<sp/>pattern)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>std_message<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>standard<sp/>frame<sp/>(ID:<sp/>0x%03X,<sp/>DLC:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>std_message.id,<sp/>std_message.dlc);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(std_message,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>standard<sp/>frame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>longer<sp/>for<sp/>reception<sp/>in<sp/>loopback<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>2000))<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Standard<sp/>frame<sp/>not<sp/>received<sp/>in<sp/>loopback<sp/>mode<sp/>(this<sp/>may<sp/>be<sp/>expected)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>fail<sp/>the<sp/>test<sp/>-<sp/>loopback<sp/>reception<sp/>might<sp/>not<sp/>work<sp/>in<sp/>all<sp/>ESP-IDF<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Standard<sp/>frame<sp/>received<sp/>successfully<sp/>in<sp/>loopback<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>extended<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ext_message<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a3b149cf1a3128b8fa645195f926efdad" kindref="member">TEST_CAN_ID_EXTENDED</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>6);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>extended<sp/>frame<sp/>(ID:<sp/>0x%08X,<sp/>DLC:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>ext_message.id,<sp/>ext_message.dlc);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(ext_message,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>extended<sp/>frame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>2000))<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Extended<sp/>frame<sp/>not<sp/>received<sp/>in<sp/>loopback<sp/>mode<sp/>(this<sp/>may<sp/>be<sp/>expected)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Extended<sp/>frame<sp/>received<sp/>successfully<sp/>in<sp/>loopback<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>remote<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/>rtr_message{};</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>rtr_message.<ref refid="structhf__can__message__t_1a0b85c579dd4bb8ad383e91510ef5e1f4" kindref="member">id</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref>;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>rtr_message.is_rtr<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>rtr_message.dlc<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>RTR<sp/>frame<sp/>(ID:<sp/>0x%03X,<sp/>DLC:<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>rtr_message.id,<sp/>rtr_message.dlc);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(rtr_message,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>remote<sp/>frame&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>2000))<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;RTR<sp/>frame<sp/>not<sp/>received<sp/>in<sp/>loopback<sp/>mode<sp/>(this<sp/>may<sp/>be<sp/>expected)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;RTR<sp/>frame<sp/>received<sp/>successfully<sp/>in<sp/>loopback<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>RTR<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" kindref="member">last_received_message</ref>.<ref refid="structhf__can__message__t_1a55b067aab266686216317dd487e222ad" kindref="member">is_rtr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>message<sp/>should<sp/>be<sp/>RTR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>message<sp/>transmission<sp/>test<sp/>completed<sp/>(loopback<sp/>mode)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>Loopback<sp/>reception<sp/>may<sp/>not<sp/>work<sp/>in<sp/>all<sp/>ESP-IDF<sp/>v5.5<sp/>configurations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADVANCED<sp/>FILTERING<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1add8f3a80a5a35b22c828e80d807499c7" kindref="member">test_can_acceptance_filtering</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>acceptance<sp/>filtering<sp/>with<sp/>ESP-IDF<sp/>v5.5<sp/>loopback<sp/>pattern...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>exact<sp/>same<sp/>configuration<sp/>as<sp/>the<sp/>working<sp/>ESP-IDF<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Same<sp/>pin<sp/>for<sp/>internal<sp/>loopback<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>ACK<sp/>required<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>filtering<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>single<sp/>filter<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>only<sp/>IDs<sp/>0x100-0x10F<sp/>(mask<sp/>0x7F0,<sp/>ID<sp/>0x100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SetAcceptanceFilter(0x100,<sp/>0x7F0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>acceptance<sp/>filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>accepted<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accepted_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x105,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>pass<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>accepted<sp/>message<sp/>(ID:<sp/>0x%03X,<sp/>should<sp/>pass<sp/>filter)&quot;</highlight><highlight class="normal">,<sp/>accepted_msg.id);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(accepted_msg,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>accepted<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>2000))<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Accepted<sp/>message<sp/>not<sp/>received<sp/>in<sp/>loopback<sp/>mode<sp/>(this<sp/>may<sp/>be<sp/>expected)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Accepted<sp/>message<sp/>received<sp/>successfully<sp/>in<sp/>loopback<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>rejected<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rejected_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x200,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>filtered<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>rejected<sp/>message<sp/>(ID:<sp/>0x%03X,<sp/>should<sp/>be<sp/>filtered)&quot;</highlight><highlight class="normal">,<sp/>rejected_msg.id);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(rejected_msg,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>rejected<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>receive<sp/>this<sp/>message<sp/>due<sp/>to<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Rejected<sp/>message<sp/>was<sp/>received<sp/>(filter<sp/>may<sp/>not<sp/>work<sp/>in<sp/>loopback<sp/>mode)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Rejected<sp/>message<sp/>correctly<sp/>filtered<sp/>out&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>dual<sp/>filter<sp/>mode<sp/>using<sp/>advanced<sp/>filter<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__filter__config__t" kindref="compound">hf_esp_can_filter_config_t</ref><sp/>dual_filter{};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>dual_filter.<ref refid="structhf__esp__can__filter__config__t_1abe6a19952410570b8be6ccdb2e2daf39" kindref="member">is_dual_filter</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>dual_filter.id<sp/>=<sp/>0x300;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>dual_filter.mask<sp/>=<sp/>0x7F0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>dual_filter.id2<sp/>=<sp/>0x400;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>dual_filter.mask2<sp/>=<sp/>0x7F0;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>dual_filter.is_extended<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.ConfigureAdvancedFilter(dual_filter)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>dual<sp/>filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>both<sp/>filter<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg1<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x305,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>First<sp/>filter<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg2<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x405,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>Second<sp/>filter<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>dual<sp/>filter<sp/>with<sp/>messages<sp/>0x%03X<sp/>and<sp/>0x%03X&quot;</highlight><highlight class="normal">,<sp/>msg1.id,<sp/>msg2.id);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>test_can.SendMessage(msg1,<sp/>1000);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>test_can.SendMessage(msg2,<sp/>1000);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>both<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Dual<sp/>filter<sp/>test:<sp/>received<sp/>%d<sp/>messages<sp/>(expected<sp/>0-2<sp/>in<sp/>loopback<sp/>mode)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.load());</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>filter<sp/>(accept<sp/>all)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.ClearAcceptanceFilter()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>clear<sp/>acceptance<sp/>filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>acceptance<sp/>filtering<sp/>test<sp/>completed<sp/>(loopback<sp/>mode)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>Filtering<sp/>behavior<sp/>may<sp/>differ<sp/>in<sp/>loopback<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADVANCED<sp/>TIMING<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a610e875bfec26da82d26862eee079413" kindref="member">test_can_advanced_timing</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>advanced<sp/>bit<sp/>timing<sp/>configuration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/>250000;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>with<sp/>250kbps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>external<sp/>ACK<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Using<sp/>physical<sp/>wire<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>timing<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>custom<sp/>timing<sp/>configuration<sp/>for<sp/>improved<sp/>signal<sp/>quality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__timing__config__t" kindref="compound">hf_esp_can_timing_config_t</ref><sp/>custom_timing{};</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>custom_timing.<ref refid="structhf__esp__can__timing__config__t_1a1eda91ba0c3f3725ce8c508c1315e828" kindref="member">brp</ref><sp/>=<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prescaler<sp/>for<sp/>250kbps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>custom_timing.prop_seg<sp/>=<sp/>5;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Propagation<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>custom_timing.tseg_1<sp/>=<sp/>8;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>segment<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>custom_timing.tseg_2<sp/>=<sp/>3;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>segment<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>custom_timing.sjw<sp/>=<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Synchronization<sp/>jump<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>custom_timing.ssp_offset<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Secondary<sp/>sample<sp/>point<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.ConfigureAdvancedTiming(custom_timing)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>advanced<sp/>timing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>message<sp/>transmission<sp/>with<sp/>custom<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_message<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(test_message,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>message<sp/>with<sp/>custom<sp/>timing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Message<sp/>not<sp/>received<sp/>with<sp/>custom<sp/>timing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>advanced<sp/>timing<sp/>configuration<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ERROR<sp/>HANDLING<sp/>AND<sp/>RECOVERY<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a416afd491136be930bda5109d92394c1" kindref="member">test_can_error_handling</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>error<sp/>handling<sp/>and<sp/>recovery...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>mode<sp/>to<sp/>potentially<sp/>trigger<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>can_config.enable_alerts<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>error<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>initial<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__status__t" kindref="compound">hf_can_status_t</ref><sp/>initial_status{};</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.GetStatus(initial_status)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>initial<sp/>CAN<sp/>status&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>status<sp/>-<sp/>TX<sp/>errors:<sp/>%d,<sp/>RX<sp/>errors:<sp/>%d,<sp/>Bus-off:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_status.tx_error_count,<sp/>initial_status.rx_error_count,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_status.bus_off<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;No&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>statistics<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__statistics__t" kindref="compound">hf_can_statistics_t</ref><sp/>stats{};</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.GetStatistics(stats)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>CAN<sp/>statistics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__diagnostics__t" kindref="compound">hf_can_diagnostics_t</ref><sp/>diagnostics{};</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.GetDiagnostics(diagnostics)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>CAN<sp/>diagnostics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>reset<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Reset()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>CAN<sp/>controller&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>statistics<sp/>were<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.GetStatistics(stats)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>statistics<sp/>after<sp/>reset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>node<sp/>info<sp/>retrieval<sp/>(ESP-IDF<sp/>v5.5<sp/>specific)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>twai_node_record_t<sp/>node_info{};</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.GetNodeInfo(node_info)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>TWAI<sp/>node<sp/>info&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>info<sp/>-<sp/>Bus<sp/>errors:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>node_info.bus_err_num);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>error<sp/>handling<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1aa3bc2653a52a6182eb4e5f8b389b7ee4" kindref="member">test_can_bus_recovery</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>bus<sp/>recovery<sp/>functionality...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>same<sp/>pin<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>ACK<sp/>required<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>can_config.enable_alerts<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>recovery<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>bus<sp/>recovery<sp/>initiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.InitiateBusRecovery()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initiate<sp/>bus<sp/>recovery&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>recovery<sp/>initiated<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>recovery<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>we<sp/>can<sp/>still<sp/>send<sp/>messages<sp/>after<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_message<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(test_message,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>message<sp/>after<sp/>recovery&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Message<sp/>not<sp/>received<sp/>after<sp/>recovery&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>bus<sp/>recovery<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PERFORMANCE<sp/>AND<sp/>STRESS<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a2fa4240ea7c67ffbb7c6826c68564ac4" kindref="member">test_can_batch_transmission</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>batch<sp/>message<sp/>transmission<sp/>with<sp/>ESP-IDF<sp/>v5.5<sp/>loopback<sp/>pattern...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>exact<sp/>same<sp/>configuration<sp/>as<sp/>the<sp/>working<sp/>ESP-IDF<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Same<sp/>pin<sp/>for<sp/>internal<sp/>loopback<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>ACK<sp/>required<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback<sp/>(like<sp/>ESP-IDF<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>can_config.tx_queue_depth<sp/>=<sp/>20;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger<sp/>queue<sp/>for<sp/>batch<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>batch<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>batch<sp/>of<sp/>test<sp/>messages<sp/>(smaller<sp/>batch<sp/>for<sp/>loopback<sp/>testing)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>BATCH_SIZE<sp/>=<sp/>5;<sp/></highlight><highlight class="comment">//<sp/>Reduced<sp/>for<sp/>loopback<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>std::vector&lt;hf_can_message_t&gt;<sp/>batch_messages;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BATCH_SIZE;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref><sp/>+<sp/>i,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>batch_messages.push_back(msg);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>batch<sp/>of<sp/>%d<sp/>messages<sp/>in<sp/>loopback<sp/>mode&quot;</highlight><highlight class="normal">,<sp/>BATCH_SIZE);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>batch<sp/>using<sp/>the<sp/>new<sp/>batch<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sent_count<sp/>=<sp/>test_can.SendMessageBatch(batch_messages.data(),<sp/>BATCH_SIZE,<sp/>1000);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sent_count<sp/>!=<sp/>BATCH_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>to<sp/>send<sp/>%d<sp/>messages,<sp/>actually<sp/>sent<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>BATCH_SIZE,<sp/>sent_count);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>sent<sp/>%d<sp/>messages,<sp/>waiting<sp/>for<sp/>reception...&quot;</highlight><highlight class="normal">,<sp/>sent_count);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>all<sp/>messages<sp/>to<sp/>be<sp/>received<sp/>(longer<sp/>timeout<sp/>for<sp/>loopback)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(2000));</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>uint32_t<sp/>received_count<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.load();</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Batch<sp/>transmission<sp/>results:<sp/>sent<sp/>%d,<sp/>received<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>sent_count,<sp/>received_count);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>loopback<sp/>mode,<sp/>we<sp/>may<sp/>not<sp/>receive<sp/>all<sp/>messages,<sp/>so<sp/>we&apos;re<sp/>more<sp/>lenient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(received_count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>messages<sp/>received<sp/>in<sp/>loopback<sp/>mode<sp/>(this<sp/>may<sp/>be<sp/>expected)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(received_count<sp/>&lt;<sp/>sent_count)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Partial<sp/>reception<sp/>in<sp/>loopback<sp/>mode:<sp/>%d/%d<sp/>messages&quot;</highlight><highlight class="normal">,<sp/>received_count,<sp/>sent_count);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>messages<sp/>received<sp/>successfully<sp/>in<sp/>loopback<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>batch<sp/>transmission<sp/>test<sp/>completed<sp/>(loopback<sp/>mode)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>Loopback<sp/>reception<sp/>may<sp/>not<sp/>work<sp/>in<sp/>all<sp/>ESP-IDF<sp/>v5.5<sp/>configurations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a5a1cbd830fb13ca11bdba428f616688e" kindref="member">test_can_high_throughput</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>high<sp/>throughput<sp/>performance...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>same<sp/>pin<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/>1000000;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>Mbps<sp/>for<sp/>high<sp/>throughput</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>ACK<sp/>required<sp/>for<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>can_config.tx_queue_depth<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>can_config.sample_point_permill<sp/>=<sp/>800;<sp/></highlight><highlight class="comment">//<sp/>80%<sp/>for<sp/>high<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>throughput<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>timing<sp/>for<sp/>1<sp/>Mbps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__timing__config__t" kindref="compound">hf_esp_can_timing_config_t</ref><sp/>high_speed_timing{};</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>high_speed_timing.<ref refid="structhf__esp__can__timing__config__t_1a1eda91ba0c3f3725ce8c508c1315e828" kindref="member">brp</ref><sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>Prescaler<sp/>for<sp/>1<sp/>Mbps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>high_speed_timing.prop_seg<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>high_speed_timing.tseg_1<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>high_speed_timing.tseg_2<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>high_speed_timing.sjw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.ConfigureAdvancedTiming(high_speed_timing)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>high-speed<sp/>timing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Measure<sp/>throughput<sp/>(reduced<sp/>message<sp/>count<sp/>to<sp/>prevent<sp/>driver<sp/>overload)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>TEST_MESSAGES<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>uint64_t<sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>messages<sp/>with<sp/>controlled<sp/>rate<sp/>to<sp/>prevent<sp/>driver<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sent_successfully<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>TEST_MESSAGES;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref><sp/>+<sp/>(i<sp/>%<sp/>100),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(msg,<sp/>500)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sent_successfully++;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Additional<sp/>delay<sp/>between<sp/>messages<sp/>to<sp/>prevent<sp/>driver<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(5));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>reception<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(2000));</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>uint64_t<sp/>end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>uint64_t<sp/>duration_us<sp/>=<sp/>end_time<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>uint32_t<sp/>duration_ms<sp/>=<sp/>(uint32_t)(duration_us<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>uint32_t<sp/>received_count<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.load();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Throughput<sp/>test<sp/>results:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Messages<sp/>sent:<sp/>%d/%d&quot;</highlight><highlight class="normal">,<sp/>sent_successfully,<sp/>TEST_MESSAGES);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Messages<sp/>received:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>received_count);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Test<sp/>duration:<sp/>%d<sp/>ms&quot;</highlight><highlight class="normal">,<sp/>duration_ms);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Effective<sp/>rate:<sp/>%.2f<sp/>msg/s&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)received_count<sp/>*<sp/>1000.0f<sp/>/<sp/>duration_ms);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(received_count<sp/>&lt;<sp/>sent_successfully<sp/>*<sp/>0.95f)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>5%<sp/>loss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;High<sp/>packet<sp/>loss<sp/>detected<sp/>in<sp/>throughput<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>high<sp/>throughput<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SN65<sp/>TRANSCEIVER<sp/>SPECIFIC<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a720210db5a0b95ad5cd955ea299924fd" kindref="member">test_external_physical_loopback</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>external<sp/>physical<sp/>loopback<sp/>with<sp/>proper<sp/>CAN<sp/>bus<sp/>loopback...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>REQUIRES:<sp/>CAN<sp/>bus<sp/>loopback<sp/>AFTER<sp/>transceiver<sp/>***&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>Connect:<sp/>SN65<sp/>CANH<sp/>-&gt;<sp/>120Ω<sp/>resistor<sp/>-&gt;<sp/>SN65<sp/>CANL<sp/>***&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>DO<sp/>NOT<sp/>short<sp/>TWAI<sp/>TX/RX<sp/>lines<sp/>directly<sp/>-<sp/>this<sp/>will<sp/>NOT<sp/>work!<sp/>***&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>self-test<sp/>(no<sp/>ACK<sp/>required)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>internal<sp/>loopback<sp/>-<sp/>using<sp/>external<sp/>wire</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>can_config.tx_queue_depth<sp/>=<sp/>20;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger<sp/>queue<sp/>for<sp/>external<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>external<sp/>loopback<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>multiple<sp/>message<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>hf_can_message_t&gt;&gt;<sp/>test_cases<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Standard<sp/>11-bit<sp/>ID&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x123,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8)},</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Extended<sp/>29-bit<sp/>ID&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x12345678,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>6)},</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Short<sp/>message<sp/>(2<sp/>bytes)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x456,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2)},</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;RTR<sp/>frame&quot;</highlight><highlight class="normal">,<sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rtr_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x789,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtr_msg.<ref refid="structhf__can__message__t_1a55b067aab266686216317dd487e222ad" kindref="member">is_rtr</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rtr_msg;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}};</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Configuration:<sp/>TX=GPIO%d,<sp/>RX=GPIO%d,<sp/>Self-test=%s,<sp/>Loopback=%s&quot;</highlight><highlight class="normal">,<sp/>can_config.tx_pin,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_config.rx_pin,<sp/>can_config.enable_self_test<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can_config.enable_loopback<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>test_case<sp/>:<sp/>test_cases)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_case.first.c_str());</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(test_case.second,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>2000))<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>message<sp/>integrity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" kindref="member">last_received_message</ref>.<ref refid="structhf__can__message__t_1a0b85c579dd4bb8ad383e91510ef5e1f4" kindref="member">id</ref><sp/>==<sp/>test_case.second.id<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" kindref="member">last_received_message</ref>.<ref refid="structhf__can__message__t_1acb38dbcef71c8cc85fe70039fbfb0045" kindref="member">is_extended</ref><sp/>==<sp/>test_case.second.is_extended<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" kindref="member">last_received_message</ref>.<ref refid="structhf__can__message__t_1a55b067aab266686216317dd487e222ad" kindref="member">is_rtr</ref><sp/>==<sp/>test_case.second.is_rtr)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>%s<sp/>-<sp/>PASSED&quot;</highlight><highlight class="normal">,<sp/>test_case.first.c_str());</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>%s<sp/>-<sp/>Message<sp/>corruption<sp/>detected&quot;</highlight><highlight class="normal">,<sp/>test_case.first.c_str());</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>%s<sp/>-<sp/>No<sp/>message<sp/>received&quot;</highlight><highlight class="normal">,<sp/>test_case.first.c_str());</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>%s<sp/>-<sp/>Failed<sp/>to<sp/>send&quot;</highlight><highlight class="normal">,<sp/>test_case.first.c_str());</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all_tests_passed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));<sp/></highlight><highlight class="comment">//<sp/>Brief<sp/>delay<sp/>between<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_tests_passed)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>External<sp/>physical<sp/>loopback<sp/>test<sp/>PASSED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>External<sp/>physical<sp/>loopback<sp/>test<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>This<sp/>test<sp/>requires<sp/>CANH-&gt;120Ω-&gt;CANL<sp/>loopback<sp/>AFTER<sp/>transceiver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;DO<sp/>NOT<sp/>short<sp/>TWAI<sp/>TX/RX<sp/>lines<sp/>directly<sp/>-<sp/>this<sp/>will<sp/>NOT<sp/>work!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>all_tests_passed;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a52afe048b4516a467a66e0355377dfdf" kindref="member">test_loopback_comparison</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>internal<sp/>vs<sp/>external<sp/>loopback<sp/>comparison...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>Internal<sp/>loopback<sp/>(should<sp/>work)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>1:<sp/>Internal<sp/>loopback<sp/>(TX=GPIO%d,<sp/>RX=GPIO%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>internal_config{};</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Same<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>internal_can(internal_config);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal_can.Initialize()<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x100,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(internal_can.SendMessage(test_msg,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>Internal<sp/>loopback:<sp/>Message<sp/>received<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;⚠️<sp/><sp/>Internal<sp/>loopback:<sp/>No<sp/>message<sp/>received&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>Internal<sp/>loopback:<sp/>Failed<sp/>to<sp/>send<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2:<sp/>External<sp/>loopback<sp/>(with<sp/>proper<sp/>CAN<sp/>bus<sp/>loopback)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>2:<sp/>External<sp/>loopback<sp/>(TX=GPIO%d,<sp/>RX=GPIO%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>,<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Note:<sp/>This<sp/>requires<sp/>CANH-&gt;120Ω-&gt;CANL<sp/>loopback<sp/>AFTER<sp/>transceiver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>external_config{};</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>external_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>external_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;<sp/></highlight><highlight class="comment">//<sp/>Different<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>external_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>external_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>external_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>External<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>external_can(external_config);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(external_can.Initialize()<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>external_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_msg<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(0x200,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(external_can.SendMessage(test_msg,<sp/>1000)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✅<sp/>External<sp/>loopback:<sp/>Message<sp/>received<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;⚠️<sp/><sp/>External<sp/>loopback:<sp/>No<sp/>message<sp/>received<sp/>(requires<sp/>CANH-&gt;120Ω-&gt;CANL<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;loopback)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;❌<sp/>External<sp/>loopback:<sp/>Failed<sp/>to<sp/>send<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Loopback<sp/>comparison<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1af0c16d195a75aadad0869a1b182ced59" kindref="member">test_sn65_transceiver_integration</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>SN65<sp/>CAN<sp/>transceiver<sp/>integration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>different<sp/>SN65<sp/>configurations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>test_baud_rates<sp/>=<sp/>{125000,<sp/>250000,<sp/>500000,<sp/>1000000};</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>baud_rate<sp/>:<sp/>test_baud_rates)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>SN65<sp/>at<sp/>%d<sp/>bps...&quot;</highlight><highlight class="normal">,<sp/>baud_rate);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>can_config.baud_rate<sp/>=<sp/>baud_rate;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>sample<sp/>point<sp/>based<sp/>on<sp/>baud<sp/>rate<sp/>for<sp/>SN65<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baud_rate<sp/>&gt;=<sp/>1000000)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>can_config.sample_point_permill<sp/>=<sp/>800;<sp/></highlight><highlight class="comment">//<sp/>80%<sp/>for<sp/>high<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>can_config.sample_point_permill<sp/>=<sp/>750;<sp/></highlight><highlight class="comment">//<sp/>75%<sp/>for<sp/>lower<sp/>speeds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>at<sp/>%d<sp/>bps&quot;</highlight><highlight class="normal">,<sp/>baud_rate);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>signal<sp/>integrity<sp/>at<sp/>this<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_message<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a5f5deb8c306bfd4833b6a2629aca64f3" kindref="member">create_test_message</ref>(<ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>8);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(test_message,<sp/>1000)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>send<sp/>message<sp/>at<sp/>%d<sp/>bps&quot;</highlight><highlight class="normal">,<sp/>baud_rate);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>1000))<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>message<sp/>received<sp/>at<sp/>%d<sp/>bps&quot;</highlight><highlight class="normal">,<sp/>baud_rate);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;SN65<sp/>test<sp/>passed<sp/>at<sp/>%d<sp/>bps&quot;</highlight><highlight class="normal">,<sp/>baud_rate);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>test_can.Deinitialize();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));<sp/></highlight><highlight class="comment">//<sp/>Brief<sp/>delay<sp/>between<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>SN65<sp/>transceiver<sp/>integration<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a35dd5351b620eefea92884b6e4b2dd26" kindref="member">test_can_signal_quality</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>CAN<sp/>signal<sp/>quality<sp/>with<sp/>SN65<sp/>transceiver...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref><sp/>can_config{};</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>can_config.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>can_config.rx_pin<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>can_config.baud_rate<sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1adf4d53594bf9b81f94d0d8cbaa284c00" kindref="member">TEST_BAUD_RATE</ref>;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>can_config.enable_self_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>external<sp/>ACK<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>can_config.enable_loopback<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Using<sp/>physical<sp/>wire<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>can_config.enable_alerts<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref><sp/>test_can(can_config);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.Initialize()<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>CAN<sp/>for<sp/>signal<sp/>quality<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>test_can.SetReceiveCallbackEx(<ref refid="CanComprehensiveTest_8cpp_1a5c90c1aab930e6a1ef54294358a39a38" kindref="member">test_receive_callback_enhanced</ref>);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>signal<sp/>quality<sp/>with<sp/>various<sp/>message<sp/>patterns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;uint8_t&gt;&gt;<sp/>test_patterns<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00},<sp/></highlight><highlight class="comment">//<sp/>All<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF},<sp/></highlight><highlight class="comment">//<sp/>All<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xAA,<sp/>0xAA,<sp/>0xAA,<sp/>0xAA,<sp/>0xAA,<sp/>0xAA,<sp/>0xAA,<sp/>0xAA},<sp/></highlight><highlight class="comment">//<sp/>Alternating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x55,<sp/>0x55,<sp/>0x55,<sp/>0x55,<sp/>0x55,<sp/>0x55,<sp/>0x55,<sp/>0x55},<sp/></highlight><highlight class="comment">//<sp/>Alternating<sp/>opposite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x01,<sp/>0x23,<sp/>0x45,<sp/>0x67,<sp/>0x89,<sp/>0xAB,<sp/>0xCD,<sp/>0xEF},<sp/></highlight><highlight class="comment">//<sp/>Incremental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>uint32_t<sp/>successful_transmissions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>uint32_t<sp/>total_attempts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pattern<sp/>:<sp/>test_patterns)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeat<sp/>=<sp/>0;<sp/>repeat<sp/>&lt;<sp/>10;<sp/>++repeat)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Test<sp/>each<sp/>pattern<sp/>multiple<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/>test_message{};</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_message.<ref refid="structhf__can__message__t_1a0b85c579dd4bb8ad383e91510ef5e1f4" kindref="member">id</ref><sp/>=<sp/><ref refid="CanComprehensiveTest_8cpp_1a140922bb4ee7ce0668f3cccd63935fe0" kindref="member">TEST_CAN_ID_STANDARD</ref><sp/>+<sp/>repeat;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_message.dlc<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(test_message.data,<sp/>pattern.data(),<sp/>8);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a0432340a642ae2362801068955fec287" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_can.SendMessage(test_message,<sp/>500)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_attempts++;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1a0778bcb00e384f7f31d1f2c1a5541c99" kindref="member">wait_for_event</ref>(<ref refid="CanComprehensiveTest_8cpp_1acded02cdd447ab7cdcecdbd9d3aa0fb6" kindref="member">MESSAGE_RECEIVED_BIT</ref>,<sp/>500))<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successful_transmissions++;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>data<sp/>integrity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>data_correct<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="CanComprehensiveTest_8cpp_1aa895b75b5ea03a8deaeaec2e187abb39" kindref="member">last_received_message</ref>.<ref refid="structhf__can__message__t_1a991f9b496db72054277c92e117b58940" kindref="member">data</ref>[i]<sp/>!=<sp/>pattern[i])<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_correct<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data_correct)<sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Data<sp/>corruption<sp/>detected<sp/>in<sp/>signal<sp/>quality<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>success_rate<sp/>=<sp/>(float)successful_transmissions<sp/>/<sp/>total_attempts<sp/>*<sp/>100.0f;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>quality<sp/>test<sp/>results:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Total<sp/>attempts:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>total_attempts);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Successful:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>successful_transmissions);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Success<sp/>rate:<sp/>%.2f%%&quot;</highlight><highlight class="normal">,<sp/>success_rate);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success_rate<sp/>&lt;<sp/>98.0f)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>very<sp/>high<sp/>success<sp/>rate<sp/>in<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>quality<sp/>below<sp/>acceptable<sp/>threshold&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>CAN<sp/>signal<sp/>quality<sp/>test<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAIN<sp/>TEST<sp/>RUNNER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CanComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" kindref="member">app_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╔══════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>CAN<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP-IDF<sp/>v5.5<sp/>TWAI<sp/>API<sp/>+<sp/>SN65<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Hardware<sp/>Configuration:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>MCU:<sp/>ESP32-C6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>TX<sp/>Pin:<sp/>GPIO%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>RX<sp/>Pin:<sp/>GPIO%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1aee25e49b5563adeabfa626ff48a0cf26" kindref="member">TEST_RX_PIN</ref>);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Transceiver:<sp/>SN65HVD230/232&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>API:<sp/>ESP-IDF<sp/>v5.5<sp/>TWAI<sp/>node-based&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Internal<sp/>Loopback:<sp/>TX<sp/>and<sp/>RX<sp/>on<sp/>same<sp/>pin<sp/>(GPIO%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af9406ea2f88851389df238e4ec672a3e" kindref="member">TEST_TX_PIN</ref>);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>External<sp/>Loopback:<sp/>CANH-&gt;120Ω-&gt;CANL<sp/>(after<sp/>transceiver)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>CAN<sp/>pin<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a9f7a9f239e24fa50256f4f00538ece6d" kindref="member">verify_can_pin_states</ref>();</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>test<sp/>event<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" kindref="member">test_event_group</ref><sp/>=<sp/>xEventGroupCreate();</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" kindref="member">test_event_group</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>event<sp/>group&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>test<sp/>section<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a200bb35a3a48c625b9cb8d2511d6bd87" kindref="member">print_test_section_status</ref>(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>comprehensive<sp/>test<sp/>suite<sp/>based<sp/>on<sp/>configuration<sp/>with<sp/>test<sp/>sectioning<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab72cc2ae0fb724218e81479185ab38c6" kindref="member">RUN_TEST_SECTION_IF_ENABLED_WITH_PATTERN</ref>(</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>CORE<sp/>TESTS&quot;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Core<sp/>functionality<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>core<sp/>CAN<sp/>functionality<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;initialization&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1ae735bad5b790362e222ffd4f1f5dcdf6" kindref="member">test_can_initialization</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>initialization<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;self_test_mode&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1aa017f3c49e5203c9c211ff83ae7e4d1a" kindref="member">test_can_self_test_mode</ref>,<sp/>12288,<sp/>1);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>self-test<sp/>mode<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;message_transmission&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a1a5ace41a3da9893da74676f3ca16971" kindref="member">test_can_message_transmission</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>message<sp/>transmission<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab72cc2ae0fb724218e81479185ab38c6" kindref="member">RUN_TEST_SECTION_IF_ENABLED_WITH_PATTERN</ref>(</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>ADVANCED<sp/>TESTS&quot;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advanced<sp/>feature<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>advanced<sp/>CAN<sp/>feature<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;acceptance_filtering&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1add8f3a80a5a35b22c828e80d807499c7" kindref="member">test_can_acceptance_filtering</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>acceptance<sp/>filtering<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;advanced_timing&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a610e875bfec26da82d26862eee079413" kindref="member">test_can_advanced_timing</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>advanced<sp/>timing<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab72cc2ae0fb724218e81479185ab38c6" kindref="member">RUN_TEST_SECTION_IF_ENABLED_WITH_PATTERN</ref>(</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1ac9980ee02b5f22eb42bb23a63fed7d60" kindref="member">ENABLE_ERROR_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>ERROR<sp/>TESTS&quot;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>handling<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>CAN<sp/>error<sp/>handling<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;error_handling&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a416afd491136be930bda5109d92394c1" kindref="member">test_can_error_handling</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>error<sp/>handling<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;bus_recovery&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1aa3bc2653a52a6182eb4e5f8b389b7ee4" kindref="member">test_can_bus_recovery</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>bus<sp/>recovery<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab72cc2ae0fb724218e81479185ab38c6" kindref="member">RUN_TEST_SECTION_IF_ENABLED_WITH_PATTERN</ref>(</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1a362ae025a7b83c898995613ee8fbddc7" kindref="member">ENABLE_PERFORMANCE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>PERFORMANCE<sp/>TESTS&quot;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Performance<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>CAN<sp/>performance<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;batch_transmission&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a2fa4240ea7c67ffbb7c6826c68564ac4" kindref="member">test_can_batch_transmission</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>batch<sp/>transmission<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;high_throughput&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a5a1cbd830fb13ca11bdba428f616688e" kindref="member">test_can_high_throughput</ref>,<sp/>12288,<sp/>1);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>high<sp/>throughput<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab72cc2ae0fb724218e81479185ab38c6" kindref="member">RUN_TEST_SECTION_IF_ENABLED_WITH_PATTERN</ref>(</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CanComprehensiveTest_8cpp_1ae9ce44061049719617642b191c9d293a" kindref="member">ENABLE_TRANSCEIVER_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;CAN<sp/>TRANSCEIVER<sp/>TESTS&quot;</highlight><highlight class="normal">,<sp/>5,</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SN65<sp/>transceiver<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>SN65<sp/>transceiver<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;loopback_comparison&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a52afe048b4516a467a66e0355377dfdf" kindref="member">test_loopback_comparison</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>loopback<sp/>comparison<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;external_physical_loopback&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a720210db5a0b95ad5cd955ea299924fd" kindref="member">test_external_physical_loopback</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>external<sp/>physical<sp/>loopback<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;sn65_transceiver_integration&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1af0c16d195a75aadad0869a1b182ced59" kindref="member">test_sn65_transceiver_integration</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>SN65<sp/>transceiver<sp/>integration<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;can_signal_quality&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a35dd5351b620eefea92884b6e4b2dd26" kindref="member">test_can_signal_quality</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/></highlight><highlight class="comment">//<sp/>Toggle<sp/>GPIO14<sp/>after<sp/>signal<sp/>quality<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab7e4c076755ecdf2ad6212cb8f6578ab" kindref="member">print_test_summary</ref>(<ref refid="CanComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP32-C6<sp/>CAN<sp/>(ESP-IDF<sp/>v5.5<sp/>+<sp/>SN65)&quot;</highlight><highlight class="normal">,<sp/><ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>vEventGroupDelete(<ref refid="CanComprehensiveTest_8cpp_1ab0308495881e7dacd04f8dc2a44db2d0" kindref="member">test_event_group</ref>);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╔══════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST<sp/>SUITE<sp/>COMPLETED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="CanComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10000));</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="examples/esp32/main/CanComprehensiveTest.cpp"/>
  </compounddef>
</doxygen>
