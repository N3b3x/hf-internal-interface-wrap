<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="TemperatureComprehensiveTest_8cpp" kind="file" language="C++">
    <compoundname>TemperatureComprehensiveTest.cpp</compoundname>
    <includes refid="TestFramework_8h" local="yes">TestFramework.h</includes>
    <includes refid="BaseTemperature_8h" local="yes">base/BaseTemperature.h</includes>
    <includes refid="EspTemperature_8h" local="yes">mcu/esp32/EspTemperature.h</includes>
    <includes local="no">atomic</includes>
    <incdepgraph>
      <node id="1">
        <label>examples/esp32/main/TemperatureComprehensiveTest.cpp</label>
        <link refid="TemperatureComprehensiveTest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TestFramework.h</label>
        <link refid="TestFramework_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>BaseGpio.h</label>
        <link refid="BaseGpio_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>base/BaseTemperature.h</label>
        <link refid="BaseTemperature_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>mcu/esp32/EspGpio.h</label>
        <link refid="EspGpio_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>mcu/esp32/EspTemperature.h</label>
        <link refid="EspTemperature_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>EspTypes_Base.h</label>
        <link refid="EspTypes__Base_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>EspTypes_GPIO.h</label>
        <link refid="EspTypes__GPIO_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>../../utils/McuSelect.h</label>
        <link refid="McuSelect_8h"/>
      </node>
      <node id="25">
        <label>utils/RtosMutex.h</label>
        <link refid="RtosMutex_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>atomic</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="13">
        <label>driver/gpio.h</label>
      </node>
      <node id="26">
        <label>driver/temperature_sensor.h</label>
      </node>
      <node id="14">
        <label>esp_attr.h</label>
      </node>
      <node id="27">
        <label>esp_err.h</label>
      </node>
      <node id="3">
        <label>esp_log.h</label>
      </node>
      <node id="4">
        <label>esp_timer.h</label>
      </node>
      <node id="5">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="6">
        <label>freertos/queue.h</label>
      </node>
      <node id="7">
        <label>freertos/semphr.h</label>
      </node>
      <node id="8">
        <label>freertos/task.h</label>
      </node>
      <node id="16">
        <label>functional</label>
      </node>
      <node id="11">
        <label>limits</label>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
      <node id="17">
        <label>string_view</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;TEMP_Test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="11" column="19" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" prot="public" static="yes" mutable="no">
        <type><ref refid="structTestResults" kindref="compound">TestResults</ref></type>
        <definition>TestResults g_test_results</definition>
        <argsstring></argsstring>
        <name>g_test_results</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="13" column="20" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1aed8dff42ebb1f43229bfddf2b3c4d3d9" prot="public" static="yes" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; g_threshold_callback_count</definition>
        <argsstring></argsstring>
        <name>g_threshold_callback_count</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="16" column="20" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1a421d08f2e255d4dc1bbe10bfe6bc0781" prot="public" static="yes" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; g_monitoring_callback_count</definition>
        <argsstring></argsstring>
        <name>g_monitoring_callback_count</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="17" column="20" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1abb976e659df9fbc0a773f855b01ad0c6" prot="public" static="yes" mutable="no">
        <type>std::atomic&lt; float &gt;</type>
        <definition>std::atomic&lt;float&gt; g_last_callback_temperature</definition>
        <argsstring></argsstring>
        <name>g_last_callback_temperature</name>
        <initializer>{0.0f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="18" column="20" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CORE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CORE_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="26" column="23" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ADVANCED_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ADVANCED_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="27" column="23" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1aebc439ed63a7faca33a8039748b20e2d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_FEATURE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_FEATURE_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="29" column="23" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1a7b508df4d2c3c64ab4a9ad64bac43490" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_DIAGNOSTIC_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_DIAGNOSTIC_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="31" column="23" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="TemperatureComprehensiveTest_8cpp_1a607ec39049dad2c67f0ab145e0311397" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_STRESS_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_STRESS_TESTS</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="33" column="23" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1aeacb1842bdb2d47722782755e7b9a769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void threshold_callback</definition>
        <argsstring>(BaseTemperature *sensor, float temperature, hf_u32_t threshold_type, void *user_data)</argsstring>
        <name>threshold_callback</name>
        <param>
          <type><ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>threshold_type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="39" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a64981704d5cf479bfdc3cf0d30503f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void monitoring_callback</definition>
        <argsstring>(BaseTemperature *sensor, const hf_temp_reading_t *reading, void *user_data)</argsstring>
        <name>monitoring_callback</name>
        <param>
          <type><ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref> *</type>
          <declname>reading</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="46" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1abe88f3886b81b39bd21d535490c97c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_threshold_callback</definition>
        <argsstring>(EspTemperature *sensor, float temperature, bool is_high_threshold)</argsstring>
        <name>esp_threshold_callback</name>
        <param>
          <type><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_high_threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="55" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a978a6b3ea32c84350a5ae5808f192133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_monitoring_callback</definition>
        <argsstring>(EspTemperature *sensor, float temperature, hf_u64_t timestamp_us)</argsstring>
        <name>esp_monitoring_callback</name>
        <param>
          <type><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref></type>
          <declname>timestamp_us</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="62" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1acf955b3d710dda12fa113d6053335645" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_temperature_sensor_initialization</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_temperature_sensor_initialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="72" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="72" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a1a4a2d461ac67ada86d6d67596ee1848" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_temperature_reading</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_temperature_reading</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="100" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="100" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1afb8d0318a2158f1458439e6e1812cf39" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_sensor_info</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_sensor_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="134" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="134" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a35f4933f098941a30d3335cff8d623fc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_range_management</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_range_management</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="170" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="170" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a09b7fc3a5c27a839f51fc1c7f3012e0d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_threshold_monitoring</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_threshold_monitoring</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="224" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="224" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a0abdeb6ccf1aa4f1b2b854ba0706ed38" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_continuous_monitoring</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_continuous_monitoring</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="280" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="280" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1af8edf6de06fc94e1116a21be3778f092" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_calibration</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_calibration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="350" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="350" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1afcb7b928de84dedcb23ce9294db13876" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_power_management</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_power_management</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="416" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="416" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1aaa048f1098e06567fd1d83053b0a30ea" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_self_test_and_health</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_self_test_and_health</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="479" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="479" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1ac6ee19f88b989b8170183b9c6f96f7a8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_statistics_and_diagnostics</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_statistics_and_diagnostics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="509" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="509" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1adb0b8c31604ce2c870a1ca8b9ab91f77" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_esp32_specific_features</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_esp32_specific_features</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="575" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="575" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a439230ad3ed34e4d4b8e6a04ac7f8821" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_error_handling</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_error_handling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="645" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="645" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a0828f1e6e8be1c2b73941a5529ba4da6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_performance_and_stress</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_performance_and_stress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="700" column="6" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="700" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="TemperatureComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void app_main</definition>
        <argsstring>(void)</argsstring>
        <name>app_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp" line="755" column="17" bodyfile="examples/esp32/main/TemperatureComprehensiveTest.cpp" bodystart="755" bodyend="829"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Comprehensive Temperature sensor testing suite for ESP32-C6 DevKit-M-1 (noexcept) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="TestFramework_8h" kindref="compound">TestFramework.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="BaseTemperature_8h" kindref="compound">base/BaseTemperature.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspTemperature_8h" kindref="compound">mcu/esp32/EspTemperature.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TEMP_Test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structTestResults" kindref="compound">TestResults</ref><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>callback<sp/>tracking<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic&lt;int&gt;<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aed8dff42ebb1f43229bfddf2b3c4d3d9" kindref="member">g_threshold_callback_count</ref>{0};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic&lt;int&gt;<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a421d08f2e255d4dc1bbe10bfe6bc0781" kindref="member">g_monitoring_callback_count</ref>{0};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::atomic&lt;float&gt;<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abb976e659df9fbc0a773f855b01ad0c6" kindref="member">g_last_callback_temperature</ref>{0.0f};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>SECTION<sp/>CONFIGURATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable/disable<sp/>specific<sp/>test<sp/>categories<sp/>by<sp/>setting<sp/>to<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Core<sp/>temperature<sp/>functionality<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Initialization,<sp/>reading,<sp/>sensor<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Range<sp/>management,<sp/>threshold<sp/>monitoring,<sp/>continuous<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aebc439ed63a7faca33a8039748b20e2d" kindref="member">ENABLE_FEATURE_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Calibration,<sp/>power<sp/>management,<sp/>self-test,<sp/>health<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a7b508df4d2c3c64ab4a9ad64bac43490" kindref="member">ENABLE_DIAGNOSTIC_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Statistics,<sp/>diagnostics,<sp/>ESP32-specific<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a607ec39049dad2c67f0ab145e0311397" kindref="member">ENABLE_STRESS_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Error<sp/>handling,<sp/>performance,<sp/>stress<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CALLBACK<sp/>FUNCTIONS<sp/>FOR<sp/>TESTING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aeacb1842bdb2d47722782755e7b9a769" kindref="member">threshold_callback</ref>(<ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref>*<sp/>sensor,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature,<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>threshold_type,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aed8dff42ebb1f43229bfddf2b3c4d3d9" kindref="member">g_threshold_callback_count</ref>++;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abb976e659df9fbc0a773f855b01ad0c6" kindref="member">g_last_callback_temperature</ref><sp/>=<sp/>temperature;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Threshold<sp/>callback:<sp/>%.2f°C,<sp/>type:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>temperature,<sp/>threshold_type);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a64981704d5cf479bfdc3cf0d30503f76" kindref="member">monitoring_callback</ref>(<ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref>*<sp/>sensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref>*<sp/>reading,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a421d08f2e255d4dc1bbe10bfe6bc0781" kindref="member">g_monitoring_callback_count</ref>++;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reading)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abb976e659df9fbc0a773f855b01ad0c6" kindref="member">g_last_callback_temperature</ref><sp/>=<sp/>reading-&gt;<ref refid="structhf__temp__reading__t_1ad8b20df88ef338aef1912deba6301f0a" kindref="member">temperature_celsius</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Monitoring<sp/>callback:<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>reading-&gt;<ref refid="structhf__temp__reading__t_1ad8b20df88ef338aef1912deba6301f0a" kindref="member">temperature_celsius</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abe88f3886b81b39bd21d535490c97c4d" kindref="member">esp_threshold_callback</ref>(<ref refid="classEspTemperature" kindref="compound">EspTemperature</ref>*<sp/>sensor,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_high_threshold)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aed8dff42ebb1f43229bfddf2b3c4d3d9" kindref="member">g_threshold_callback_count</ref>++;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abb976e659df9fbc0a773f855b01ad0c6" kindref="member">g_last_callback_temperature</ref><sp/>=<sp/>temperature;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP<sp/>threshold<sp/>callback:<sp/>%.2f°C,<sp/>high:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>temperature,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_high_threshold<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a978a6b3ea32c84350a5ae5808f192133" kindref="member">esp_monitoring_callback</ref>(<ref refid="classEspTemperature" kindref="compound">EspTemperature</ref>*<sp/>sensor,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature,<sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>timestamp_us)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a421d08f2e255d4dc1bbe10bfe6bc0781" kindref="member">g_monitoring_callback_count</ref>++;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abb976e659df9fbc0a773f855b01ad0c6" kindref="member">g_last_callback_temperature</ref><sp/>=<sp/>temperature;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP<sp/>monitoring<sp/>callback:<sp/>%.2f°C<sp/>at<sp/>%llu&quot;</highlight><highlight class="normal">,<sp/>temperature,<sp/>timestamp_us);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BASIC<sp/>FUNCTIONALITY<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1acf955b3d710dda12fa113d6053335645" kindref="member">test_temperature_sensor_initialization</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>temperature<sp/>sensor<sp/>initialization...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>initial<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_temp.<ref refid="classBaseTemperature_1a000ebd402761b9fd6fbb13f99070eb3a" kindref="member">GetState</ref>()<sp/>!=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12a8999c38c687847a232587904bae321ac" kindref="member">HF_TEMP_STATE_UNINITIALIZED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>state<sp/>should<sp/>be<sp/>UNINITIALIZED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_result<sp/>=<sp/>test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!init_result)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>temperature<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>state<sp/>after<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_temp.<ref refid="classBaseTemperature_1a000ebd402761b9fd6fbb13f99070eb3a" kindref="member">GetState</ref>()<sp/>!=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12ae345bd766f545d81fe3b507753f4dc7b" kindref="member">HF_TEMP_STATE_INITIALIZED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;State<sp/>should<sp/>be<sp/>INITIALIZED<sp/>after<sp/>init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Temperature<sp/>sensor<sp/>initialization<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a1a4a2d461ac67ada86d6d67596ee1848" kindref="member">test_temperature_reading</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>temperature<sp/>reading...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>basic<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_result<sp/>=<sp/>test_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(&amp;reading);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>temperature:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseTemperature_8h_1a5c4c3ef28b07964288c304c042b13671" kindref="member">HfTempErrToString</ref>(read_result).data());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reading.<ref refid="structhf__temp__reading__t_1af3f7c7d9c7bf4c1f4e9c6083ac208c18" kindref="member">is_valid</ref>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>reading<sp/>is<sp/>not<sp/>valid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>reasonable<sp/>temperature<sp/>range<sp/>(-50°C<sp/>to<sp/>150°C<sp/>for<sp/>chip)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reading.<ref refid="structhf__temp__reading__t_1ad8b20df88ef338aef1912deba6301f0a" kindref="member">temperature_celsius</ref><sp/>&lt;<sp/>-50.0f<sp/>||<sp/>reading.<ref refid="structhf__temp__reading__t_1ad8b20df88ef338aef1912deba6301f0a" kindref="member">temperature_celsius</ref><sp/>&gt;<sp/>150.0f)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>%.2f°C<sp/>outside<sp/>reasonable<sp/>range&quot;</highlight><highlight class="normal">,<sp/>reading.<ref refid="structhf__temp__reading__t_1ad8b20df88ef338aef1912deba6301f0a" kindref="member">temperature_celsius</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Temperature<sp/>reading:<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>reading.<ref refid="structhf__temp__reading__t_1ad8b20df88ef338aef1912deba6301f0a" kindref="member">temperature_celsius</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1afb8d0318a2158f1458439e6e1812cf39" kindref="member">test_sensor_info</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>sensor<sp/>info<sp/>retrieval...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="structhf__temp__sensor__info__t" kindref="compound">hf_temp_sensor_info_t</ref><sp/>info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>info_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a31ccbc056a1b393a230ab8a2614bba2f" kindref="member">GetSensorInfo</ref>(&amp;info);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>sensor<sp/>info&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>sensor<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="structhf__temp__sensor__info__t_1a43a9d6e0c1515f6587ff105a0ea0e320" kindref="member">sensor_type</ref><sp/>!=<sp/><ref refid="BaseTemperature_8h_1a698a95604ca19f87ee2ff5c99f903577a8aa8f97a4549bc156de54f576307198f" kindref="member">HF_TEMP_SENSOR_TYPE_INTERNAL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>type<sp/>should<sp/>be<sp/>INTERNAL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="structhf__temp__sensor__info__t_1a5a274ebeb78313a516dcf4ac4231419d" kindref="member">capabilities</ref><sp/>==<sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba59d058871153c9da908c09801738c147" kindref="member">HF_TEMP_CAP_NONE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>should<sp/>have<sp/>capabilities&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Sensor<sp/>info:<sp/>%s<sp/>%s,<sp/>Range:<sp/>%.1f<sp/>to<sp/>%.1f°C&quot;</highlight><highlight class="normal">,<sp/>info.<ref refid="structhf__temp__sensor__info__t_1a548d01ddec59454ff327118d58b7262d" kindref="member">manufacturer</ref>,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="structhf__temp__sensor__info__t_1a0c4fd02170af505ef07488baa106c5b3" kindref="member">model</ref>,<sp/>info.<ref refid="structhf__temp__sensor__info__t_1a4221b056d9548525e309e4aac693e9a1" kindref="member">min_temp_celsius</ref>,<sp/>info.<ref refid="structhf__temp__sensor__info__t_1a6de08587fd4c08f24b025ab985966fe9" kindref="member">max_temp_celsius</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RANGE<sp/>MANAGEMENT<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a35f4933f098941a30d3335cff8d623fc" kindref="member">test_range_management</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>range<sp/>management...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>getting<sp/>current<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp,<sp/>max_temp;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a5763ab0b92fff25c5854bcfb04a8ba9f" kindref="member">GetRange</ref>(&amp;min_temp,<sp/>&amp;max_temp);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>current<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>range:<sp/>%.1f<sp/>to<sp/>%.1f°C&quot;</highlight><highlight class="normal">,<sp/>min_temp,<sp/>max_temp);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>setting<sp/>different<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_range_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a92b30bf532e07d1f1927d4fccf5322ba" kindref="member">SetRange</ref>(20.0f,<sp/>100.0f);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_range_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>range<sp/>20-100°C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>range<sp/>was<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>verify_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a5763ab0b92fff25c5854bcfb04a8ba9f" kindref="member">GetRange</ref>(&amp;min_temp,<sp/>&amp;max_temp);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verify_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>verify<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>range:<sp/>%.1f<sp/>to<sp/>%.1f°C&quot;</highlight><highlight class="normal">,<sp/>min_temp,<sp/>max_temp);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ESP32-specific<sp/>range<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>esp_range<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1af0720d47be3e3a09691ddd3dd3a7dcc8" kindref="member">GetMeasurementRange</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP32<sp/>range:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(esp_range));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>finding<sp/>optimal<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optimal_range<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a0f6b25191668374e3ebe3b475884e110" kindref="member">FindOptimalRange</ref>(-10.0f,<sp/>80.0f);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optimal_range<sp/>&gt;=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a655981e7a53bf6a8f57231b0db07a5e6" kindref="member">ESP_TEMP_RANGE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>optimal<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Range<sp/>management<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THRESHOLD<sp/>MONITORING<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a09b7fc3a5c27a839f51fc1c7f3012e0d" kindref="member">test_threshold_monitoring</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>threshold<sp/>monitoring...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>callback<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aed8dff42ebb1f43229bfddf2b3c4d3d9" kindref="member">g_threshold_callback_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>thresholds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1aaeda9f32dfc75e5ca2ab15142d0c9998" kindref="member">SetThresholds</ref>(10.0f,<sp/>50.0f);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>thresholds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>thresholds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>low_thresh,<sp/>high_thresh;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1ae122e823c11b55550cb91af01e26461e" kindref="member">GetThresholds</ref>(&amp;low_thresh,<sp/>&amp;high_thresh);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref><sp/>||<sp/>low_thresh<sp/>!=<sp/>10.0f<sp/>||<sp/>high_thresh<sp/>!=<sp/>50.0f)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Threshold<sp/>verification<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>threshold<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enable_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a1b34d89cb1cc7b03100674bea303ab5a" kindref="member">EnableThresholdMonitoring</ref>(<ref refid="TemperatureComprehensiveTest_8cpp_1aeacb1842bdb2d47722782755e7b9a769" kindref="member">threshold_callback</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>threshold<sp/>monitoring&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ESP32-specific<sp/>threshold<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>esp_callback_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a97fcaa3460eec5f22eafb70e6c243642" kindref="member">SetEspThresholdCallback</ref>(<ref refid="TemperatureComprehensiveTest_8cpp_1abe88f3886b81b39bd21d535490c97c4d" kindref="member">esp_threshold_callback</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_callback_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>ESP<sp/>threshold<sp/>callback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>threshold<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>disable_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a4e1ee5a920aa4caaa151d036b79db369" kindref="member">DisableThresholdMonitoring</ref>();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disable_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>threshold<sp/>monitoring&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Threshold<sp/>monitoring<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONTINUOUS<sp/>MONITORING<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a0abdeb6ccf1aa4f1b2b854ba0706ed38" kindref="member">test_continuous_monitoring</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>continuous<sp/>monitoring...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>callback<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a421d08f2e255d4dc1bbe10bfe6bc0781" kindref="member">g_monitoring_callback_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>initial<sp/>monitoring<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_temp.<ref refid="classEspTemperature_1abd650022450dbbcbba8fed4085386da3" kindref="member">IsMonitoringActive</ref>())<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Monitoring<sp/>should<sp/>not<sp/>be<sp/>active<sp/>initially&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>continuous<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1acc1ea9c3a109b70bd67e4f285594e474" kindref="member">StartContinuousMonitoring</ref>(10,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a64981704d5cf479bfdc3cf0d30503f76" kindref="member">monitoring_callback</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>start<sp/>continuous<sp/>monitoring&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>monitoring<sp/>is<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classEspTemperature_1abd650022450dbbcbba8fed4085386da3" kindref="member">IsMonitoringActive</ref>())<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Monitoring<sp/>should<sp/>be<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ESP32-specific<sp/>monitoring<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>esp_callback_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a9b9b794154ed4bde92c25a416e01141d" kindref="member">SetEspMonitoringCallback</ref>(<ref refid="TemperatureComprehensiveTest_8cpp_1a978a6b3ea32c84350a5ae5808f192133" kindref="member">esp_monitoring_callback</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_callback_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>ESP<sp/>monitoring<sp/>callback&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>some<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1500));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>callbacks<sp/>were<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>callback_count<sp/>=<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a421d08f2e255d4dc1bbe10bfe6bc0781" kindref="member">g_monitoring_callback_count</ref>.load();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback_count<sp/>&lt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>received<sp/>%d<sp/>callbacks,<sp/>expected<sp/>more&quot;</highlight><highlight class="normal">,<sp/>callback_count);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>%d<sp/>monitoring<sp/>callbacks&quot;</highlight><highlight class="normal">,<sp/>callback_count);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>continuous<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1aa34b741f4daf7a52dc832e65dc58e34f" kindref="member">StopContinuousMonitoring</ref>();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stop_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>stop<sp/>continuous<sp/>monitoring&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>monitoring<sp/>is<sp/>stopped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_temp.<ref refid="classEspTemperature_1abd650022450dbbcbba8fed4085386da3" kindref="member">IsMonitoringActive</ref>())<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Monitoring<sp/>should<sp/>not<sp/>be<sp/>active<sp/>after<sp/>stop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Continuous<sp/>monitoring<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CALIBRATION<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1af8edf6de06fc94e1116a21be3778f092" kindref="member">test_calibration</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>calibration<sp/>functionality...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>getting<sp/>initial<sp/>calibration<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>initial_offset;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1ad6ee47301f32825678e5838b453bd1f1" kindref="member">GetCalibrationOffset</ref>(&amp;initial_offset);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>initial<sp/>calibration<sp/>offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>calibration<sp/>offset:<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>initial_offset);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>setting<sp/>calibration<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>test_offset<sp/>=<sp/>2.5f;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a2665b30cb4301b8fccb577f74e4fa7fc" kindref="member">SetCalibrationOffset</ref>(test_offset);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>calibration<sp/>offset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>calibration<sp/>offset<sp/>was<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>current_offset;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>verify_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1ad6ee47301f32825678e5838b453bd1f1" kindref="member">GetCalibrationOffset</ref>(&amp;current_offset);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verify_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref><sp/>||<sp/>current_offset<sp/>!=<sp/>test_offset)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Calibration<sp/>offset<sp/>verification<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>reading<sp/>with<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading_calibrated<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_result<sp/>=<sp/>test_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(&amp;reading_calibrated);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>temperature<sp/>with<sp/>calibration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reset_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a413c8ed18407669f80b88625990619d9" kindref="member">ResetCalibration</ref>();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reset_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>calibration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>calibration<sp/>was<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>reset_offset;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>final_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1ad6ee47301f32825678e5838b453bd1f1" kindref="member">GetCalibrationOffset</ref>(&amp;reset_offset);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(final_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref><sp/>||<sp/>reset_offset<sp/>!=<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Calibration<sp/>reset<sp/>verification<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Calibration<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>POWER<sp/>MANAGEMENT<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1afcb7b928de84dedcb23ce9294db13876" kindref="member">test_power_management</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>power<sp/>management...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>initial<sp/>sleep<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_temp.<ref refid="classEspTemperature_1ac6c685911fa0fe6bb38e1d2d8299ad2d" kindref="member">IsSleeping</ref>())<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>should<sp/>not<sp/>be<sp/>sleeping<sp/>initially&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enter<sp/>sleep<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sleep_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a9f5edd743061fbb9b4e0929f9126a04b" kindref="member">EnterSleepMode</ref>();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sleep_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enter<sp/>sleep<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>sleep<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classEspTemperature_1ac6c685911fa0fe6bb38e1d2d8299ad2d" kindref="member">IsSleeping</ref>())<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>should<sp/>be<sp/>sleeping&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>state<sp/>is<sp/>SLEEPING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_temp.<ref refid="classBaseTemperature_1a000ebd402761b9fd6fbb13f99070eb3a" kindref="member">GetState</ref>()<sp/>!=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12af466a6f75a85c6813cd4913d2bb01729" kindref="member">HF_TEMP_STATE_SLEEPING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;State<sp/>should<sp/>be<sp/>SLEEPING&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>sleep<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wake_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a638b5bddaec8dc5693739fc238ad6d4d" kindref="member">ExitSleepMode</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wake_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>exit<sp/>sleep<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>wake<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_temp.<ref refid="classEspTemperature_1ac6c685911fa0fe6bb38e1d2d8299ad2d" kindref="member">IsSleeping</ref>())<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>should<sp/>not<sp/>be<sp/>sleeping<sp/>after<sp/>wake&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>we<sp/>can<sp/>read<sp/>temperature<sp/>after<sp/>wake</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_result<sp/>=<sp/>test_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(&amp;reading);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>temperature<sp/>after<sp/>wake&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Power<sp/>management<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SELF-TEST<sp/>AND<sp/>HEALTH<sp/>MONITORING<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aaa048f1098e06567fd1d83053b0a30ea" kindref="member">test_self_test_and_health</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>self-test<sp/>and<sp/>health<sp/>monitoring...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>self-test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>self_test_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1aed9e41b1f3d2c357d6ecd28728e49aa2" kindref="member">SelfTest</ref>();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self_test_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Self-test<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseTemperature_8h_1a5c4c3ef28b07964288c304c042b13671" kindref="member">HfTempErrToString</ref>(self_test_result).data());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>health<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>health_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a0715fa9a6cd6888fa147ee67b428f193" kindref="member">CheckHealth</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(health_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>check<sp/>indicates<sp/>issues:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseTemperature_8h_1a5c4c3ef28b07964288c304c042b13671" kindref="member">HfTempErrToString</ref>(health_result).data());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Self-test<sp/>and<sp/>health<sp/>monitoring<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STATISTICS<sp/>AND<sp/>DIAGNOSTICS<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1ac6ee19f88b989b8170183b9c6f96f7a8" kindref="member">test_statistics_and_diagnostics</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>statistics<sp/>and<sp/>diagnostics...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>some<sp/>operations<sp/>to<sp/>generate<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>test_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(&amp;reading);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="structhf__temp__statistics__t" kindref="compound">hf_temp_statistics_t</ref><sp/>stats<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stats_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1af467995c9463449686b77f02be223fa9" kindref="member">GetStatistics</ref>(stats);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stats_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>statistics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stats.<ref refid="structhf__temp__statistics__t_1a7e480896dd83b689cfe8068da97f15db" kindref="member">temperature_readings</ref><sp/>&lt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>at<sp/>least<sp/>5<sp/>temperature<sp/>readings<sp/>in<sp/>statistics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Statistics:<sp/>%u<sp/>total<sp/>ops,<sp/>%u<sp/>readings,<sp/>%.2f<sp/>avg<sp/>temp&quot;</highlight><highlight class="normal">,<sp/>stats.<ref refid="structhf__temp__statistics__t_1a237f5d7b048c0bf6412b1b12a26df02c" kindref="member">total_operations</ref>,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.<ref refid="structhf__temp__statistics__t_1a7e480896dd83b689cfe8068da97f15db" kindref="member">temperature_readings</ref>,<sp/>stats.<ref refid="structhf__temp__statistics__t_1a849d592b1fef29eba4c77248bdb6face" kindref="member">avg_temperature_celsius</ref>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><ref refid="structhf__temp__diagnostics__t" kindref="compound">hf_temp_diagnostics_t</ref><sp/>diag<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>diag_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1af91cca81090fa226453fc793f5305ec6" kindref="member">GetDiagnostics</ref>(diag);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diag_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>diagnostics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Diagnostics:<sp/>healthy=%s,<sp/>errors=%u&quot;</highlight><highlight class="normal">,<sp/>diag.<ref refid="structhf__temp__diagnostics__t_1a32db512c61749abbdac3e7190dfbe8e2" kindref="member">sensor_healthy</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diag.consecutive_errors);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>resetting<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reset_stats_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1ac22266bb32b95ed3587ce5fd6efc6c94" kindref="member">ResetStatistics</ref>();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reset_stats_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>statistics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>resetting<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reset_diag_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1ab81713abcd8583a401154ccc7617cb4e" kindref="member">ResetDiagnostics</ref>();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reset_diag_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reset<sp/>diagnostics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Statistics<sp/>and<sp/>diagnostics<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP32-SPECIFIC<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1adb0b8c31604ce2c870a1ca8b9ab91f77" kindref="member">test_esp32_specific_features</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>ESP32-specific<sp/>features...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ESP32-specific<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><ref refid="structesp__temp__config__t" kindref="compound">esp_temp_config_t</ref><sp/>esp_config<sp/>=<sp/><ref refid="EspTemperature_8h_1a0551895615a2e3b26d57aa3a36776d8e" kindref="member">ESP_TEMP_CONFIG_DEFAULT</ref>();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>esp_config.<ref refid="structesp__temp__config__t_1a15eb2b026d98122ce96bd29d47ce4b88" kindref="member">range</ref><sp/>=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a0bfbb2886fd8591785e0753852614593" kindref="member">ESP_TEMP_RANGE_20_100</ref>;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>esp_config.<ref refid="structesp__temp__config__t_1a32f4e0572841ba20c07eb951d8c14b5c" kindref="member">calibration_offset</ref><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>init_esp_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a2aa6d6cdd0f7d91c86ce759706d9f712" kindref="member">InitializeEsp32</ref>(esp_config);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_esp_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>with<sp/>ESP32<sp/>config&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>setting<sp/>measurement<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_range_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1acd7f6f1c03014e99ddcc8816e1a666b7" kindref="member">SetMeasurementRange</ref>(<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a9db37d9d8ddf77ef1c17909a3da21f1e" kindref="member">ESP_TEMP_RANGE_NEG10_80</ref>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_range_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>measurement<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>range<sp/>was<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_range<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1af0720d47be3e3a09691ddd3dd3a7dcc8" kindref="member">GetMeasurementRange</ref>();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_range<sp/>!=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a9db37d9d8ddf77ef1c17909a3da21f1e" kindref="member">ESP_TEMP_RANGE_NEG10_80</ref>)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>not<sp/>set<sp/>correctly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>getting<sp/>range<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp,<sp/>max_temp,<sp/>accuracy;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_info_result<sp/>=</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_temp.<ref refid="classEspTemperature_1a4fe823e1ee4b244049da4d6275fd7376" kindref="member">GetRangeInfo</ref>(<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a9db37d9d8ddf77ef1c17909a3da21f1e" kindref="member">ESP_TEMP_RANGE_NEG10_80</ref>,<sp/>&amp;min_temp,<sp/>&amp;max_temp,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range_info_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>range<sp/>info&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>info:<sp/>%.1f<sp/>to<sp/>%.1f°C,<sp/>±%.1f°C<sp/>accuracy&quot;</highlight><highlight class="normal">,<sp/>min_temp,<sp/>max_temp,<sp/>accuracy);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>reading<sp/>raw<sp/>temperature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>raw_temp;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>raw_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a495d60bf59ca709fd0f29e1f1d8498d2" kindref="member">ReadRawTemperature</ref>(&amp;raw_temp);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>raw<sp/>temperature&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Raw<sp/>temperature:<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>raw_temp);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>getting<sp/>ESP<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>esp_handle<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a2e11508c1cc97b8e44796d812319edeb" kindref="member">GetEspHandle</ref>();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_handle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP<sp/>handle<sp/>should<sp/>not<sp/>be<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>ESP32-specific<sp/>features<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ERROR<sp/>HANDLING<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a439230ad3ed34e4d4b8e6a04ac7f8821" kindref="member">test_error_handling</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>error<sp/>handling...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>operations<sp/>on<sp/>uninitialized<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_result<sp/>=<sp/>test_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(&amp;reading);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>==<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>should<sp/>fail<sp/>on<sp/>uninitialized<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>for<sp/>further<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>null<sp/>pointer<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>null_read_result<sp/>=<sp/>test_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(null_read_result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>return<sp/>null<sp/>pointer<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invalid_range_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1a92b30bf532e07d1f1927d4fccf5322ba" kindref="member">SetRange</ref>(100.0f,<sp/>50.0f);<sp/></highlight><highlight class="comment">//<sp/>min<sp/>&gt;<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invalid_range_result<sp/>==<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>range<sp/>should<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>thresholds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invalid_thresh_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1aaeda9f32dfc75e5ca2ab15142d0c9998" kindref="member">SetThresholds</ref>(50.0f,<sp/>30.0f);<sp/></highlight><highlight class="comment">//<sp/>low<sp/>&gt;<sp/>high</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invalid_thresh_result<sp/>==<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>thresholds<sp/>should<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>sample<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invalid_rate_result<sp/>=<sp/>test_temp.<ref refid="classEspTemperature_1acc1ea9c3a109b70bd67e4f285594e474" kindref="member">StartContinuousMonitoring</ref>(0,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a64981704d5cf479bfdc3cf0d30503f76" kindref="member">monitoring_callback</ref>,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invalid_rate_result<sp/>==<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>sample<sp/>rate<sp/>should<sp/>fail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Error<sp/>handling<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PERFORMANCE<sp/>AND<sp/>STRESS<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a0828f1e6e8be1c2b73941a5529ba4da6" kindref="member">test_performance_and_stress</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>performance<sp/>and<sp/>stress<sp/>scenarios...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>test_temp;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>sensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performance<sp/>test:<sp/>rapid<sp/>readings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_readings<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_readings;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>test_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(&amp;reading);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>%d<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>total_time<sp/>=<sp/>end_time<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>avg_time_ms<sp/>=<sp/>(total_time<sp/>/<sp/>1000.0f)<sp/>/<sp/>num_readings;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance:<sp/>%d<sp/>readings<sp/>in<sp/>%.2f<sp/>ms<sp/>(avg:<sp/>%.2f<sp/>ms<sp/>per<sp/>reading)&quot;</highlight><highlight class="normal">,<sp/>num_readings,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_time<sp/>/<sp/>1000.0f,<sp/>avg_time_ms);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stress<sp/>test:<sp/>multiple<sp/>initialize/deinitialize<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cycle<sp/>=<sp/>0;<sp/>cycle<sp/>&lt;<sp/>5;<sp/>cycle++)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref><sp/>stress_temp;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stress_temp.<ref refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" kindref="member">EnsureInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>test<sp/>init<sp/>failed<sp/>on<sp/>cycle<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cycle);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>stress_temp.<ref refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" kindref="member">ReadTemperature</ref>(&amp;reading);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Stress<sp/>test<sp/>reading<sp/>failed<sp/>on<sp/>cycle<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>cycle);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructor<sp/>will<sp/>handle<sp/>deinitialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Performance<sp/>and<sp/>stress<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MAIN<sp/>TEST<sp/>EXECUTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" kindref="member">app_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╔══════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>TEMPERATURE<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Target:<sp/>ESP32-C6<sp/>DevKit-M-1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>ESP-IDF:<sp/>v5.5+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Features:<sp/>Temperature<sp/>Sensor,<sp/>Range<sp/>Management,<sp/>Threshold<sp/>Monitoring,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Continuous<sp/>Monitoring,<sp/>Calibration,<sp/>Power<sp/>Management,<sp/>Self-Test,<sp/>Health<sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Monitoring,<sp/>Statistics,<sp/>Diagnostics,<sp/>ESP32-Specific<sp/>Features,<sp/>Error<sp/>Handling,║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1000));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>test<sp/>section<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a200bb35a3a48c625b9cb8d2511d6bd87" kindref="member">print_test_section_status</ref>(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TEMPERATURE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>all<sp/>temperature<sp/>tests<sp/>based<sp/>on<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TEMPERATURE<sp/>CORE<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>functionality<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>basic<sp/>temperature<sp/>functionality<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;sensor_initialization&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1acf955b3d710dda12fa113d6053335645" kindref="member">test_temperature_sensor_initialization</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;temperature_reading&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a1a4a2d461ac67ada86d6d67596ee1848" kindref="member">test_temperature_reading</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;sensor_info&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1afb8d0318a2158f1458439e6e1812cf39" kindref="member">test_sensor_info</ref>,<sp/>8192,<sp/>1););</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TEMPERATURE<sp/>ADVANCED<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advanced<sp/>feature<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>advanced<sp/>temperature<sp/>feature<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;range_management&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a35f4933f098941a30d3335cff8d623fc" kindref="member">test_range_management</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;threshold_monitoring&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a09b7fc3a5c27a839f51fc1c7f3012e0d" kindref="member">test_threshold_monitoring</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;continuous_monitoring&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a0abdeb6ccf1aa4f1b2b854ba0706ed38" kindref="member">test_continuous_monitoring</ref>,<sp/>8192,<sp/>1););</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aebc439ed63a7faca33a8039748b20e2d" kindref="member">ENABLE_FEATURE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TEMPERATURE<sp/>FEATURE<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Feature<sp/>and<sp/>management<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>temperature<sp/>feature<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;calibration&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1af8edf6de06fc94e1116a21be3778f092" kindref="member">test_calibration</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;power_management&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1afcb7b928de84dedcb23ce9294db13876" kindref="member">test_power_management</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;self_test_and_health&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1aaa048f1098e06567fd1d83053b0a30ea" kindref="member">test_self_test_and_health</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;statistics_and_diagnostics&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1ac6ee19f88b989b8170183b9c6f96f7a8" kindref="member">test_statistics_and_diagnostics</ref>,<sp/>8192,<sp/>1););</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a7b508df4d2c3c64ab4a9ad64bac43490" kindref="member">ENABLE_DIAGNOSTIC_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TEMPERATURE<sp/>DIAGNOSTIC<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Diagnostic<sp/>and<sp/>ESP32-specific<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>temperature<sp/>diagnostic<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;esp32_specific_features&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1adb0b8c31604ce2c870a1ca8b9ab91f77" kindref="member">test_esp32_specific_features</ref>,<sp/>8192,<sp/>1););</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a607ec39049dad2c67f0ab145e0311397" kindref="member">ENABLE_STRESS_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TEMPERATURE<sp/>STRESS<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>handling<sp/>and<sp/>stress<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>temperature<sp/>stress<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;error_handling&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a439230ad3ed34e4d4b8e6a04ac7f8821" kindref="member">test_error_handling</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;performance_and_stress&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a0828f1e6e8be1c2b73941a5529ba4da6" kindref="member">test_performance_and_stress</ref>,<sp/>8192,<sp/>1););</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>final<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab7e4c076755ecdf2ad6212cb8f6578ab" kindref="member">print_test_summary</ref>(<ref refid="TemperatureComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TEMPERATURE&quot;</highlight><highlight class="normal">,<sp/><ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>comprehensive<sp/>testing<sp/>completed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;System<sp/>will<sp/>continue<sp/>running.<sp/>Press<sp/>RESET<sp/>to<sp/>restart<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Post-test<sp/>banner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╔══════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>TEMPERATURE<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="TemperatureComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10000));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="examples/esp32/main/TemperatureComprehensiveTest.cpp"/>
  </compounddef>
</doxygen>
