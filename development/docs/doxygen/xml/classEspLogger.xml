<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classEspLogger" kind="class" language="C++" prot="public">
    <compoundname>EspLogger</compoundname>
    <basecompoundref refid="classBaseLogger" prot="public" virt="non-virtual">BaseLogger</basecompoundref>
    <includes refid="EspLogger_8h" local="no">EspLogger.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspLogger_1aeb9e653897acb963156107a51796c9ea" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspLogger::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspLogger::mutex_</qualifiedname>
        <briefdescription>
<para>Thread safety mutex. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="427" column="21" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1ad48d65d02351eef623fdfa05dff258a6" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspLogger::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>EspLogger::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="428" column="15" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a93e23db81675d5e65de16df73bc468ca" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; EspLogger::healthy_</definition>
        <argsstring></argsstring>
        <name>healthy_</name>
        <qualifiedname>EspLogger::healthy_</qualifiedname>
        <briefdescription>
<para>Health status flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="429" column="15" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1ade52db9548002c1e5cfd36bfc3d526b4" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__logger__config__t" kindref="compound">hf_logger_config_t</ref></type>
        <definition>hf_logger_config_t EspLogger::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>EspLogger::config_</qualifiedname>
        <briefdescription>
<para>Logger configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="431" column="22" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1ad943622faa174b6c4f44ced1527e3927" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__logger__statistics__t" kindref="compound">hf_logger_statistics_t</ref></type>
        <definition>hf_logger_statistics_t EspLogger::statistics_</definition>
        <argsstring></argsstring>
        <name>statistics_</name>
        <qualifiedname>EspLogger::statistics_</qualifiedname>
        <briefdescription>
<para>Statistics tracking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="432" column="26" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a7b5294d5699de739d4696a538dd6c71b" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__logger__diagnostics__t" kindref="compound">hf_logger_diagnostics_t</ref></type>
        <definition>hf_logger_diagnostics_t EspLogger::diagnostics_</definition>
        <argsstring></argsstring>
        <name>diagnostics_</name>
        <qualifiedname>EspLogger::diagnostics_</qualifiedname>
        <briefdescription>
<para>Diagnostics information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="433" column="27" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a390db49b839f78cf444e96391a5d1967" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref> &gt;</type>
        <definition>std::map&lt;std::string, hf_log_level_t&gt; EspLogger::tag_levels_</definition>
        <argsstring></argsstring>
        <name>tag_levels_</name>
        <qualifiedname>EspLogger::tag_levels_</qualifiedname>
        <briefdescription>
<para>Tag-specific log levels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="435" column="12" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a1414db646e36b29340503445ad287296" prot="private" static="no" mutable="no">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt;char&gt; EspLogger::message_buffer_</definition>
        <argsstring></argsstring>
        <name>message_buffer_</name>
        <qualifiedname>EspLogger::message_buffer_</qualifiedname>
        <briefdescription>
<para>Message formatting buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="436" column="15" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1ac775294d58bc741c7a5b4796b2b0d292" prot="private" static="no" mutable="no">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::last_error_</definition>
        <argsstring></argsstring>
        <name>last_error_</name>
        <qualifiedname>EspLogger::last_error_</qualifiedname>
        <briefdescription>
<para>Last error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="438" column="19" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a9a4ef83b3e2e9beedeb847a207cb5880" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char EspLogger::last_error_message_[256]</definition>
        <argsstring>[256]</argsstring>
        <name>last_error_message_</name>
        <qualifiedname>EspLogger::last_error_message_</qualifiedname>
        <briefdescription>
<para>Last error message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="439" column="8" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1ac28e33ed2ddb08d48e0f838fc1f1bf17" prot="private" static="no" mutable="no">
        <type><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref></type>
        <definition>hf_u64_t EspLogger::initialization_time_</definition>
        <argsstring></argsstring>
        <name>initialization_time_</name>
        <qualifiedname>EspLogger::initialization_time_</qualifiedname>
        <briefdescription>
<para>Initialization timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="441" column="12" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a1bd4cebdf38585c85a6924713014ca5d" prot="private" static="no" mutable="no">
        <type><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref></type>
        <definition>hf_u64_t EspLogger::last_health_check_</definition>
        <argsstring></argsstring>
        <name>last_health_check_</name>
        <qualifiedname>EspLogger::last_health_check_</qualifiedname>
        <briefdescription>
<para>Last health check timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="442" column="12" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a813a28d12d69a4339970f0838461aae8" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspLogger::log_v2_available_</definition>
        <argsstring></argsstring>
        <name>log_v2_available_</name>
        <qualifiedname>EspLogger::log_v2_available_</qualifiedname>
        <briefdescription>
<para>Log V2 availability flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="445" column="8" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspLogger_1a8f01845a36c1f91fcd933f9d741b4b49" prot="private" static="no" mutable="no">
        <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>hf_u8_t EspLogger::log_version_</definition>
        <argsstring></argsstring>
        <name>log_version_</name>
        <qualifiedname>EspLogger::log_version_</qualifiedname>
        <briefdescription>
<para>Current log version (1 or 2) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="446" column="11" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="446" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspLogger_1ac7e384fbbb0398729d0f8b65f4268b15" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspLogger::EspLogger</definition>
        <argsstring>() noexcept</argsstring>
        <name>EspLogger</name>
        <qualifiedname>EspLogger::EspLogger</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="129" column="3" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="62" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1af3689ffc89aa801c754b78989ec306ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspLogger::~EspLogger</definition>
        <argsstring>() noexcept override</argsstring>
        <name>~EspLogger</name>
        <qualifiedname>EspLogger::~EspLogger</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="134" column="3" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a65a25428dd2429380fa5e44ddb31f883" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Initialize</definition>
        <argsstring>(const hf_logger_config_t &amp;config) noexcept override</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspLogger::Initialize</qualifiedname>
        <reimplements refid="classBaseLogger_1ad0406cdacbade55f2911bf717e35c22c">Initialize</reimplements>
        <param>
          <type>const <ref refid="structhf__logger__config__t" kindref="compound">hf_logger_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize the logger. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Logger configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="145" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="98" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ad55e13200cd30558a1c6b51cd37bd9de" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Deinitialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspLogger::Deinitialize</qualifiedname>
        <reimplements refid="classBaseLogger_1a5c4e83d89a9039e336dfb9f13d2be9a5">Deinitialize</reimplements>
        <briefdescription>
<para>Deinitialize the logger. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="151" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="162" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a4d300e5e6ae8f3da60d756686f520495" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspLogger::IsInitialized</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>IsInitialized</name>
        <qualifiedname>EspLogger::IsInitialized</qualifiedname>
        <reimplements refid="classBaseLogger_1a9f14e4754c3840c59106db0670e90fca">IsInitialized</reimplements>
        <briefdescription>
<para>Check if logger is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="157" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1afd6ed0aa4e042aa0356952ca4cb968da" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspLogger::EnsureInitialized</definition>
        <argsstring>() noexcept override</argsstring>
        <name>EnsureInitialized</name>
        <qualifiedname>EspLogger::EnsureInitialized</qualifiedname>
        <reimplements refid="classBaseLogger_1a14f30b5cd0922487a49b77ec9833a0bc">EnsureInitialized</reimplements>
        <briefdescription>
<para>Ensure logger is initialized (lazy initialization) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialization successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="163" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="197" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a2ba313925a91c912e926af982b1f99df" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::SetLogLevel</definition>
        <argsstring>(const char *tag, hf_log_level_t level) noexcept override</argsstring>
        <name>SetLogLevel</name>
        <qualifiedname>EspLogger::SetLogLevel</qualifiedname>
        <reimplements refid="classBaseLogger_1a960f90f79007791d7129bd22be151a57">SetLogLevel</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Set log level for a specific tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag (nullptr for default) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="171" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="216" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ad6062eec104b3cdf9532cfa2a9f15bdc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::GetLogLevel</definition>
        <argsstring>(const char *tag, hf_log_level_t &amp;level) const noexcept override</argsstring>
        <name>GetLogLevel</name>
        <qualifiedname>EspLogger::GetLogLevel</qualifiedname>
        <reimplements refid="classBaseLogger_1a7bab272b2ae8e5bf4a2d0c0c8a9ea203">GetLogLevel</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref> &amp;</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Get log level for a specific tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag (nullptr for default) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Output log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="179" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="238" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a666cd0894691948bf449fb7e325d222f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Error</definition>
        <argsstring>(const char *tag, const char *format,...) noexcept override</argsstring>
        <name>Error</name>
        <qualifiedname>EspLogger::Error</qualifiedname>
        <reimplements refid="classBaseLogger_1a4075d445b4199e72e9a0c09ba438c076">Error</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message at ERROR level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="192" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="263" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a097cbcffbb54f838cddab0e20abff8ac" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Warn</definition>
        <argsstring>(const char *tag, const char *format,...) noexcept override</argsstring>
        <name>Warn</name>
        <qualifiedname>EspLogger::Warn</qualifiedname>
        <reimplements refid="classBaseLogger_1ac1492294d1cc35697eaf02d6b617cce8">Warn</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message at WARN level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="201" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="271" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a3f54f20a15b35aee84a5148b84a846c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Info</definition>
        <argsstring>(const char *tag, const char *format,...) noexcept override</argsstring>
        <name>Info</name>
        <qualifiedname>EspLogger::Info</qualifiedname>
        <reimplements refid="classBaseLogger_1a79975dd958a7f1b10570474deb42637b">Info</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message at INFO level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="210" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="279" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a6dff2af97ae0ee413b89aec8cf96f09a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Debug</definition>
        <argsstring>(const char *tag, const char *format,...) noexcept override</argsstring>
        <name>Debug</name>
        <qualifiedname>EspLogger::Debug</qualifiedname>
        <reimplements refid="classBaseLogger_1a15474a07a615cd39de6c2884b1035808">Debug</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message at DEBUG level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="219" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="287" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a8b5952680c76fd4d3f7c7e3cce904e41" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Verbose</definition>
        <argsstring>(const char *tag, const char *format,...) noexcept override</argsstring>
        <name>Verbose</name>
        <qualifiedname>EspLogger::Verbose</qualifiedname>
        <reimplements refid="classBaseLogger_1a7c108881b2bda1a6b938f0aebbe1b264">Verbose</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message at VERBOSE level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="228" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="295" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a35a264de336e8f2de1b7cd1751eab044" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Log</definition>
        <argsstring>(hf_log_level_t level, const char *tag, const char *format,...) noexcept override</argsstring>
        <name>Log</name>
        <qualifiedname>EspLogger::Log</qualifiedname>
        <reimplements refid="classBaseLogger_1ad0549df66e58b6726f8dee0792f73a45">Log</reimplements>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message at specified level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="238" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="303" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1adea4e7abe8c84281369db4e8a7224a8e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::LogV</definition>
        <argsstring>(hf_log_level_t level, const char *tag, const char *format, va_list args) noexcept override</argsstring>
        <name>LogV</name>
        <qualifiedname>EspLogger::LogV</qualifiedname>
        <reimplements refid="classBaseLogger_1a9e7c920256b418cf70d092ec5ad606cf">LogV</reimplements>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log a message with va_list (for internal use) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list of arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="249" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="312" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a0622fca14e6fc69b91975cf720af3603" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::LogWithLocation</definition>
        <argsstring>(hf_log_level_t level, const char *tag, const char *file, hf_u32_t line, const char *function, const char *format,...) noexcept override</argsstring>
        <name>LogWithLocation</name>
        <qualifiedname>EspLogger::LogWithLocation</qualifiedname>
        <reimplements refid="classBaseLogger_1a4c22f92b913379d3407426d7e4ce19dc">LogWithLocation</reimplements>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message with file and line information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Function name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>printf-style arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="263" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="337" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a0bab0e37c73b2b7f1033d826b7ca36b6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::LogBufferHex</definition>
        <argsstring>(const char *tag, const void *buffer, hf_u32_t length, hf_log_level_t level=hf_log_level_t::LOG_LEVEL_INFO) noexcept</argsstring>
        <name>LogBufferHex</name>
        <qualifiedname>EspLogger::LogBufferHex</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
          <defval><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042ac0d7296fc0ed349c37a98f139ea74985" kindref="member">hf_log_level_t::LOG_LEVEL_INFO</ref></defval>
        </param>
        <briefdescription>
<para>Log a buffer as hex dump (Log V2 feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to log </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="279" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="390" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a8ce33948b3b8c36bd0ad61682ab3c47b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::LogBufferChar</definition>
        <argsstring>(const char *tag, const void *buffer, hf_u32_t length, hf_log_level_t level=hf_log_level_t::LOG_LEVEL_INFO) noexcept</argsstring>
        <name>LogBufferChar</name>
        <qualifiedname>EspLogger::LogBufferChar</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
          <defval><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042ac0d7296fc0ed349c37a98f139ea74985" kindref="member">hf_log_level_t::LOG_LEVEL_INFO</ref></defval>
        </param>
        <briefdescription>
<para>Log a buffer as character dump (Log V2 feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to log (should contain printable characters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="290" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="420" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1af50c94ba33ded85a51415326b793c886" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::LogBufferHexDump</definition>
        <argsstring>(const char *tag, const void *buffer, hf_u32_t length, hf_log_level_t level=hf_log_level_t::LOG_LEVEL_INFO) noexcept</argsstring>
        <name>LogBufferHexDump</name>
        <qualifiedname>EspLogger::LogBufferHexDump</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
          <defval><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042ac0d7296fc0ed349c37a98f139ea74985" kindref="member">hf_log_level_t::LOG_LEVEL_INFO</ref></defval>
        </param>
        <briefdescription>
<para>Log a buffer as hex dump with address (Log V2 feature) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to log </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="301" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="450" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a0439465731dcba29e5012e5f9e148f98" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::LogBuffer</definition>
        <argsstring>(const char *tag, const void *buffer, hf_u32_t length, hf_log_level_t level=hf_log_level_t::LOG_LEVEL_INFO) noexcept</argsstring>
        <name>LogBuffer</name>
        <qualifiedname>EspLogger::LogBuffer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
          <defval><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042ac0d7296fc0ed349c37a98f139ea74985" kindref="member">hf_log_level_t::LOG_LEVEL_INFO</ref></defval>
        </param>
        <briefdescription>
<para>Log a buffer (generic method) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to log </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="312" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="480" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ac3fddcbe82a7de191a903a5427dd44e0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::Flush</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Flush</name>
        <qualifiedname>EspLogger::Flush</qualifiedname>
        <reimplements refid="classBaseLogger_1a37a29d6d49c0a3ec7d5d6163c23aef39">Flush</reimplements>
        <briefdescription>
<para>Flush any buffered output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="323" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="490" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a7ec1e202ab853fd2ee1f2b93c4089a08" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspLogger::IsLevelEnabled</definition>
        <argsstring>(hf_log_level_t level, const char *tag=nullptr) const noexcept override</argsstring>
        <name>IsLevelEnabled</name>
        <qualifiedname>EspLogger::IsLevelEnabled</qualifiedname>
        <reimplements refid="classBaseLogger_1afb83c8e24e07a9bfb0874bf4c65e71e6">IsLevelEnabled</reimplements>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Check if a log level is enabled for a tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag (nullptr for default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if level is enabled, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="331" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="495" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a9c245d1d50c9665832b75332ba752689" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::GetStatistics</definition>
        <argsstring>(hf_logger_statistics_t &amp;statistics) const noexcept override</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>EspLogger::GetStatistics</qualifiedname>
        <reimplements refid="classBaseLogger_1a3b030cfdc55beea0afd1f80b94bdc90f">GetStatistics</reimplements>
        <param>
          <type><ref refid="structhf__logger__statistics__t" kindref="compound">hf_logger_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get logger statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Output statistics structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="338" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="508" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ac2b2ffa4d116dc2e75c96ccb8f08e61b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::GetDiagnostics</definition>
        <argsstring>(hf_logger_diagnostics_t &amp;diagnostics) const noexcept override</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>EspLogger::GetDiagnostics</qualifiedname>
        <reimplements refid="classBaseLogger_1ae7b732b376b7066214dec2c741dc9e1e">GetDiagnostics</reimplements>
        <param>
          <type><ref refid="structhf__logger__diagnostics__t" kindref="compound">hf_logger_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get logger diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Output diagnostics structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="345" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="519" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a0c8b15b05c28dc619ebf777c870bd2ec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::ResetStatistics</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ResetStatistics</name>
        <qualifiedname>EspLogger::ResetStatistics</qualifiedname>
        <reimplements refid="classBaseLogger_1a3cf9119158fe0f18d7c04aec03c6449b">ResetStatistics</reimplements>
        <briefdescription>
<para>Reset statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="351" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="534" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1aefe2fb8f5f9359423c198a4980236ffe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::ResetDiagnostics</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ResetDiagnostics</name>
        <qualifiedname>EspLogger::ResetDiagnostics</qualifiedname>
        <reimplements refid="classBaseLogger_1a24d1d4542ce03818617a6ca47c5cadf9">ResetDiagnostics</reimplements>
        <briefdescription>
<para>Reset diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="357" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="547" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ab003664bef163b80f2071efbccfb1fe9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspLogger::IsHealthy</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>IsHealthy</name>
        <qualifiedname>EspLogger::IsHealthy</qualifiedname>
        <reimplements refid="classBaseLogger_1a5ada4c120460e66a3aa95d0d9d1f2688">IsHealthy</reimplements>
        <briefdescription>
<para>Check if logger is healthy. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if healthy, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="363" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="573" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a3452b953312f5d8512ecb64b7b8e6624" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::GetLastError</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>GetLastError</name>
        <qualifiedname>EspLogger::GetLastError</qualifiedname>
        <reimplements refid="classBaseLogger_1a1065e8155fd78171bba853d64d3deeee">GetLastError</reimplements>
        <briefdescription>
<para>Get last error code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_logger_err_t Last error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="369" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="577" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a7dee6257ad605104ffe53822747b82b1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::GetLastErrorMessage</definition>
        <argsstring>(char *message, hf_u32_t max_length) const noexcept override</argsstring>
        <name>GetLastErrorMessage</name>
        <qualifiedname>EspLogger::GetLastErrorMessage</qualifiedname>
        <reimplements refid="classBaseLogger_1ae1ce782666e43f19b3b4e59278398880">GetLastErrorMessage</reimplements>
        <param>
          <type>char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>max_length</declname>
        </param>
        <briefdescription>
<para>Get last error message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Output error message buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum message length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="377" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="581" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1aa17e6a890bd290c0ac639436057f01df" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspLogger::IsLogV2Available</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsLogV2Available</name>
        <qualifiedname>EspLogger::IsLogV2Available</qualifiedname>
        <briefdescription>
<para>Check if Log V2 is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if Log V2 is available, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="383" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="596" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a0f7694bf8f934182ca64eebff6e888a2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref></type>
        <definition>hf_u8_t EspLogger::GetLogVersion</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetLogVersion</name>
        <qualifiedname>EspLogger::GetLogVersion</qualifiedname>
        <briefdescription>
<para>Get current ESP-IDF log version. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 for Log V1, 2 for Log V2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="389" column="11" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="600" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a3707bd0b8d05153fce8c306461ad8a5b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::PrintStatistics</definition>
        <argsstring>(const char *tag=nullptr, bool detailed=true) const noexcept override</argsstring>
        <name>PrintStatistics</name>
        <qualifiedname>EspLogger::PrintStatistics</qualifiedname>
        <reimplements refid="classBaseLogger_1a7c7b4dd7579edbf83e3f3abe51d9605d">PrintStatistics</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>detailed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print statistics to log output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag for the output (optional, uses internal tag if nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detailed</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, prints detailed per-level statistics </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="401" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="608" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1af4dd2ff188f30b1a5da6c174361ee2d0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::PrintDiagnostics</definition>
        <argsstring>(const char *tag=nullptr, bool detailed=true) const noexcept override</argsstring>
        <name>PrintDiagnostics</name>
        <qualifiedname>EspLogger::PrintDiagnostics</qualifiedname>
        <reimplements refid="classBaseLogger_1abf400ef24cd83257f6c3ca6e5f905069">PrintDiagnostics</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>detailed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print diagnostics to log output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag for the output (optional, uses internal tag if nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detailed</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, prints detailed diagnostic information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="410" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="650" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ae9668859f987dd750a3ca89bbffa94d4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::PrintStatus</definition>
        <argsstring>(const char *tag=nullptr, bool detailed=true) const noexcept override</argsstring>
        <name>PrintStatus</name>
        <qualifiedname>EspLogger::PrintStatus</qualifiedname>
        <reimplements refid="classBaseLogger_1a0fb33baa7231cd20d8ada51eb144e47c">PrintStatus</reimplements>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>detailed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print both statistics and diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag for the output (optional, uses internal tag if nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detailed</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, prints detailed information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="419" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="689" bodyend="708"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEspLogger_1aecd1c70ab5742e27255a2b17585fd79f" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>esp_log_level_t</type>
        <definition>esp_log_level_t EspLogger::ConvertLogLevel</definition>
        <argsstring>(hf_log_level_t level) const noexcept</argsstring>
        <name>ConvertLogLevel</name>
        <qualifiedname>EspLogger::ConvertLogLevel</qualifiedname>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Convert HardFOC log level to ESP-IDF log level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>HardFOC log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_log_level_t ESP-IDF log level </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="457" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="714" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1aef36cbbb29c093c7f3b5a04f789e8916" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
        <definition>hf_log_level_t EspLogger::ConvertLogLevel</definition>
        <argsstring>(esp_log_level_t level) const noexcept</argsstring>
        <name>ConvertLogLevel</name>
        <qualifiedname>EspLogger::ConvertLogLevel</qualifiedname>
        <param>
          <type>esp_log_level_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Convert ESP-IDF log level to HardFOC log level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF log level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_log_level_t HardFOC log level </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="464" column="18" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="733" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a5f1c46a46387f5523921dc03060b7b2a" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::FormatMessage</definition>
        <argsstring>(hf_log_level_t level, const char *tag, const char *file, hf_u32_t line, const char *function, const char *format, va_list args, char *formatted_message, hf_u32_t max_length) noexcept</argsstring>
        <name>FormatMessage</name>
        <qualifiedname>EspLogger::FormatMessage</qualifiedname>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>formatted_message</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>max_length</declname>
        </param>
        <briefdescription>
<para>Format log message with location information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Source line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Function name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>formatted_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Output formatted message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum message length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="479" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="752" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1aa1e94f68b56c5235064f5882b6d4223a" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::WriteMessage</definition>
        <argsstring>(hf_log_level_t level, const char *tag, const char *message, hf_u32_t length) noexcept</argsstring>
        <name>WriteMessage</name>
        <qualifiedname>EspLogger::WriteMessage</qualifiedname>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Write formatted message to output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Formatted message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="492" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="782" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a79e75fcc3fae3624038e611cc8180437" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::WriteMessageV</definition>
        <argsstring>(hf_log_level_t level, const char *tag, const char *format, va_list args) noexcept</argsstring>
        <name>WriteMessageV</name>
        <qualifiedname>EspLogger::WriteMessageV</qualifiedname>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Write message using appropriate ESP-IDF version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>Log tag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>va_list of arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="503" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="800" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1aa80b1fe39bc3c543fca65744d834e168" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspLogger::UpdateStatistics</definition>
        <argsstring>(hf_log_level_t level, hf_u32_t message_length, bool success) noexcept</argsstring>
        <name>UpdateStatistics</name>
        <qualifiedname>EspLogger::UpdateStatistics</qualifiedname>
        <param>
          <type><ref refid="group__logger_1gafcafcc6e9ff6e92894e3de5998a51042" kindref="member">hf_log_level_t</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>message_length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>success</declname>
        </param>
        <briefdescription>
<para>Update statistics for a log operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Log level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>success</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation success status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="512" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="837" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1aff52ecfa69d725c164cbcd01460aa6bb" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspLogger::UpdateDiagnostics</definition>
        <argsstring>(hf_logger_err_t error) noexcept</argsstring>
        <name>UpdateDiagnostics</name>
        <qualifiedname>EspLogger::UpdateDiagnostics</qualifiedname>
        <param>
          <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Update diagnostics information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code (if any) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="518" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="865" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1aa97399671a0a163185c0d28cbb77d6cc" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspLogger::PerformHealthCheck</definition>
        <argsstring>() noexcept</argsstring>
        <name>PerformHealthCheck</name>
        <qualifiedname>EspLogger::PerformHealthCheck</qualifiedname>
        <briefdescription>
<para>Perform health check. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if healthy, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="524" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="889" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a2740f86e01f57ee1ab99661a011c2d31" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
        <definition>hf_logger_err_t EspLogger::ValidateConfiguration</definition>
        <argsstring>(const hf_logger_config_t &amp;config) const noexcept</argsstring>
        <name>ValidateConfiguration</name>
        <qualifiedname>EspLogger::ValidateConfiguration</qualifiedname>
        <param>
          <type>const <ref refid="structhf__logger__config__t" kindref="compound">hf_logger_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Validate configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_logger_err_t Success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="531" column="19" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="923" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1afffbccb35a115bf1af4139523cc23809" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * EspLogger::ConvertErrorToString</definition>
        <argsstring>(hf_logger_err_t error) const noexcept</argsstring>
        <name>ConvertErrorToString</name>
        <qualifiedname>EspLogger::ConvertErrorToString</qualifiedname>
        <param>
          <type><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177" kindref="member">hf_logger_err_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Convert error code to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* Error string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="538" column="14" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="939" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ac291d84dda6d4ea58218b4ff706d395a" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref></type>
        <definition>hf_u64_t EspLogger::GetCurrentTimestamp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetCurrentTimestamp</name>
        <qualifiedname>EspLogger::GetCurrentTimestamp</qualifiedname>
        <briefdescription>
<para>Get current timestamp in microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_u64_t Timestamp in microseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="544" column="12" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="943" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a6f4e39e7302fddf17ab06bf3dced21da" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspLogger::GetCurrentThreadId</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetCurrentThreadId</name>
        <qualifiedname>EspLogger::GetCurrentThreadId</qualifiedname>
        <briefdescription>
<para>Get current thread ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_u32_t Thread ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="550" column="12" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="947" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1abbbf11de08f63b1a7cdc37b36f8dcaeb" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspLogger::EnsureMessageBuffer</definition>
        <argsstring>(hf_u32_t required_length) noexcept</argsstring>
        <name>EnsureMessageBuffer</name>
        <qualifiedname>EspLogger::EnsureMessageBuffer</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>required_length</declname>
        </param>
        <briefdescription>
<para>Check if message buffer is sufficient. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>required_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Required buffer length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if sufficient, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="557" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="951" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1ad3e5ce287db5576529f60a37da43c2be" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspLogger::InitializeLogV2</definition>
        <argsstring>() noexcept</argsstring>
        <name>InitializeLogV2</name>
        <qualifiedname>EspLogger::InitializeLogV2</qualifiedname>
        <briefdescription>
<para>Detect and initialize Log V2 support. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if Log V2 is available and initialized, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="563" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="972" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="classEspLogger_1a0eb097491fbc1b1348cb8b94c3597737" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspLogger::CheckLogV2Availability</definition>
        <argsstring>() const noexcept</argsstring>
        <name>CheckLogV2Availability</name>
        <qualifiedname>EspLogger::CheckLogV2Availability</qualifiedname>
        <briefdescription>
<para>Check Log V2 availability at runtime. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if Log V2 is available, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspLogger.h" line="569" column="8" bodyfile="src/mcu/esp32/EspLogger.cpp" bodystart="983" bodyend="991"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ESP32 logger implementation using ESP-IDF logging system (Log V1/V2). </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a complete implementation of the <ref refid="classBaseLogger" kindref="compound">BaseLogger</ref> interface for ESP32 variants. It leverages ESP-IDF&apos;s esp_log system for efficient logging with features like:<itemizedlist>
<listitem><para>Multiple log levels with runtime configuration</para>
</listitem><listitem><para>Tag-based log level filtering</para>
</listitem><listitem><para>Performance monitoring and statistics</para>
</listitem><listitem><para>Thread-safe operations</para>
</listitem><listitem><para>Custom output callbacks</para>
</listitem><listitem><para>Message formatting and buffering</para>
</listitem><listitem><para>Health monitoring and diagnostics</para>
</listitem><listitem><para>ESP-IDF Log V2 support with enhanced features</para>
</listitem></itemizedlist>
</para>
<para>Key Features:<itemizedlist>
<listitem><para><bold>ESP-IDF Integration</bold>: Direct integration with esp_log for optimal performance</para>
</listitem><listitem><para><bold>Log V2 Support</bold>: Enhanced logging with improved flexibility and reduced flash usage</para>
</listitem><listitem><para><bold>Tag-based Filtering</bold>: Runtime log level control per tag</para>
</listitem><listitem><para><bold>Thread Safety</bold>: Proper mutex protection for concurrent access</para>
</listitem><listitem><para><bold>Performance Monitoring</bold>: Detailed statistics and performance metrics</para>
</listitem><listitem><para><bold>Health Monitoring</bold>: Comprehensive health checks and diagnostics</para>
</listitem><listitem><para><bold>Custom Output</bold>: Support for custom output callbacks</para>
</listitem><listitem><para><bold>Message Buffering</bold>: Efficient message buffering and formatting</para>
</listitem><listitem><para><bold>Error Recovery</bold>: Robust error handling and recovery mechanisms</para>
</listitem><listitem><para><bold>Buffer Logging</bold>: Support for binary data logging</para>
</listitem><listitem><para><bold>Dynamic Formatting</bold>: Log V2 dynamic format string support</para>
</listitem></itemizedlist>
</para>
<para>Usage Example: <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>logger<sp/>with<sp/>default<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classEspLogger" kindref="compound">EspLogger</ref><sp/>logger;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>with<sp/>custom<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structhf__logger__config__t" kindref="compound">hf_logger_config_t</ref><sp/>config<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">config.<ref refid="structhf__logger__config__t_1a0544221f8aeeccea37f4512cec656ebb" kindref="member">default_level</ref><sp/>=<sp/><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042ac0d7296fc0ed349c37a98f139ea74985" kindref="member">hf_log_level_t::LOG_LEVEL_INFO</ref>;</highlight></codeline>
<codeline><highlight class="normal">config.<ref refid="structhf__logger__config__t_1aea701908932be510a4b1e64e43528909" kindref="member">output_destination</ref><sp/>=<sp/><ref refid="group__logger_1gga1e55e86af9be6c9ac8b1c61560ac269ca21d7ee388a7b468ff899724685d98277" kindref="member">hf_log_output_t::LOG_OUTPUT_UART</ref>;</highlight></codeline>
<codeline><highlight class="normal">config.<ref refid="structhf__logger__config__t_1ad15d1c7a0acf2eaea8919823dfa29473" kindref="member">format_options</ref><sp/>=<sp/><ref refid="group__logger_1gga46e0958974ba5c45267d842a54148e2fa34c8ed59d52562dbc736f5c50b4e1d1d" kindref="member">hf_log_format_t::LOG_FORMAT_DEFAULT</ref>;</highlight></codeline>
<codeline><highlight class="normal">config.<ref refid="structhf__logger__config__t_1ae3fcbecb28d9835d881296d6a934b5cf" kindref="member">max_message_length</ref><sp/>=<sp/>512;</highlight></codeline>
<codeline><highlight class="normal">config.<ref refid="structhf__logger__config__t_1ad1a6d394808a12f5773a0575c23c3f0a" kindref="member">buffer_size</ref><sp/>=<sp/>1024;</highlight></codeline>
<codeline><highlight class="normal">config.<ref refid="structhf__logger__config__t_1a37cb39bba078b77ebda93c112f51c446" kindref="member">enable_thread_safety</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">config.<ref refid="structhf__logger__config__t_1a37b0e76820ae9a9800d3053cde8ecf89" kindref="member">enable_performance_monitoring</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger.<ref refid="classEspLogger_1a65a25428dd2429380fa5e44ddb31f883" kindref="member">Initialize</ref>(config)<sp/>==<sp/><ref refid="BaseLogger_8h_1ac68cbaa2282f1e4e9831a0c6f4801177a1ee0fc1be88d166654cefc503f5219ec" kindref="member">hf_logger_err_t::LOGGER_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.<ref refid="classEspLogger_1a3f54f20a15b35aee84a5148b84a846c1" kindref="member">Info</ref>(</highlight><highlight class="stringliteral">&quot;MAIN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;System<sp/>initialized<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.<ref refid="classEspLogger_1a6dff2af97ae0ee413b89aec8cf96f09a" kindref="member">Debug</ref>(</highlight><highlight class="stringliteral">&quot;SENSOR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Temperature:<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>temperature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.<ref refid="classEspLogger_1a666cd0894691948bf449fb7e325d222f" kindref="member">Error</ref>(</highlight><highlight class="stringliteral">&quot;COMM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Communication<sp/>timeout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>V2<sp/>features<sp/>(if<sp/>available)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>buffer[16]<sp/>=<sp/>{0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.<ref refid="classEspLogger_1a0439465731dcba29e5012e5f9e148f98" kindref="member">LogBuffer</ref>(</highlight><highlight class="stringliteral">&quot;DATA&quot;</highlight><highlight class="normal">,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042acf47268b6930f0f296d7b29b93093019" kindref="member">hf_log_level_t::LOG_LEVEL_DEBUG</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Advanced Usage with Log V2: <programlisting><codeline><highlight class="comment">//<sp/>Dynamic<sp/>format<sp/>strings<sp/>(Log<sp/>V2<sp/>feature)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>dynamic_format<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Dynamic<sp/>message:<sp/>%s<sp/>with<sp/>value<sp/>%d&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">logger.<ref refid="classEspLogger_1a35a264de336e8f2de1b7cd1751eab044" kindref="member">Log</ref>(<ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042ac0d7296fc0ed349c37a98f139ea74985" kindref="member">hf_log_level_t::LOG_LEVEL_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TAG&quot;</highlight><highlight class="normal">,<sp/>dynamic_format,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>logging</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>binary_data[64];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>fill<sp/>binary_data<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">logger.<ref refid="classEspLogger_1a0bab0e37c73b2b7f1033d826b7ca36b6" kindref="member">LogBufferHex</ref>(</highlight><highlight class="stringliteral">&quot;BINARY&quot;</highlight><highlight class="normal">,<sp/>binary_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(binary_data),<sp/><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042acf47268b6930f0f296d7b29b93093019" kindref="member">hf_log_level_t::LOG_LEVEL_DEBUG</ref>);</highlight></codeline>
<codeline><highlight class="normal">logger.<ref refid="classEspLogger_1a8ce33948b3b8c36bd0ad61682ab3c47b" kindref="member">LogBufferChar</ref>(</highlight><highlight class="stringliteral">&quot;TEXT&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)binary_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(binary_data),</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__logger_1ggafcafcc6e9ff6e92894e3de5998a51042ac0d7296fc0ed349c37a98f139ea74985" kindref="member">hf_log_level_t::LOG_LEVEL_INFO</ref>);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para><ref refid="classEspLogger" kindref="compound">EspLogger</ref> instances cannot be copied or moved due to hardware resource management. </para>
</simplesect>
<simplesect kind="note"><para>If you need to transfer ownership, use std::unique_ptr&lt;EspLogger&gt; or similar smart pointers. </para>
</simplesect>
<simplesect kind="note"><para>Log V2 features are automatically detected and used when CONFIG_LOG_VERSION_2 is enabled. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BaseLogger</label>
        <link refid="classBaseLogger"/>
      </node>
      <node id="1">
        <label>EspLogger</label>
        <link refid="classEspLogger"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BaseLogger</label>
        <link refid="classBaseLogger"/>
      </node>
      <node id="1">
        <label>EspLogger</label>
        <link refid="classEspLogger"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="4">
        <label>hf_logger_config_t</label>
        <link refid="structhf__logger__config__t"/>
      </node>
      <node id="6">
        <label>hf_logger_diagnostics_t</label>
        <link refid="structhf__logger__diagnostics__t"/>
      </node>
      <node id="5">
        <label>hf_logger_statistics_t</label>
        <link refid="structhf__logger__statistics__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspLogger.h" line="124" column="1" bodyfile="inc/mcu/esp32/EspLogger.h" bodystart="124" bodyend="570"/>
    <listofallmembers>
      <member refid="classBaseLogger_1ad3174118bec359f399b89a7ca0c18881" prot="protected" virt="non-virtual"><scope>EspLogger</scope><name>BaseLogger</name></member>
      <member refid="classBaseLogger_1a9bc13a6a2e51b915e049bef19458ab14" prot="protected" virt="non-virtual"><scope>EspLogger</scope><name>BaseLogger</name></member>
      <member refid="classBaseLogger_1ad8074912949ec914c7ea50733e51f720" prot="protected" virt="non-virtual"><scope>EspLogger</scope><name>BaseLogger</name></member>
      <member refid="classEspLogger_1a0eb097491fbc1b1348cb8b94c3597737" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>CheckLogV2Availability</name></member>
      <member refid="classEspLogger_1ade52db9548002c1e5cfd36bfc3d526b4" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>config_</name></member>
      <member refid="classEspLogger_1afffbccb35a115bf1af4139523cc23809" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>ConvertErrorToString</name></member>
      <member refid="classEspLogger_1aecd1c70ab5742e27255a2b17585fd79f" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>ConvertLogLevel</name></member>
      <member refid="classEspLogger_1aef36cbbb29c093c7f3b5a04f789e8916" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>ConvertLogLevel</name></member>
      <member refid="classEspLogger_1a6dff2af97ae0ee413b89aec8cf96f09a" prot="public" virt="virtual"><scope>EspLogger</scope><name>Debug</name></member>
      <member refid="classEspLogger_1ad55e13200cd30558a1c6b51cd37bd9de" prot="public" virt="virtual"><scope>EspLogger</scope><name>Deinitialize</name></member>
      <member refid="classEspLogger_1a7b5294d5699de739d4696a538dd6c71b" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>diagnostics_</name></member>
      <member refid="classEspLogger_1afd6ed0aa4e042aa0356952ca4cb968da" prot="public" virt="virtual"><scope>EspLogger</scope><name>EnsureInitialized</name></member>
      <member refid="classEspLogger_1abbbf11de08f63b1a7cdc37b36f8dcaeb" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>EnsureMessageBuffer</name></member>
      <member refid="classEspLogger_1a666cd0894691948bf449fb7e325d222f" prot="public" virt="virtual"><scope>EspLogger</scope><name>Error</name></member>
      <member refid="classEspLogger_1ac7e384fbbb0398729d0f8b65f4268b15" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>EspLogger</name></member>
      <member refid="classEspLogger_1ac3fddcbe82a7de191a903a5427dd44e0" prot="public" virt="virtual"><scope>EspLogger</scope><name>Flush</name></member>
      <member refid="classEspLogger_1a5f1c46a46387f5523921dc03060b7b2a" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>FormatMessage</name></member>
      <member refid="classEspLogger_1a6f4e39e7302fddf17ab06bf3dced21da" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>GetCurrentThreadId</name></member>
      <member refid="classEspLogger_1ac291d84dda6d4ea58218b4ff706d395a" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>GetCurrentTimestamp</name></member>
      <member refid="classEspLogger_1ac2b2ffa4d116dc2e75c96ccb8f08e61b" prot="public" virt="virtual"><scope>EspLogger</scope><name>GetDiagnostics</name></member>
      <member refid="classEspLogger_1a3452b953312f5d8512ecb64b7b8e6624" prot="public" virt="virtual"><scope>EspLogger</scope><name>GetLastError</name></member>
      <member refid="classEspLogger_1a7dee6257ad605104ffe53822747b82b1" prot="public" virt="virtual"><scope>EspLogger</scope><name>GetLastErrorMessage</name></member>
      <member refid="classEspLogger_1ad6062eec104b3cdf9532cfa2a9f15bdc" prot="public" virt="virtual"><scope>EspLogger</scope><name>GetLogLevel</name></member>
      <member refid="classEspLogger_1a0f7694bf8f934182ca64eebff6e888a2" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>GetLogVersion</name></member>
      <member refid="classEspLogger_1a9c245d1d50c9665832b75332ba752689" prot="public" virt="virtual"><scope>EspLogger</scope><name>GetStatistics</name></member>
      <member refid="classEspLogger_1a93e23db81675d5e65de16df73bc468ca" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>healthy_</name></member>
      <member refid="classEspLogger_1a3f54f20a15b35aee84a5148b84a846c1" prot="public" virt="virtual"><scope>EspLogger</scope><name>Info</name></member>
      <member refid="classEspLogger_1ac28e33ed2ddb08d48e0f838fc1f1bf17" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>initialization_time_</name></member>
      <member refid="classEspLogger_1a65a25428dd2429380fa5e44ddb31f883" prot="public" virt="virtual"><scope>EspLogger</scope><name>Initialize</name></member>
      <member refid="classEspLogger_1ad48d65d02351eef623fdfa05dff258a6" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>initialized_</name></member>
      <member refid="classEspLogger_1ad3e5ce287db5576529f60a37da43c2be" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>InitializeLogV2</name></member>
      <member refid="classEspLogger_1ab003664bef163b80f2071efbccfb1fe9" prot="public" virt="virtual"><scope>EspLogger</scope><name>IsHealthy</name></member>
      <member refid="classEspLogger_1a4d300e5e6ae8f3da60d756686f520495" prot="public" virt="virtual"><scope>EspLogger</scope><name>IsInitialized</name></member>
      <member refid="classEspLogger_1a7ec1e202ab853fd2ee1f2b93c4089a08" prot="public" virt="virtual"><scope>EspLogger</scope><name>IsLevelEnabled</name></member>
      <member refid="classEspLogger_1aa17e6a890bd290c0ac639436057f01df" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>IsLogV2Available</name></member>
      <member refid="classEspLogger_1ac775294d58bc741c7a5b4796b2b0d292" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>last_error_</name></member>
      <member refid="classEspLogger_1a9a4ef83b3e2e9beedeb847a207cb5880" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>last_error_message_</name></member>
      <member refid="classEspLogger_1a1bd4cebdf38585c85a6924713014ca5d" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>last_health_check_</name></member>
      <member refid="classEspLogger_1a35a264de336e8f2de1b7cd1751eab044" prot="public" virt="virtual"><scope>EspLogger</scope><name>Log</name></member>
      <member refid="classEspLogger_1a813a28d12d69a4339970f0838461aae8" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>log_v2_available_</name></member>
      <member refid="classEspLogger_1a8f01845a36c1f91fcd933f9d741b4b49" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>log_version_</name></member>
      <member refid="classEspLogger_1a0439465731dcba29e5012e5f9e148f98" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>LogBuffer</name></member>
      <member refid="classEspLogger_1a8ce33948b3b8c36bd0ad61682ab3c47b" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>LogBufferChar</name></member>
      <member refid="classEspLogger_1a0bab0e37c73b2b7f1033d826b7ca36b6" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>LogBufferHex</name></member>
      <member refid="classEspLogger_1af50c94ba33ded85a51415326b793c886" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>LogBufferHexDump</name></member>
      <member refid="classEspLogger_1adea4e7abe8c84281369db4e8a7224a8e" prot="public" virt="virtual"><scope>EspLogger</scope><name>LogV</name></member>
      <member refid="classEspLogger_1a0622fca14e6fc69b91975cf720af3603" prot="public" virt="virtual"><scope>EspLogger</scope><name>LogWithLocation</name></member>
      <member refid="classEspLogger_1a1414db646e36b29340503445ad287296" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>message_buffer_</name></member>
      <member refid="classEspLogger_1aeb9e653897acb963156107a51796c9ea" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>mutex_</name></member>
      <member refid="classBaseLogger_1a527c6cc4476270922f2a29b3714f95e2" prot="protected" virt="non-virtual"><scope>EspLogger</scope><name>operator=</name></member>
      <member refid="classBaseLogger_1a576bbb9fc3ac85c96779a3cd041ecb04" prot="protected" virt="non-virtual"><scope>EspLogger</scope><name>operator=</name></member>
      <member refid="classEspLogger_1aa97399671a0a163185c0d28cbb77d6cc" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>PerformHealthCheck</name></member>
      <member refid="classEspLogger_1af4dd2ff188f30b1a5da6c174361ee2d0" prot="public" virt="virtual"><scope>EspLogger</scope><name>PrintDiagnostics</name></member>
      <member refid="classEspLogger_1a3707bd0b8d05153fce8c306461ad8a5b" prot="public" virt="virtual"><scope>EspLogger</scope><name>PrintStatistics</name></member>
      <member refid="classEspLogger_1ae9668859f987dd750a3ca89bbffa94d4" prot="public" virt="virtual"><scope>EspLogger</scope><name>PrintStatus</name></member>
      <member refid="classEspLogger_1aefe2fb8f5f9359423c198a4980236ffe" prot="public" virt="virtual"><scope>EspLogger</scope><name>ResetDiagnostics</name></member>
      <member refid="classEspLogger_1a0c8b15b05c28dc619ebf777c870bd2ec" prot="public" virt="virtual"><scope>EspLogger</scope><name>ResetStatistics</name></member>
      <member refid="classEspLogger_1a2ba313925a91c912e926af982b1f99df" prot="public" virt="virtual"><scope>EspLogger</scope><name>SetLogLevel</name></member>
      <member refid="classEspLogger_1ad943622faa174b6c4f44ced1527e3927" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>statistics_</name></member>
      <member refid="classEspLogger_1a390db49b839f78cf444e96391a5d1967" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>tag_levels_</name></member>
      <member refid="classEspLogger_1aff52ecfa69d725c164cbcd01460aa6bb" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>UpdateDiagnostics</name></member>
      <member refid="classEspLogger_1aa80b1fe39bc3c543fca65744d834e168" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>UpdateStatistics</name></member>
      <member refid="classEspLogger_1a2740f86e01f57ee1ab99661a011c2d31" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>ValidateConfiguration</name></member>
      <member refid="classEspLogger_1a8b5952680c76fd4d3f7c7e3cce904e41" prot="public" virt="virtual"><scope>EspLogger</scope><name>Verbose</name></member>
      <member refid="classEspLogger_1a097cbcffbb54f838cddab0e20abff8ac" prot="public" virt="virtual"><scope>EspLogger</scope><name>Warn</name></member>
      <member refid="classEspLogger_1aa1e94f68b56c5235064f5882b6d4223a" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>WriteMessage</name></member>
      <member refid="classEspLogger_1a79e75fcc3fae3624038e611cc8180437" prot="private" virt="non-virtual"><scope>EspLogger</scope><name>WriteMessageV</name></member>
      <member refid="classBaseLogger_1aaf8957e6554581ceb22692563f0925e9" prot="public" virt="virtual"><scope>EspLogger</scope><name>~BaseLogger</name></member>
      <member refid="classEspLogger_1af3689ffc89aa801c754b78989ec306ab" prot="public" virt="non-virtual"><scope>EspLogger</scope><name>~EspLogger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
