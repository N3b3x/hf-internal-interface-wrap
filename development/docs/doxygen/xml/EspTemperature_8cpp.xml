<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="EspTemperature_8cpp" kind="file" language="C++">
    <compoundname>EspTemperature.cpp</compoundname>
    <includes refid="EspTemperature_8h" local="yes">EspTemperature.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstring</includes>
    <incdepgraph>
      <node id="3">
        <label>base/BaseTemperature.h</label>
        <link refid="BaseTemperature_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>EspTemperature.h</label>
        <link refid="EspTemperature_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>McuSelect.h</label>
        <link refid="McuSelect_8h"/>
      </node>
      <node id="9">
        <label>utils/RtosMutex.h</label>
        <link refid="RtosMutex_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/mcu/esp32/EspTemperature.cpp</label>
        <link refid="EspTemperature_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>algorithm</label>
      </node>
      <node id="14">
        <label>atomic</label>
      </node>
      <node id="20">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="21">
        <label>cstring</label>
      </node>
      <node id="15">
        <label>driver/temperature_sensor.h</label>
      </node>
      <node id="16">
        <label>esp_err.h</label>
      </node>
      <node id="17">
        <label>esp_log.h</label>
      </node>
      <node id="18">
        <label>esp_timer.h</label>
      </node>
      <node id="11">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="12">
        <label>freertos/semphr.h</label>
      </node>
      <node id="13">
        <label>freertos/task.h</label>
      </node>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="8">
        <label>string_view</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>ESP32-C6 internal temperature sensor implementation for the HardFOC system. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains the complete implementation of the ESP32-C6 temperature sensor driver that extends the <ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref> abstract class. It provides comprehensive support for all ESP32-C6 temperature sensor features including multiple measurement ranges, threshold monitoring, continuous monitoring, calibration, and power management.</para>
<para>Key features implemented:<itemizedlist>
<listitem><para>ESP32-C6 internal temperature sensor using ESP-IDF v5.x APIs</para>
</listitem><listitem><para>Multiple predefined measurement ranges with different accuracy levels</para>
</listitem><listitem><para>Hardware threshold monitoring with interrupt callbacks</para>
</listitem><listitem><para>Continuous monitoring using ESP32 timers</para>
</listitem><listitem><para>Thread-safe operations with mutex protection</para>
</listitem><listitem><para>Comprehensive error handling and diagnostics</para>
</listitem><listitem><para>Power management support for low-power applications</para>
</listitem><listitem><para>Operation statistics and performance tracking</para>
</listitem><listitem><para>Self-test and health monitoring capabilities</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="author"><para>Nebiyu Tadesse </para>
</simplesect>
<simplesect kind="date"><para>2025 </para>
</simplesect>
<simplesect kind="copyright"><para>HardFOC</para>
</simplesect>
<simplesect kind="note"><para>ESP32-C6 specific implementation using ESP-IDF v5.x </para>
</simplesect>
<simplesect kind="note"><para>Thread-safe design suitable for multi-threaded applications </para>
</simplesect>
<simplesect kind="note"><para>Follows HardFOC coding standards and patterns </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspTemperature_8h" kindref="compound">EspTemperature.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>HF_MCU_FAMILY_ESP32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>library<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">EspTemperature::TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EspTemperature&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref><sp/><ref refid="classEspTemperature_1a627914394ff10df930d340e4beecbb96" kindref="member">EspTemperature::s_shared_mutex_</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">std::atomic&lt;int&gt;<sp/><ref refid="classEspTemperature_1aef85506e203917c06e7d951370f983ad" kindref="member">EspTemperature::s_refcount_</ref>{0};</highlight></codeline>
<codeline lineno="42"><highlight class="normal">temperature_sensor_handle_t<sp/><ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">EspTemperature::s_shared_handle_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ESP32-C6<sp/>Temperature<sp/>Range<sp/>Configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structesp__temp__range__info__t" kindref="compound">esp_temp_range_info_t</ref><sp/><ref refid="classEspTemperature_1aa829f22f1d02247e2da26709702812ae" kindref="member">EspTemperature::RANGE_INFO</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a9db37d9d8ddf77ef1c17909a3da21f1e" kindref="member">ESP_TEMP_RANGE_NEG10_80</ref>,<sp/>-10.0f,<sp/>80.0f,<sp/>1.0f,<sp/></highlight><highlight class="stringliteral">&quot;-10°C<sp/>to<sp/>80°C<sp/>(±1°C<sp/>accuracy,<sp/>recommended)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a0bfbb2886fd8591785e0753852614593" kindref="member">ESP_TEMP_RANGE_20_100</ref>,<sp/>20.0f,<sp/>100.0f,<sp/>2.0f,<sp/></highlight><highlight class="stringliteral">&quot;20°C<sp/>to<sp/>100°C<sp/>(±2°C<sp/>accuracy,<sp/>high<sp/>temp)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a48ba6bdcfa0a564bbdd1446f28012d07" kindref="member">ESP_TEMP_RANGE_NEG30_50</ref>,<sp/>-30.0f,<sp/>50.0f,<sp/>2.0f,<sp/></highlight><highlight class="stringliteral">&quot;-30°C<sp/>to<sp/>50°C<sp/>(±2°C<sp/>accuracy,<sp/>low<sp/>temp)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679acaf07c226aca123069036f900789a53d" kindref="member">ESP_TEMP_RANGE_50_125</ref>,<sp/>50.0f,<sp/>125.0f,<sp/>3.0f,<sp/></highlight><highlight class="stringliteral">&quot;50°C<sp/>to<sp/>125°C<sp/>(±3°C<sp/>accuracy,<sp/>extreme<sp/>high)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a503b5815dd03390443dc55ca49460d12" kindref="member">ESP_TEMP_RANGE_NEG40_20</ref>,<sp/>-40.0f,<sp/>20.0f,<sp/>3.0f,<sp/></highlight><highlight class="stringliteral">&quot;-40°C<sp/>to<sp/>20°C<sp/>(±3°C<sp/>accuracy,<sp/>extreme<sp/>low)&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSTRUCTORS<sp/>AND<sp/>DESTRUCTOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="classEspTemperature_1ac40eca554ac9cdc9a732ca543a426526" kindref="member">EspTemperature::EspTemperature</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref>(),<sp/>mutex_(),<sp/>esp_state_{},<sp/>esp_config_(<ref refid="EspTemperature_8h_1a0551895615a2e3b26d57aa3a36776d8e" kindref="member">ESP_TEMP_CONFIG_DEFAULT</ref>()),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_config_(<ref refid="BaseTemperature_8h_1a23f8c4b66a0054321a85ecae51f72e81" kindref="member">HF_TEMP_CONFIG_DEFAULT</ref>()),<sp/>statistics_{},<sp/>diagnostics_{},</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_error_(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/>threshold_callback_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>monitoring_callback_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>esp_threshold_callback_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_monitoring_callback_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>threshold_user_data_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>monitoring_user_data_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>ESP32-specific<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>esp_state_.handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>esp_state_.current_range<sp/>=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a9db37d9d8ddf77ef1c17909a3da21f1e" kindref="member">ESP_TEMP_RANGE_NEG10_80</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>esp_state_.calibration_offset<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>esp_state_.threshold_monitoring_enabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>esp_state_.continuous_monitoring_active<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>esp_state_.monitoring_timer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>esp_state_.sample_rate_hz<sp/>=<sp/><ref refid="EspTemperature_8h_1a3194fbb04c8302c48564a2d988809f6a" kindref="member">ESP_TEMP_DEFAULT_SAMPLE_RATE_HZ</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>esp_state_.last_reading_timestamp_us<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>esp_state_.last_temperature_celsius<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>esp_state_.allow_power_down<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>diagnostics_.sensor_healthy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>diagnostics_.last_error_code<sp/>=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>diagnostics_.last_error_timestamp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>diagnostics_.consecutive_errors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>diagnostics_.sensor_available<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>diagnostics_.threshold_monitoring_supported<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>diagnostics_.threshold_monitoring_enabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>diagnostics_.continuous_monitoring_active<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>diagnostics_.current_temperature_raw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>diagnostics_.calibration_valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>statistics_.total_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>statistics_.successful_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>statistics_.failed_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>statistics_.temperature_readings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>statistics_.calibration_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>statistics_.threshold_violations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>statistics_.average_operation_time_us<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>statistics_.max_operation_time_us<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>statistics_.min_operation_time_us<sp/>=<sp/>UINT32_MAX;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>statistics_.min_temperature_celsius<sp/>=<sp/>1000.0f;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>statistics_.max_temperature_celsius<sp/>=<sp/>-1000.0f;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>statistics_.avg_temperature_celsius<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspTemperature<sp/>instance<sp/>created&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="classEspTemperature_1ac40eca554ac9cdc9a732ca543a426526" kindref="member">EspTemperature::EspTemperature</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structesp__temp__config__t" kindref="compound">esp_temp_config_t</ref>&amp;<sp/>esp_config)<sp/>noexcept<sp/>:<sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref>()<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>esp_config_<sp/>=<sp/>esp_config;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspTemperature<sp/>instance<sp/>created<sp/>with<sp/>custom<sp/>configuration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="classEspTemperature_1a5d4b044be19bc62da664d76b1b6207b6" kindref="member">EspTemperature::~EspTemperature</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>locking<sp/>here<sp/>to<sp/>prevent<sp/>nested<sp/>lock<sp/>in<sp/>Deinitialize()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1acee4cee66dd94a80f8ebd8697718560e" kindref="member">Deinitialize</ref>();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspTemperature<sp/>instance<sp/>destroyed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PURE<sp/>VIRTUAL<sp/>IMPLEMENTATIONS<sp/>-<sp/>PLATFORM<sp/>SPECIFIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a92699d024919bf1f5f40cfc2a05c5465" kindref="member">EspTemperature::Initialize</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>start_time<sp/>=<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>already<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" kindref="member">UpdateStatistics</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>ESP32-C6<sp/>temperature<sp/>sensor...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>or<sp/>adopt<sp/>shared<sp/>temperature<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp,<sp/>max_temp,<sp/>accuracy;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a575d8aef9720c553f8c718bca0c67417" kindref="member">GetRangeConfig</ref>(<ref refid="classEspTemperature_1a629744fc883c865e06a3f2369b577175" kindref="member">esp_config_</ref>.<ref refid="structesp__temp__config__t_1a15eb2b026d98122ce96bd29d47ce4b88" kindref="member">range</ref>,<sp/>&amp;min_temp,<sp/>&amp;max_temp,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>sharedLock(<ref refid="classEspTemperature_1a627914394ff10df930d340e4beecbb96" kindref="member">s_shared_mutex_</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temperature_sensor_config_t<sp/>temp_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp_config.range_min<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_temp);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp_config.range_max<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(max_temp);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp_config.clk_src<sp/>=<sp/>TEMPERATURE_SENSOR_CLK_SRC_DEFAULT;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp_config.flags.allow_pd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>temperature_sensor_install(&amp;temp_config,<sp/>&amp;<ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>install<sp/>temperature<sp/>sensor:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" kindref="member">ConvertEspError</ref>(esp_err));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" kindref="member">UpdateStatistics</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_err<sp/>=<sp/>temperature_sensor_enable(<ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>temperature<sp/>sensor:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temperature_sensor_uninstall(<ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" kindref="member">ConvertEspError</ref>(esp_err));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" kindref="member">UpdateStatistics</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1aef85506e203917c06e7d951370f983ad" kindref="member">s_refcount_</ref>++;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a8c43679a55729c46d107804c3e0f8d91" kindref="member">handle</ref><sp/>=<sp/><ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1aa27ed92ce9a8ac860496978b0a41f614" kindref="member">current_range</ref><sp/>=<sp/><ref refid="classEspTemperature_1a629744fc883c865e06a3f2369b577175" kindref="member">esp_config_</ref>.<ref refid="structesp__temp__config__t_1a15eb2b026d98122ce96bd29d47ce4b88" kindref="member">range</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a7ea6386f0990755a7e6569081a701bfa" kindref="member">calibration_offset</ref><sp/>=<sp/><ref refid="classEspTemperature_1a629744fc883c865e06a3f2369b577175" kindref="member">esp_config_</ref>.<ref refid="structesp__temp__config__t_1a32f4e0572841ba20c07eb951d8c14b5c" kindref="member">calibration_offset</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" kindref="member">current_state_</ref><sp/>=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12ae345bd766f545d81fe3b507753f4dc7b" kindref="member">HF_TEMP_STATE_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>threshold<sp/>monitoring<sp/>bookkeeping<sp/>only<sp/>(avoid<sp/>nested<sp/>locking<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1a629744fc883c865e06a3f2369b577175" kindref="member">esp_config_</ref>.<ref refid="structesp__temp__config__t_1a532b01f4a182e30097a84fd14ceac05c" kindref="member">enable_threshold_monitoring</ref>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a88f1b850e2b1a619dd9e87a246c26eda" kindref="member">threshold_monitoring_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a744b9f72ba155602c86667c63d9a329b" kindref="member">threshold_monitoring_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP32-C6<sp/>temperature<sp/>sensor<sp/>initialized<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Range:<sp/>%.0f°C<sp/>to<sp/>%.0f°C,<sp/>Accuracy:<sp/>±%.1f°C&quot;</highlight><highlight class="normal">,<sp/>min_temp,<sp/>max_temp,<sp/>accuracy);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" kindref="member">UpdateStatistics</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1acee4cee66dd94a80f8ebd8697718560e" kindref="member">EspTemperature::Deinitialize</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>start_time<sp/>=<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" kindref="member">UpdateStatistics</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Deinitializing<sp/>ESP32-C6<sp/>temperature<sp/>sensor...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>continuous<sp/>monitoring<sp/>if<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a2a7e449e9494d084491b6a02682a407c" kindref="member">continuous_monitoring_active</ref>)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inline<sp/>StopContinuousMonitoring()<sp/>without<sp/>taking<sp/>the<sp/>lock<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success_monitor<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>esp_timer_stop(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK<sp/>&amp;&amp;<sp/>esp_err<sp/>!=<sp/>ESP_ERR_INVALID_STATE)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>stop<sp/>monitoring<sp/>timer:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success_monitor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_err<sp/>=<sp/>esp_timer_delete(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>delete<sp/>monitoring<sp/>timer:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success_monitor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a2a7e449e9494d084491b6a02682a407c" kindref="member">continuous_monitoring_active</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a7fee07809400edb66e2070c976262c44" kindref="member">continuous_monitoring_active</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1af516eb1e27cb63a70b6517752f1323fd" kindref="member">monitoring_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1adba4d867f07dbbe733e55c16a3f05637" kindref="member">esp_monitoring_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a8fe2e9d176f71696e4fb12afbcd25bc8" kindref="member">monitoring_user_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)success_monitor;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>threshold<sp/>monitoring<sp/>if<sp/>active</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a88f1b850e2b1a619dd9e87a246c26eda" kindref="member">threshold_monitoring_enabled</ref>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inline<sp/>DisableThresholdMonitoring()<sp/>without<sp/>taking<sp/>the<sp/>lock<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a88f1b850e2b1a619dd9e87a246c26eda" kindref="member">threshold_monitoring_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a744b9f72ba155602c86667c63d9a329b" kindref="member">threshold_monitoring_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1af98b41d1d3d44f8f1fe71878d2ecc7bb" kindref="member">threshold_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ac6dc56a81910c0c1d02c32119f0afd05" kindref="member">esp_threshold_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a64679e2522454245be7bdba622ef8176" kindref="member">threshold_user_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrement<sp/>refcount<sp/>and<sp/>possibly<sp/>tear<sp/>down<sp/>shared<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a8c43679a55729c46d107804c3e0f8d91" kindref="member">handle</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>sharedLock(<ref refid="classEspTemperature_1a627914394ff10df930d340e4beecbb96" kindref="member">s_shared_mutex_</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1aef85506e203917c06e7d951370f983ad" kindref="member">s_refcount_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1aef85506e203917c06e7d951370f983ad" kindref="member">s_refcount_</ref>--;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1aef85506e203917c06e7d951370f983ad" kindref="member">s_refcount_</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>temperature_sensor_disable(<ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>temperature<sp/>sensor:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_err<sp/>=<sp/>temperature_sensor_uninstall(<ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>uninstall<sp/>temperature<sp/>sensor:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" kindref="member">s_shared_handle_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a8c43679a55729c46d107804c3e0f8d91" kindref="member">handle</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><ref refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" kindref="member">current_state_</ref><sp/>=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12a8999c38c687847a232587904bae321ac" kindref="member">HF_TEMP_STATE_UNINITIALIZED</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a88f1b850e2b1a619dd9e87a246c26eda" kindref="member">threshold_monitoring_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a2a7e449e9494d084491b6a02682a407c" kindref="member">continuous_monitoring_active</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1af98b41d1d3d44f8f1fe71878d2ecc7bb" kindref="member">threshold_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1af516eb1e27cb63a70b6517752f1323fd" kindref="member">monitoring_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ac6dc56a81910c0c1d02c32119f0afd05" kindref="member">esp_threshold_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1adba4d867f07dbbe733e55c16a3f05637" kindref="member">esp_monitoring_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a64679e2522454245be7bdba622ef8176" kindref="member">threshold_user_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a8fe2e9d176f71696e4fb12afbcd25bc8" kindref="member">monitoring_user_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP32-C6<sp/>temperature<sp/>sensor<sp/>deinitialized<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP32-C6<sp/>temperature<sp/>sensor<sp/>deinitialization<sp/>completed<sp/>with<sp/>errors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a45c5f714c0d9068aa9be0955b60be332" kindref="member">hf_temp_err_t::TEMP_ERR_FAILURE</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" kindref="member">UpdateStatistics</ref>(success,<sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">GetCurrentTimeUs</ref>()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a0357ccb31a009ae7b55ca02db5e0c58a" kindref="member">EspTemperature::ReadTemperatureCelsiusImpl</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>temperature_celsius)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temperature_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>start_time<sp/>=<sp/>GetCurrentTimeUs();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateStatistics(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>GetCurrentTimeUs()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>),</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_state_.handle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP<sp/>sensor<sp/>handle<sp/>is<sp/>null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateStatistics(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>GetCurrentTimeUs()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aeeeef5ee8b27713362940156fa4d30d3" kindref="member">hf_temp_err_t::TEMP_ERR_SENSOR_NOT_AVAILABLE</ref>),</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aeeeef5ee8b27713362940156fa4d30d3" kindref="member">hf_temp_err_t::TEMP_ERR_SENSOR_NOT_AVAILABLE</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>current_state_<sp/>=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12a00fda7bc134524890bbc071922e18ce1" kindref="member">HF_TEMP_STATE_READING</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>raw<sp/>temperature<sp/>from<sp/>ESP32-C6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>raw_temp;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>temperature_sensor_get_celsius(esp_state_.handle,<sp/>&amp;raw_temp);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>current_state_<sp/>=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12ae345bd766f545d81fe3b507753f4dc7b" kindref="member">HF_TEMP_STATE_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>temperature:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/>error<sp/>=<sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateStatistics(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>GetCurrentTimeUs()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(error),<sp/>error;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>calibration<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>*temperature_celsius<sp/>=<sp/>raw_temp<sp/>+<sp/>esp_state_.calibration_offset;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>statistics_.temperature_readings++;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>esp_state_.last_temperature_celsius<sp/>=<sp/>*temperature_celsius;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>esp_state_.last_reading_timestamp_us<sp/>=<sp/>GetCurrentTimeUs();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>min/max<sp/>tracking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*temperature_celsius<sp/>&lt;<sp/>statistics_.min_temperature_celsius)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.min_temperature_celsius<sp/>=<sp/>*temperature_celsius;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*temperature_celsius<sp/>&gt;<sp/>statistics_.max_temperature_celsius)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.max_temperature_celsius<sp/>=<sp/>*temperature_celsius;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>average<sp/>temperature<sp/>(simple<sp/>moving<sp/>average)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(statistics_.temperature_readings<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.avg_temperature_celsius<sp/>=<sp/>*temperature_celsius;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.avg_temperature_celsius<sp/>=</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(statistics_.avg_temperature_celsius<sp/>*<sp/>(statistics_.temperature_readings<sp/>-<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*temperature_celsius)<sp/>/</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics_.temperature_readings;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>thresholds<sp/>if<sp/>monitoring<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_state_.threshold_monitoring_enabled)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckThresholds(*temperature_celsius);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>temperature<sp/>is<sp/>within<sp/>expected<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp,<sp/>max_temp,<sp/>accuracy;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>GetRangeConfig(esp_state_.current_range,<sp/>&amp;min_temp,<sp/>&amp;max_temp,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*temperature_celsius<sp/>&lt;<sp/>min_temp<sp/>-<sp/>10.0f<sp/>||<sp/>*temperature_celsius<sp/>&gt;<sp/>max_temp<sp/>+<sp/>10.0f)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>%.2f°C<sp/>is<sp/>outside<sp/>expected<sp/>range<sp/>[%.0f°C,<sp/>%.0f°C]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*temperature_celsius,<sp/>min_temp,<sp/>max_temp);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>reading:<sp/>%.2f°C<sp/>(raw:<sp/>%.2f°C,<sp/>offset:<sp/>%.2f°C)&quot;</highlight><highlight class="normal">,<sp/>*temperature_celsius,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_temp,<sp/>esp_state_.calibration_offset);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>UpdateStatistics(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>GetCurrentTimeUs()<sp/>-<sp/>start_time);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INFORMATION<sp/>INTERFACE<sp/>(MANDATORY<sp/>OVERRIDES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a31ccbc056a1b393a230ab8a2614bba2f" kindref="member">EspTemperature::GetSensorInfo</ref>(<ref refid="structhf__temp__sensor__info__t" kindref="compound">hf_temp_sensor_info_t</ref>*<sp/>info)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>range<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp,<sp/>max_temp,<sp/>accuracy;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>GetRangeConfig(esp_state_.current_range,<sp/>&amp;min_temp,<sp/>&amp;max_temp,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>info-&gt;sensor_type<sp/>=<sp/><ref refid="BaseTemperature_8h_1a698a95604ca19f87ee2ff5c99f903577a8aa8f97a4549bc156de54f576307198f" kindref="member">HF_TEMP_SENSOR_TYPE_INTERNAL</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>info-&gt;min_temp_celsius<sp/>=<sp/>min_temp;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>info-&gt;max_temp_celsius<sp/>=<sp/>max_temp;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>info-&gt;resolution_celsius<sp/>=<sp/><ref refid="EspTemperature_8h_1ae8dcb74ebe56ab56c3880446acce9d22" kindref="member">ESP_TEMP_DEFAULT_RESOLUTION_CELSIUS</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>info-&gt;accuracy_celsius<sp/>=<sp/>accuracy;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>info-&gt;response_time_ms<sp/>=<sp/><ref refid="EspTemperature_8h_1a78f98591000d516673583e4ebf4e6e03" kindref="member">ESP_TEMP_DEFAULT_RESPONSE_TIME_MS</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>info-&gt;capabilities<sp/>=<sp/>GetCapabilities();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>info-&gt;manufacturer<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Espressif&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>info-&gt;model<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ESP32-C6<sp/>Internal<sp/>Temperature<sp/>Sensor&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>info-&gt;version<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF<sp/>v5.x&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/><ref refid="classEspTemperature_1af42132c1ba77f8392eb6e7a5b055e7e2" kindref="member">EspTemperature::GetCapabilities</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba4a9af9dc4358e43a9f17ee00d53a11ff" kindref="member">HF_TEMP_CAP_THRESHOLD_MONITORING</ref><sp/>|<sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba033ff3c7e7157780c97cc880acc24a88" kindref="member">HF_TEMP_CAP_CONTINUOUS_READING</ref><sp/>|</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba62e3084f000988d51422332d944459ce" kindref="member">HF_TEMP_CAP_CALIBRATION</ref><sp/>|<sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba95ae31c9d81efbaf8c1f610f00840d50" kindref="member">HF_TEMP_CAP_POWER_MANAGEMENT</ref><sp/>|<sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba2a67e00378a837a655cb0400e4a227c9" kindref="member">HF_TEMP_CAP_SELF_TEST</ref><sp/>|</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba3fcf3db4c058bb67cbebd19cf3f06950" kindref="member">HF_TEMP_CAP_HIGH_PRECISION</ref><sp/>|<sp/><ref refid="BaseTemperature_8h_1a5bfe096967aceddcf8232f8c4458b2cba729a27c3f5f164d8149107938885e694" kindref="member">HF_TEMP_CAP_FAST_RESPONSE</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADVANCED<sp/>FEATURES<sp/>(SUPPORTED<sp/>BY<sp/>ESP32-C6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a92b30bf532e07d1f1927d4fccf5322ba" kindref="member">EspTemperature::SetRange</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_celsius,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_celsius)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_celsius<sp/>&gt;=<sp/>max_celsius)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>range:<sp/>min<sp/>(%.1f)<sp/>&gt;=<sp/>max<sp/>(%.1f)&quot;</highlight><highlight class="normal">,<sp/>min_celsius,<sp/>max_celsius);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a09f868f9c6a2997f35accb256b2cb769" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_RANGE</ref>),</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a09f868f9c6a2997f35accb256b2cb769" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_RANGE</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>optimal<sp/>range<sp/>for<sp/>the<sp/>given<sp/>requirements<sp/>(no<sp/>lock<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/>optimal_range<sp/>=<sp/>FindOptimalRange(min_celsius,<sp/>max_celsius);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optimal_range<sp/>&gt;=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a655981e7a53bf6a8f57231b0db07a5e6" kindref="member">ESP_TEMP_RANGE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>suitable<sp/>range<sp/>found<sp/>for<sp/>%.1f°C<sp/>to<sp/>%.1f°C&quot;</highlight><highlight class="normal">,<sp/>min_celsius,<sp/>max_celsius);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20ac99d60dc1b354f4bde3036afbed680a4" kindref="member">hf_temp_err_t::TEMP_ERR_UNSUPPORTED_RANGE</ref>),</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20ac99d60dc1b354f4bde3036afbed680a4" kindref="member">hf_temp_err_t::TEMP_ERR_UNSUPPORTED_RANGE</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>range<sp/>change<sp/>with<sp/>internal<sp/>locking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetMeasurementRange(optimal_range);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a5763ab0b92fff25c5854bcfb04a8ba9f" kindref="member">EspTemperature::GetRange</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>min_celsius,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>max_celsius)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>max_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>accuracy;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>GetRangeConfig(esp_state_.current_range,<sp/>min_celsius,<sp/>max_celsius,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1ae1bfe0b1ceeb20ea8eb5010ef09f832d" kindref="member">EspTemperature::GetResolution</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>resolution_celsius)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resolution_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>*resolution_celsius<sp/>=<sp/><ref refid="EspTemperature_8h_1ae8dcb74ebe56ab56c3880446acce9d22" kindref="member">ESP_TEMP_DEFAULT_RESOLUTION_CELSIUS</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1aaeda9f32dfc75e5ca2ab15142d0c9998" kindref="member">EspTemperature::SetThresholds</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>low_threshold_celsius,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>high_threshold_celsius)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low_threshold_celsius<sp/>&gt;=<sp/>high_threshold_celsius)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>thresholds:<sp/>low<sp/>(%.1f)<sp/>&gt;=<sp/>high<sp/>(%.1f)&quot;</highlight><highlight class="normal">,<sp/>low_threshold_celsius,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high_threshold_celsius);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a5ab99a797f519c6015d37fca096155b2" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_THRESHOLD</ref>),</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a5ab99a797f519c6015d37fca096155b2" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_THRESHOLD</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>thresholds<sp/>are<sp/>within<sp/>sensor<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp,<sp/>max_temp,<sp/>accuracy;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>GetRangeConfig(esp_state_.current_range,<sp/>&amp;min_temp,<sp/>&amp;max_temp,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low_threshold_celsius<sp/>&lt;<sp/>min_temp<sp/>||<sp/>high_threshold_celsius<sp/>&gt;<sp/>max_temp)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Thresholds<sp/>[%.1f,<sp/>%.1f]<sp/>outside<sp/>sensor<sp/>range<sp/>[%.0f,<sp/>%.0f]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low_threshold_celsius,<sp/>high_threshold_celsius,<sp/>min_temp,<sp/>max_temp);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>esp_config_.low_threshold_celsius<sp/>=<sp/>low_threshold_celsius;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>esp_config_.high_threshold_celsius<sp/>=<sp/>high_threshold_celsius;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>thresholds<sp/>set:<sp/>Low=%.1f°C,<sp/>High=%.1f°C&quot;</highlight><highlight class="normal">,<sp/>low_threshold_celsius,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high_threshold_celsius);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1ae122e823c11b55550cb91af01e26461e" kindref="member">EspTemperature::GetThresholds</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>low_threshold_celsius,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>high_threshold_celsius)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low_threshold_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>high_threshold_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>*low_threshold_celsius<sp/>=<sp/>esp_config_.low_threshold_celsius;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>*high_threshold_celsius<sp/>=<sp/>esp_config_.high_threshold_celsius;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a1b34d89cb1cc7b03100674bea303ab5a" kindref="member">EspTemperature::EnableThresholdMonitoring</ref>(<ref refid="BaseTemperature_8h_1a2672848972ed3dbd28859299c8862f6b" kindref="member">hf_temp_threshold_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>),</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>threshold_callback_<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>threshold_user_data_<sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>esp_state_.threshold_monitoring_enabled<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>diagnostics_.threshold_monitoring_enabled<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Threshold<sp/>monitoring<sp/>enabled<sp/>(Low=%.1f°C,<sp/>High=%.1f°C)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_config_.low_threshold_celsius,<sp/>esp_config_.high_threshold_celsius);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a4e1ee5a920aa4caaa151d036b79db369" kindref="member">EspTemperature::DisableThresholdMonitoring</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a88f1b850e2b1a619dd9e87a246c26eda" kindref="member">threshold_monitoring_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a744b9f72ba155602c86667c63d9a329b" kindref="member">threshold_monitoring_enabled</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1af98b41d1d3d44f8f1fe71878d2ecc7bb" kindref="member">threshold_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ac6dc56a81910c0c1d02c32119f0afd05" kindref="member">esp_threshold_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a64679e2522454245be7bdba622ef8176" kindref="member">threshold_user_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Threshold<sp/>monitoring<sp/>disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1acc1ea9c3a109b70bd67e4f285594e474" kindref="member">EspTemperature::StartContinuousMonitoring</ref>(<ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>sample_rate_hz,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1ab15b84e22c00839c9e87a3f363efae2d" kindref="member">hf_temp_reading_callback_t</ref><sp/>callback,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>),</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_state_.continuous_monitoring_active)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Continuous<sp/>monitoring<sp/>already<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a96ffff71b90aab517b73237f5b01c96d" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_STATE</ref>),</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a96ffff71b90aab517b73237f5b01c96d" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_STATE</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample_rate_hz<sp/>&lt;<sp/><ref refid="EspTemperature_8h_1ab7d0555dc63c9090f037da132c71e6b7" kindref="member">ESP_TEMP_MIN_SAMPLE_RATE_HZ</ref><sp/>||</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample_rate_hz<sp/>&gt;<sp/><ref refid="EspTemperature_8h_1a51cf3c509711d13cab01f3c88045bae8" kindref="member">ESP_TEMP_MAX_SAMPLE_RATE_HZ</ref>)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>sample<sp/>rate:<sp/>%u<sp/>Hz<sp/>(valid<sp/>range:<sp/>%d-%d<sp/>Hz)&quot;</highlight><highlight class="normal">,<sp/>sample_rate_hz,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTemperature_8h_1ab7d0555dc63c9090f037da132c71e6b7" kindref="member">ESP_TEMP_MIN_SAMPLE_RATE_HZ</ref>,<sp/><ref refid="EspTemperature_8h_1a51cf3c509711d13cab01f3c88045bae8" kindref="member">ESP_TEMP_MAX_SAMPLE_RATE_HZ</ref>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a22208340a51baa9dd55f6178417f1344" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_PARAMETER</ref>),</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a22208340a51baa9dd55f6178417f1344" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>callback<sp/>and<sp/>user<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>monitoring_callback_<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>monitoring_user_data_<sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>esp_state_.sample_rate_hz<sp/>=<sp/>sample_rate_hz;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>timer<sp/>for<sp/>continuous<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>esp_timer_create_args_t<sp/>timer_args<sp/>=<sp/>{.callback<sp/>=<sp/>MonitoringTimerCallback,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arg<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dispatch_method<sp/>=<sp/>ESP_TIMER_TASK,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;temp_monitor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.skip_unhandled_events<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>esp_timer_create(&amp;timer_args,<sp/>&amp;esp_state_.monitoring_timer);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>monitoring<sp/>timer:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(ConvertEspError(esp_err)),<sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/>period_us<sp/>=<sp/>1000000ULL<sp/>/<sp/>sample_rate_hz;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>esp_err<sp/>=<sp/>esp_timer_start_periodic(esp_state_.monitoring_timer,<sp/>period_us);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>start<sp/>monitoring<sp/>timer:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_timer_delete(esp_state_.monitoring_timer);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_state_.monitoring_timer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(ConvertEspError(esp_err)),<sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>esp_state_.continuous_monitoring_active<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>diagnostics_.continuous_monitoring_active<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Continuous<sp/>monitoring<sp/>started<sp/>at<sp/>%u<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>sample_rate_hz);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1aa34b741f4daf7a52dc832e65dc58e34f" kindref="member">EspTemperature::StopContinuousMonitoring</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a2a7e449e9494d084491b6a02682a407c" kindref="member">continuous_monitoring_active</ref>)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Continuous<sp/>monitoring<sp/>not<sp/>active&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>and<sp/>delete<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>esp_timer_stop(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK<sp/>&amp;&amp;<sp/>esp_err<sp/>!=<sp/>ESP_ERR_INVALID_STATE)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>stop<sp/>monitoring<sp/>timer:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err<sp/>=<sp/>esp_timer_delete(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>delete<sp/>monitoring<sp/>timer:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ad9f8009a7018aa3365717afffdd4839c" kindref="member">monitoring_timer</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>monitoring<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a2a7e449e9494d084491b6a02682a407c" kindref="member">continuous_monitoring_active</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a7fee07809400edb66e2070c976262c44" kindref="member">continuous_monitoring_active</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1af516eb1e27cb63a70b6517752f1323fd" kindref="member">monitoring_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1adba4d867f07dbbe733e55c16a3f05637" kindref="member">esp_monitoring_callback_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a8fe2e9d176f71696e4fb12afbcd25bc8" kindref="member">monitoring_user_data_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Continuous<sp/>monitoring<sp/>stopped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/>result<sp/>=<sp/>success<sp/>?<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref><sp/>:<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a45c5f714c0d9068aa9be0955b60be332" kindref="member">hf_temp_err_t::TEMP_ERR_FAILURE</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(result),<sp/>result;</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1abd650022450dbbcbba8fed4085386da3" kindref="member">EspTemperature::IsMonitoringActive</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a2a7e449e9494d084491b6a02682a407c" kindref="member">continuous_monitoring_active</ref>;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a2665b30cb4301b8fccb577f74e4fa7fc" kindref="member">EspTemperature::SetCalibrationOffset</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offset_celsius)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>offset<sp/>is<sp/>reasonable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(offset_celsius)<sp/>&gt;<sp/>20.0f)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Large<sp/>calibration<sp/>offset:<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>offset_celsius);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>esp_state_.calibration_offset<sp/>=<sp/>offset_celsius;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>esp_config_.calibration_offset<sp/>=<sp/>offset_celsius;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>statistics_.calibration_count++;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Calibration<sp/>offset<sp/>set<sp/>to<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>offset_celsius);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1ad6ee47301f32825678e5838b453bd1f1" kindref="member">EspTemperature::GetCalibrationOffset</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>offset_celsius)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>*offset_celsius<sp/>=<sp/>esp_state_.calibration_offset;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a413c8ed18407669f80b88625990619d9" kindref="member">EspTemperature::ResetCalibration</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a2665b30cb4301b8fccb577f74e4fa7fc" kindref="member">SetCalibrationOffset</ref>(0.0f);</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a9f5edd743061fbb9b4e0929f9126a04b" kindref="member">EspTemperature::EnterSleepMode</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>),</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1ae3ff4b7eb1a7c86c3c083bdc7d46ca1c" kindref="member">allow_power_down</ref>)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Power<sp/>down<sp/>not<sp/>allowed<sp/>in<sp/>current<sp/>configuration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20abed8f8c828d3e699cf803ccc24b92a44" kindref="member">hf_temp_err_t::TEMP_ERR_UNSUPPORTED_OPERATION</ref>),</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20abed8f8c828d3e699cf803ccc24b92a44" kindref="member">hf_temp_err_t::TEMP_ERR_UNSUPPORTED_OPERATION</ref>;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>temperature<sp/>sensor<sp/>for<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>temperature_sensor_disable(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a8c43679a55729c46d107804c3e0f8d91" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>temperature<sp/>sensor<sp/>for<sp/>sleep:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" kindref="member">ConvertEspError</ref>(esp_err)),<sp/><ref refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" kindref="member">ConvertEspError</ref>(esp_err);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><ref refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" kindref="member">current_state_</ref><sp/>=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12af466a6f75a85c6813cd4913d2bb01729" kindref="member">HF_TEMP_STATE_SLEEPING</ref>;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>entered<sp/>sleep<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a638b5bddaec8dc5693739fc238ad6d4d" kindref="member">EspTemperature::ExitSleepMode</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" kindref="member">current_state_</ref><sp/>!=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12af466a6f75a85c6813cd4913d2bb01729" kindref="member">HF_TEMP_STATE_SLEEPING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>not<sp/>in<sp/>sleep<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-enable<sp/>temperature<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>temperature_sensor_enable(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a8c43679a55729c46d107804c3e0f8d91" kindref="member">handle</ref>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>temperature<sp/>sensor<sp/>after<sp/>sleep:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" kindref="member">ConvertEspError</ref>(esp_err)),<sp/><ref refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" kindref="member">ConvertEspError</ref>(esp_err);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" kindref="member">current_state_</ref><sp/>=<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12ae345bd766f545d81fe3b507753f4dc7b" kindref="member">HF_TEMP_STATE_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>exited<sp/>sleep<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1ac6c685911fa0fe6bb38e1d2d8299ad2d" kindref="member">EspTemperature::IsSleeping</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" kindref="member">current_state_</ref><sp/>==<sp/><ref refid="BaseTemperature_8h_1aee8dd042d1f1740b2a23650bbe6efe12af466a6f75a85c6813cd4913d2bb01729" kindref="member">HF_TEMP_STATE_SLEEPING</ref>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1aed9e41b1f3d2c357d6ecd28728e49aa2" kindref="member">EspTemperature::SelfTest</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>init<sp/>status<sp/>under<sp/>lock,<sp/>then<sp/>release<sp/>before<sp/>nested<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Temperature<sp/>sensor<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>),</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>temperature<sp/>sensor<sp/>self-test...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>Basic<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/>error<sp/>=<sp/><ref refid="classEspTemperature_1a0357ccb31a009ae7b55ca02db5e0c58a" kindref="member">ReadTemperatureCelsiusImpl</ref>(&amp;temperature);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Self-test<sp/>failed:<sp/>Cannot<sp/>read<sp/>temperature&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20ae92123d7cb7212235c2d693dbd71654d" kindref="member">hf_temp_err_t::TEMP_ERR_HARDWARE_FAULT</ref>),</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20ae92123d7cb7212235c2d693dbd71654d" kindref="member">hf_temp_err_t::TEMP_ERR_HARDWARE_FAULT</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2:<sp/>Validate<sp/>reading<sp/>is<sp/>reasonable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temperature<sp/>&lt;<sp/>-50.0f<sp/>||<sp/>temperature<sp/>&gt;<sp/>150.0f)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Self-test<sp/>failed:<sp/>Temperature<sp/>%.2f°C<sp/>is<sp/>unreasonable&quot;</highlight><highlight class="normal">,<sp/>temperature);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20ad7a20ff19f33c133309f87533eb33b94" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_READING</ref>),</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20ad7a20ff19f33c133309f87533eb33b94" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_READING</ref>;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>3:<sp/>Multiple<sp/>readings<sp/>for<sp/>stability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temp_readings[3];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));<sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>100ms<sp/>between<sp/>readings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/><ref refid="classEspTemperature_1a0357ccb31a009ae7b55ca02db5e0c58a" kindref="member">ReadTemperatureCelsiusImpl</ref>(&amp;temp_readings[i]);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Self-test<sp/>failed:<sp/>Reading<sp/>%d<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a23f0194a2910555b32c0608ad7d86d12" kindref="member">hf_temp_err_t::TEMP_ERR_READ_FAILED</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a23f0194a2910555b32c0608ad7d86d12" kindref="member">hf_temp_err_t::TEMP_ERR_READ_FAILED</ref>;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>excessive<sp/>variation<sp/>(should<sp/>be<sp/>stable<sp/>within<sp/>5°C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp<sp/>=<sp/>*std::min_element(temp_readings,<sp/>temp_readings<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_temp<sp/>=<sp/>*std::max_element(temp_readings,<sp/>temp_readings<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((max_temp<sp/>-<sp/>min_temp)<sp/>&gt;<sp/>5.0f)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Self-test<sp/>warning:<sp/>High<sp/>temperature<sp/>variation<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>max_temp<sp/>-<sp/>min_temp);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Self-test<sp/>passed:<sp/>Temperature=%.2f°C,<sp/>Variation=%.2f°C&quot;</highlight><highlight class="normal">,<sp/>temperature,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_temp<sp/>-<sp/>min_temp);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a0715fa9a6cd6888fa147ee67b428f193" kindref="member">EspTemperature::CheckHealth</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>healthy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>initialization<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>check:<sp/>Sensor<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>healthy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>handle<sp/>validity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a8c43679a55729c46d107804c3e0f8d91" kindref="member">handle</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>check:<sp/>Invalid<sp/>handle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>healthy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>error<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a8a645c1a12d2ad97175ef7b83e8cca2e" kindref="member">consecutive_errors</ref><sp/>&gt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>check:<sp/>High<sp/>consecutive<sp/>error<sp/>count<sp/>(%u)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a8a645c1a12d2ad97175ef7b83e8cca2e" kindref="member">consecutive_errors</ref>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>healthy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>last<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspTemperature_1a02f93520cdb56054ca7853f9ced82ec9" kindref="member">last_error_</ref><sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>check:<sp/>Last<sp/>operation<sp/>failed<sp/>with<sp/>error<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspTemperature_1a02f93520cdb56054ca7853f9ced82ec9" kindref="member">last_error_</ref>));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>healthy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a32db512c61749abbdac3e7190dfbe8e2" kindref="member">sensor_healthy</ref><sp/>=<sp/>healthy;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(healthy)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>check:<sp/>Sensor<sp/>is<sp/>healthy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Health<sp/>check:<sp/>Sensor<sp/>health<sp/>issues<sp/>detected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20ae92123d7cb7212235c2d693dbd71654d" kindref="member">hf_temp_err_t::TEMP_ERR_HARDWARE_FAULT</ref>;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1af467995c9463449686b77f02be223fa9" kindref="member">EspTemperature::GetStatistics</ref>(<ref refid="structhf__temp__statistics__t" kindref="compound">hf_temp_statistics_t</ref>&amp;<sp/>statistics)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>statistics<sp/>=<sp/>statistics_;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1af91cca81090fa226453fc793f5305ec6" kindref="member">EspTemperature::GetDiagnostics</ref>(<ref refid="structhf__temp__diagnostics__t" kindref="compound">hf_temp_diagnostics_t</ref>&amp;<sp/>diagnostics)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>current<sp/>diagnostics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>diagnostics_.sensor_available<sp/>=<sp/>(esp_state_.handle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>diagnostics_.current_temperature_raw<sp/>=</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(esp_state_.last_temperature_celsius<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>diagnostics_.calibration_valid<sp/>=<sp/>(std::abs(esp_state_.calibration_offset)<sp/>&lt;<sp/>50.0f);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>diagnostics<sp/>=<sp/>diagnostics_;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1ac22266bb32b95ed3587ce5fd6efc6c94" kindref="member">EspTemperature::ResetStatistics</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>lock<sp/>if<sp/>called<sp/>inside<sp/>other<sp/>locked<sp/>code<sp/>paths;<sp/>lock<sp/>briefly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a4b7b5323acb43d653d70ed4bb9a665f9" kindref="member">statistics_</ref><sp/>=<sp/><ref refid="structhf__temp__statistics__t" kindref="compound">hf_temp_statistics_t</ref>{};</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a4b7b5323acb43d653d70ed4bb9a665f9" kindref="member">statistics_</ref>.<ref refid="structhf__temp__statistics__t_1a27981b7b9f9fdec174780f948864dd58" kindref="member">min_operation_time_us</ref><sp/>=<sp/>UINT32_MAX;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a4b7b5323acb43d653d70ed4bb9a665f9" kindref="member">statistics_</ref>.<ref refid="structhf__temp__statistics__t_1a7565696ba2cfde7e3e27550e11f26417" kindref="member">min_temperature_celsius</ref><sp/>=<sp/>1000.0f;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspTemperature_1a4b7b5323acb43d653d70ed4bb9a665f9" kindref="member">statistics_</ref>.<ref refid="structhf__temp__statistics__t_1a8c6d2152708b1464f42c731944688dfc" kindref="member">max_temperature_celsius</ref><sp/>=<sp/>-1000.0f;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Statistics<sp/>reset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1ab81713abcd8583a401154ccc7617cb4e" kindref="member">EspTemperature::ResetDiagnostics</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a4f109fb8787513ce1183f120142aca59" kindref="member">last_error_code</ref><sp/>=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1aad5ca4942fc98b8411c59df073eb4e22" kindref="member">last_error_timestamp</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a8a645c1a12d2ad97175ef7b83e8cca2e" kindref="member">consecutive_errors</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" kindref="member">diagnostics_</ref>.<ref refid="structhf__temp__diagnostics__t_1a32db512c61749abbdac3e7190dfbe8e2" kindref="member">sensor_healthy</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Diagnostics<sp/>reset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP32-C6<sp/>SPECIFIC<sp/>METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a2aa6d6cdd0f7d91c86ce759706d9f712" kindref="member">EspTemperature::InitializeEsp32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structesp__temp__config__t" kindref="compound">esp_temp_config_t</ref>&amp;<sp/>esp_config)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>esp_config_<sp/>=<sp/>esp_config;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EnsureInitialized()<sp/>?<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref><sp/>:<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a45c5f714c0d9068aa9be0955b60be332" kindref="member">hf_temp_err_t::TEMP_ERR_FAILURE</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1acd7f6f1c03014e99ddcc8816e1a666b7" kindref="member">EspTemperature::SetMeasurementRange</ref>(<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/>range)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range<sp/>&gt;=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a655981e7a53bf6a8f57231b0db07a5e6" kindref="member">ESP_TEMP_RANGE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>range:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(range));</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a22208340a51baa9dd55f6178417f1344" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_PARAMETER</ref>),</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a22208340a51baa9dd55f6178417f1344" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range<sp/>==<sp/>esp_state_.current_range)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>already<sp/>set<sp/>to<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(range));</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>initialized,<sp/>need<sp/>to<sp/>reconfigure<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initialized_<sp/>&amp;&amp;<sp/>esp_state_.handle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>temperature_sensor_disable(esp_state_.handle);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>sensor<sp/>for<sp/>range<sp/>change:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(ConvertEspError(esp_err)),<sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uninstall<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err<sp/>=<sp/>temperature_sensor_uninstall(esp_state_.handle);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>uninstall<sp/>sensor<sp/>for<sp/>range<sp/>change:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(ConvertEspError(esp_err)),<sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_state_.handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reconfigure<sp/>with<sp/>new<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_temp,<sp/>max_temp,<sp/>accuracy;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>GetRangeConfig(range,<sp/>&amp;min_temp,<sp/>&amp;max_temp,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>temperature_sensor_config_t<sp/>temp_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_config.range_min<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(min_temp);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_config.range_max<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(max_temp);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_config.clk_src<sp/>=<sp/>TEMPERATURE_SENSOR_CLK_SRC_DEFAULT;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_config.flags.allow_pd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reinstall<sp/>with<sp/>new<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err<sp/>=<sp/>temperature_sensor_install(&amp;temp_config,<sp/>&amp;esp_state_.handle);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reinstall<sp/>sensor<sp/>with<sp/>new<sp/>range:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(ConvertEspError(esp_err)),<sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-enable<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err<sp/>=<sp/>temperature_sensor_enable(esp_state_.handle);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>re-enable<sp/>sensor<sp/>after<sp/>range<sp/>change:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temperature_sensor_uninstall(esp_state_.handle);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_state_.handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(ConvertEspError(esp_err)),<sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>changed<sp/>to<sp/>%d:<sp/>%.0f°C<sp/>to<sp/>%.0f°C<sp/>(±%.1f°C)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(range),</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_temp,<sp/>max_temp,<sp/>accuracy);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>esp_state_.current_range<sp/>=<sp/>range;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>esp_config_.range<sp/>=<sp/>range;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SetLastError(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>),<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/><ref refid="classEspTemperature_1af0720d47be3e3a09691ddd3dd3a7dcc8" kindref="member">EspTemperature::GetMeasurementRange</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1aa27ed92ce9a8ac860496978b0a41f614" kindref="member">current_range</ref>;</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a4fe823e1ee4b244049da4d6275fd7376" kindref="member">EspTemperature::GetRangeInfo</ref>(<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/>range,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>min_celsius,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>max_celsius,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>accuracy_celsius)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>max_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>accuracy_celsius<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range<sp/>&gt;=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a655981e7a53bf6a8f57231b0db07a5e6" kindref="member">ESP_TEMP_RANGE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a22208340a51baa9dd55f6178417f1344" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>GetRangeConfig(range,<sp/>min_celsius,<sp/>max_celsius,<sp/>accuracy_celsius);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/><ref refid="classEspTemperature_1a0f6b25191668374e3ebe3b475884e110" kindref="member">EspTemperature::FindOptimalRange</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_celsius,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_celsius)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>range<sp/>that<sp/>covers<sp/>the<sp/>required<sp/>span<sp/>with<sp/>best<sp/>accuracy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/>best_range<sp/>=<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a655981e7a53bf6a8f57231b0db07a5e6" kindref="member">ESP_TEMP_RANGE_COUNT</ref>;<sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>initially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>best_accuracy<sp/>=<sp/>1000.0f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Very<sp/>high<sp/>value<sp/>initially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a655981e7a53bf6a8f57231b0db07a5e6" kindref="member">ESP_TEMP_RANGE_COUNT</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/>range<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>range_min,<sp/>range_max,<sp/>accuracy;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>GetRangeConfig(range,<sp/>&amp;range_min,<sp/>&amp;range_max,<sp/>&amp;accuracy);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>range<sp/>covers<sp/>the<sp/>required<sp/>span</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range_min<sp/>&lt;=<sp/>min_celsius<sp/>&amp;&amp;<sp/>range_max<sp/>&gt;=<sp/>max_celsius)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>range<sp/>works,<sp/>check<sp/>if<sp/>it<sp/>has<sp/>better<sp/>accuracy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accuracy<sp/>&lt;<sp/>best_accuracy)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_accuracy<sp/>=<sp/>accuracy;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_range<sp/>=<sp/>range;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_range;</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a495d60bf59ca709fd0f29e1f1d8498d2" kindref="member">EspTemperature::ReadRawTemperature</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>raw_value)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_value<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a4925e2ced6732e5a9abc10f1899fc545" kindref="member">hf_temp_err_t::TEMP_ERR_NULL_POINTER</ref>;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_<sp/>||<sp/>esp_state_.handle<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa85ca88e079a75de023f57c671e7c510" kindref="member">hf_temp_err_t::TEMP_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>temperature_sensor_get_celsius(esp_state_.handle,<sp/>raw_value);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal">temperature_sensor_handle_t<sp/><ref refid="classEspTemperature_1a2e11508c1cc97b8e44796d812319edeb" kindref="member">EspTemperature::GetEspHandle</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" kindref="member">mutex_</ref>);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a8c43679a55729c46d107804c3e0f8d91" kindref="member">handle</ref>;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a97fcaa3460eec5f22eafb70e6c243642" kindref="member">EspTemperature::SetEspThresholdCallback</ref>(</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTemperature_8h_1a3c15ed66b8b2a3114dceb69bfbc0bd4b" kindref="member">esp_temp_threshold_callback_t</ref><sp/>callback)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>esp_threshold_callback_<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a9b9b794154ed4bde92c25a416e01141d" kindref="member">EspTemperature::SetEspMonitoringCallback</ref>(</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTemperature_8h_1acf7521a526f974ab3bdd42de4d70aad5" kindref="member">esp_temp_monitoring_callback_t</ref><sp/>callback)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>esp_monitoring_callback_<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PRIVATE<sp/>HELPER<sp/>METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/><ref refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" kindref="member">EspTemperature::ConvertEspError</ref>(esp_err_t<sp/>esp_err)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(esp_err)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_OK:</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG:</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a22208340a51baa9dd55f6178417f1344" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_STATE:</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a96ffff71b90aab517b73237f5b01c96d" kindref="member">hf_temp_err_t::TEMP_ERR_INVALID_STATE</ref>;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_NOT_FOUND:</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aeeeef5ee8b27713362940156fa4d30d3" kindref="member">hf_temp_err_t::TEMP_ERR_SENSOR_NOT_AVAILABLE</ref>;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_NO_MEM:</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a3ef9e019fe124283bd2132c245e06477" kindref="member">hf_temp_err_t::TEMP_ERR_OUT_OF_MEMORY</ref>;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_TIMEOUT:</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20abdeadc96577b63459a969b2fcd39739f" kindref="member">hf_temp_err_t::TEMP_ERR_TIMEOUT</ref>;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_NOT_SUPPORTED:</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20abed8f8c828d3e699cf803ccc24b92a44" kindref="member">hf_temp_err_t::TEMP_ERR_UNSUPPORTED_OPERATION</ref>;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20a0a4931b8d82e7bdba7b5eae6aafa3cfe" kindref="member">hf_temp_err_t::TEMP_ERR_DRIVER_ERROR</ref>;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a575d8aef9720c553f8c718bca0c67417" kindref="member">EspTemperature::GetRangeConfig</ref>(<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref><sp/>range,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>min_celsius,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>max_celsius,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>accuracy_celsius)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range<sp/>&lt;<sp/><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a655981e7a53bf6a8f57231b0db07a5e6" kindref="member">ESP_TEMP_RANGE_COUNT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structesp__temp__range__info__t" kindref="compound">esp_temp_range_info_t</ref>&amp;<sp/>info<sp/>=<sp/>RANGE_INFO[range];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_celsius)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*min_celsius<sp/>=<sp/>info.<ref refid="structesp__temp__range__info__t_1a12e49d4f9810ae6f7434260cc9afe415" kindref="member">min_celsius</ref>;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_celsius)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*max_celsius<sp/>=<sp/>info.<ref refid="structesp__temp__range__info__t_1a5349443a46220031e93c47df9b666f09" kindref="member">max_celsius</ref>;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accuracy_celsius)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*accuracy_celsius<sp/>=<sp/>info.<ref refid="structesp__temp__range__info__t_1abc02bc5b700e204c80492068b3d8f658" kindref="member">accuracy_celsius</ref>;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>to<sp/>first<sp/>range<sp/>for<sp/>invalid<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_celsius)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*min_celsius<sp/>=<sp/>RANGE_INFO[0].min_celsius;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_celsius)</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*max_celsius<sp/>=<sp/>RANGE_INFO[0].max_celsius;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accuracy_celsius)</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*accuracy_celsius<sp/>=<sp/>RANGE_INFO[0].accuracy_celsius;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" kindref="member">EspTemperature::SetLastError</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/>error)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>last_error_<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>UpdateDiagnostics(error);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" kindref="member">EspTemperature::UpdateStatistics</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operation_successful,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>operation_time_us)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>statistics_.total_operations++;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation_successful)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.successful_operations++;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.consecutive_errors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.failed_operations++;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.consecutive_errors++;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>timing<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation_time_us<sp/>&lt;<sp/>statistics_.min_operation_time_us)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.min_operation_time_us<sp/>=<sp/>operation_time_us;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation_time_us<sp/>&gt;<sp/>statistics_.max_operation_time_us)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.max_operation_time_us<sp/>=<sp/>operation_time_us;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>average<sp/>operation<sp/>time<sp/>(simple<sp/>moving<sp/>average)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(statistics_.total_operations<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.average_operation_time_us<sp/>=<sp/>operation_time_us;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.average_operation_time_us<sp/>=</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(statistics_.average_operation_time_us<sp/>*<sp/>(statistics_.total_operations<sp/>-<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_time_us)<sp/>/</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistics_.total_operations;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1a805d97b69f14c4e13e9cb7736a45617d" kindref="member">EspTemperature::UpdateDiagnostics</ref>(<ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/>error)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.last_error_code<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.last_error_timestamp<sp/>=</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(GetCurrentTimeUs()<sp/>/<sp/>1000);<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.consecutive_errors++;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.sensor_healthy<sp/>=<sp/>(diagnostics_.consecutive_errors<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1abe6ae1ced0d8c565b722b416cb64e9ae" kindref="member">EspTemperature::MonitoringTimerCallback</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref>*<sp/>sensor<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>temperature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref><sp/>error<sp/>=<sp/>sensor-&gt;<ref refid="classEspTemperature_1a0357ccb31a009ae7b55ca02db5e0c58a" kindref="member">ReadTemperatureCelsiusImpl</ref>(&amp;temperature);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>==<sp/><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20aa9f97b2af246741135f6475e1c8f36b7" kindref="member">hf_temp_err_t::TEMP_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>base<sp/>callback<sp/>if<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;<ref refid="classEspTemperature_1af516eb1e27cb63a70b6517752f1323fd" kindref="member">monitoring_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhf__temp__reading__t" kindref="compound">hf_temp_reading_t</ref><sp/>reading<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reading.<ref refid="structhf__temp__reading__t_1ad8b20df88ef338aef1912deba6301f0a" kindref="member">temperature_celsius</ref><sp/>=<sp/>temperature;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reading.<ref refid="structhf__temp__reading__t_1ae59b1774ec745080207c403ac5d0de9a" kindref="member">temperature_raw</ref><sp/>=<sp/>temperature<sp/>-<sp/>sensor-&gt;<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1a7ea6386f0990755a7e6569081a701bfa" kindref="member">calibration_offset</ref>;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reading.<ref refid="structhf__temp__reading__t_1a20251d9e61ba4fd6ebbb94e91f711a93" kindref="member">timestamp_us</ref><sp/>=<sp/>GetCurrentTimeUs();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reading.<ref refid="structhf__temp__reading__t_1acb320967db84b0d5469f14a5ea2eb000" kindref="member">error</ref><sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reading.<ref refid="structhf__temp__reading__t_1af3f7c7d9c7bf4c1f4e9c6083ac208c18" kindref="member">is_valid</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reading.<ref refid="structhf__temp__reading__t_1a062db9093a25117638fe5ee7546c47fc" kindref="member">accuracy_celsius</ref><sp/>=<sp/>RANGE_INFO[sensor-&gt;<ref refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" kindref="member">esp_state_</ref>.<ref refid="structesp__temp__state__t_1aa27ed92ce9a8ac860496978b0a41f614" kindref="member">current_range</ref>].accuracy_celsius;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;<ref refid="classEspTemperature_1af516eb1e27cb63a70b6517752f1323fd" kindref="member">monitoring_callback_</ref>(sensor,<sp/>&amp;reading,<sp/>sensor-&gt;<ref refid="classEspTemperature_1a8fe2e9d176f71696e4fb12afbcd25bc8" kindref="member">monitoring_user_data_</ref>);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>ESP32-specific<sp/>callback<sp/>if<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;<ref refid="classEspTemperature_1adba4d867f07dbbe733e55c16a3f05637" kindref="member">esp_monitoring_callback_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;<ref refid="classEspTemperature_1adba4d867f07dbbe733e55c16a3f05637" kindref="member">esp_monitoring_callback_</ref>(sensor,<sp/>temperature,<sp/>GetCurrentTimeUs());</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspTemperature_1ac0b3dd90b074db26ee48e66748597faa" kindref="member">EspTemperature::CheckThresholds</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>threshold_violated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_high_threshold<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temperature<sp/>&lt;=<sp/>esp_config_.low_threshold_celsius)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>threshold_violated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>is_high_threshold<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Low<sp/>threshold<sp/>violated:<sp/>%.2f°C<sp/>&lt;=<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>temperature,</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_config_.low_threshold_celsius);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temperature<sp/>&gt;=<sp/>esp_config_.high_threshold_celsius)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>threshold_violated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>is_high_threshold<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;High<sp/>threshold<sp/>violated:<sp/>%.2f°C<sp/>&gt;=<sp/>%.2f°C&quot;</highlight><highlight class="normal">,<sp/>temperature,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_config_.high_threshold_celsius);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(threshold_violated)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.threshold_violations++;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>base<sp/>callback<sp/>if<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(threshold_callback_)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>threshold_type<sp/>=<sp/>is_high_threshold<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>threshold_callback_(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>temperature,<sp/>threshold_type,<sp/>threshold_user_data_);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>ESP32-specific<sp/>callback<sp/>if<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_threshold_callback_)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>esp_threshold_callback_(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>temperature,<sp/>is_high_threshold);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref><sp/><ref refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" kindref="member">EspTemperature::GetCurrentTimeUs</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#endif<sp/>//<sp/>HF_MCU_FAMILY_ESP32</highlight></codeline>
    </programlisting>
    <location file="src/mcu/esp32/EspTemperature.cpp"/>
  </compounddef>
</doxygen>
