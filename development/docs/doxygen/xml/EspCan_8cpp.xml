<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="EspCan_8cpp" kind="file" language="C++">
    <compoundname>EspCan.cpp</compoundname>
    <includes refid="EspCan_8h" local="yes">EspCan.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstring</includes>
    <includes local="yes">esp_log.h</includes>
    <includes local="yes">esp_timer.h</includes>
    <includes local="yes">freertos/FreeRTOS.h</includes>
    <includes local="yes">freertos/task.h</includes>
    <incdepgraph>
      <node id="6">
        <label>BaseCan.h</label>
        <link refid="BaseCan_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>EspCan.h</label>
        <link refid="EspCan_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>EspTypes_Base.h</label>
        <link refid="EspTypes__Base_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>utils/EspTypes_CAN.h</label>
        <link refid="EspTypes__CAN_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>McuSelect.h</label>
        <link refid="McuSelect_8h"/>
      </node>
      <node id="13">
        <label>RtosMutex.h</label>
        <link refid="RtosMutex_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/mcu/esp32/EspCan.cpp</label>
        <link refid="EspCan_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>atomic</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="21">
        <label>cstring</label>
      </node>
      <node id="22">
        <label>esp_log.h</label>
      </node>
      <node id="23">
        <label>esp_timer.h</label>
      </node>
      <node id="4">
        <label>esp_twai.h</label>
      </node>
      <node id="5">
        <label>esp_twai_onchip.h</label>
      </node>
      <node id="14">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="15">
        <label>freertos/semphr.h</label>
      </node>
      <node id="16">
        <label>freertos/task.h</label>
      </node>
      <node id="11">
        <label>functional</label>
      </node>
      <node id="9">
        <label>limits</label>
      </node>
      <node id="19">
        <label>memory</label>
      </node>
      <node id="12">
        <label>string_view</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;EspCan&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/mcu/esp32/EspCan.cpp" line="49" column="19" bodyfile="src/mcu/esp32/EspCan.cpp" bodystart="49" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ESP32 CAN (TWAI) implementation for the HardFOC system - ESP-IDF v5.5 Compatible. </para>
    </briefdescription>
    <detaileddescription>
<para>This file provides a comprehensive CAN bus implementation for the ESP32 microcontroller family using modern ESP-IDF v5.5+ TWAI node-based APIs. The implementation provides advanced features for ESP32-C6 with external SN65 transceivers.</para>
<para>Key Features Implemented:<itemizedlist>
<listitem><para>ESP-IDF v5.5+ handle-based TWAI node API</para>
</listitem><listitem><para>ESP32-C6 compatible TWAI controller support</para>
</listitem><listitem><para>Event-driven callback-based message reception</para>
</listitem><listitem><para>Advanced acceptance filtering (single/dual mask modes)</para>
</listitem><listitem><para>Comprehensive error detection and bus recovery</para>
</listitem><listitem><para>Advanced bit timing configuration for various baud rates</para>
</listitem><listitem><para>Thread-safe operations with proper resource management</para>
</listitem><listitem><para>Support for external SN65 CAN transceivers</para>
</listitem><listitem><para>Comprehensive diagnostics and performance monitoring</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="author"><para>Nebiyu Tadesse </para>
</simplesect>
<simplesect kind="date"><para>2025 </para>
</simplesect>
<simplesect kind="copyright"><para>HardFOC</para>
</simplesect>
<simplesect kind="note"><para>This implementation requires ESP-IDF v5.5 or later </para>
</simplesect>
<simplesect kind="note"><para>Requires ESP-IDF v5.5 or later for full feature support </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspCan_8h" kindref="compound">EspCan.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>standard<sp/>library<sp/>headers<sp/>(must<sp/>be<sp/>outside<sp/>extern<sp/>&quot;C&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>C<sp/>headers<sp/>must<sp/>be<sp/>wrapped<sp/>in<sp/>extern<sp/>&quot;C&quot;<sp/>for<sp/>C++<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP32-specific<sp/>includes<sp/>via<sp/>centralized<sp/>McuSelect.h<sp/>(included<sp/>in<sp/>EspCan.h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_timer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EspCan&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONSTRUCTOR<sp/>AND<sp/>DESTRUCTOR<sp/>-<sp/>ESP-IDF<sp/>v5.5<sp/>Compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classEspCan_1ad254073ec0b39870dcc3f8d29806ed3b" kindref="member">EspCan::EspCan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__esp__can__config__t" kindref="compound">hf_esp_can_config_t</ref>&amp;<sp/>config)<sp/>noexcept</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classBaseCan" kindref="compound">BaseCan</ref>(),<sp/>config_(config),<sp/>is_enabled_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>is_recovering_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>config_mutex_(),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stats_mutex_(),<sp/>callback_mutex_(),<sp/>twai_node_handle_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>receive_cb_{},</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>receive_ud_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>error_cb_{},<sp/>error_ud_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>state_cb_{},<sp/>state_ud_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tx_cb_{},<sp/>tx_ud_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>statistics_{},<sp/>diagnostics_{},<sp/>advanced_timing_{},</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_filter_{},<sp/>filter_configured_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>**LAZY<sp/>INITIALIZATION**<sp/>-<sp/>Store<sp/>configuration<sp/>but<sp/>do<sp/>NOT<sp/>initialize<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>follows<sp/>the<sp/>same<sp/>pattern<sp/>as<sp/>EspAdc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>EspCan<sp/>for<sp/>controller<sp/>%d<sp/>-<sp/>LAZY<sp/>INIT&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(config_.controller_id));</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="classEspCan_1aa842144f61a6f969b270e6d194d40f5c" kindref="member">EspCan::~EspCan</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>proper<sp/>cleanup<sp/>following<sp/>EspAdc<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspCan<sp/>destructor<sp/>called<sp/>on<sp/>initialized<sp/>instance<sp/>-<sp/>performing<sp/>cleanup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan_1a96ec0a7e2636ba9e99d651f21c4e9153" kindref="member">Deinitialize</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>callbacks<sp/>(single-callback<sp/>design)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1af0cad1fa0e4c312eebcc5d1b938876df" kindref="member">ClearReceiveCallbackEx</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a077cc96263ea79483559055841d873d6" kindref="member">ClearErrorCallback</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a86db68ed58d7c1791683151cb9a49260" kindref="member">ClearStateChangeCallback</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a335b99de3bbf289de667f843ba83d31d" kindref="member">ClearTxCompleteCallback</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspCan<sp/>controller<sp/>%d<sp/>destroyed&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INITIALIZATION<sp/>AND<sp/>CONFIGURATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a1c5fa10425f845bf9a0a2bb12db8351e" kindref="member">EspCan::Initialize</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspCan_1a6d8efbb99af9eafcfe99ea736b432edf" kindref="member">config_mutex_</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TWAI<sp/>node<sp/>%u<sp/>already<sp/>initialized&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>TWAI<sp/>node<sp/>%u&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>TWAI<sp/>node<sp/>configuration<sp/>using<sp/>ESP-IDF<sp/>v5.5<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>twai_onchip_node_config_t<sp/>node_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.io_cfg<sp/>=</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">gpio_num_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1aed2cc188cee17a17b3d1d0b1957d8629" kindref="member">tx_pin</ref>),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.rx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">gpio_num_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a7187094fce56f62b7e793ade504d3985" kindref="member">rx_pin</ref>),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.quanta_clk_out<sp/>=<sp/>GPIO_NUM_NC,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bus_off_indicator<sp/>=<sp/>GPIO_NUM_NC,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.clk_src<sp/>=<sp/>TWAI_CLK_SRC_DEFAULT,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.bit_timing<sp/>=</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bitrate<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a095fd04a22638ba466d08a0592a27eb7" kindref="member">baud_rate</ref>,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sp_permill<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a3fc23f7e02de25e15735f902fb8d9612" kindref="member">sample_point_permill</ref>),</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ssp_permill<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1aaad7a0f20c8dd9c92561ebcfda6031cb" kindref="member">secondary_sample_point</ref>),</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.data_timing<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.fail_retry_cnt<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a6c1b124297def32ddba7003f587e6c4a" kindref="member">fail_retry_cnt</ref>,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.tx_queue_depth<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1acf4da7f3d267dbcbd2fc1b01adaf12ec" kindref="member">tx_queue_depth</ref>,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.intr_priority<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a77ada3296173052baad6719e4bf1c01a" kindref="member">intr_priority</ref>,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enable_self_test<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a5779506abfcfa1e2befe143b6d80e32c" kindref="member">enable_self_test</ref>,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enable_loopback<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1aa877c45912cb57a8e245ecfec1f484ef" kindref="member">enable_loopback</ref>,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enable_listen_only<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a1d3b817788e36549ad3b491e3a5dd81d" kindref="member">enable_listen_only</ref>,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.no_receive_rtr<sp/>=<sp/><ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a3f57b97d55b34368fde640a3caf67dcd" kindref="member">no_receive_rtr</ref>,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>TWAI<sp/>node<sp/>using<sp/>ESP-IDF<sp/>v5.5<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_new_node_onchip(&amp;node_config,<sp/>&amp;<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>TWAI<sp/>node:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1ad3577fad0067aabf4ae9f2e8e338ef46" kindref="member">ConvertEspError</ref>(esp_err);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>event<sp/>callbacks<sp/>for<sp/>comprehensive<sp/>event<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>twai_event_callbacks_t<sp/>callbacks<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.on_tx_done<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.on_rx_done<sp/>=<sp/><ref refid="classEspCan_1a105e73dbb299a49c55dd044b4a30587e" kindref="member">InternalReceiveCallback</ref>,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.on_state_change<sp/>=<sp/><ref refid="classEspCan_1aa6f1d7c5c5ad82b55ae5c83076ed0013" kindref="member">InternalStateChangeCallback</ref>,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.on_error<sp/>=<sp/><ref refid="classEspCan_1a47f76d6f0c8f8e313709d7a6eadaa70f" kindref="member">InternalErrorCallback</ref>,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>esp_err<sp/>=<sp/>twai_node_register_event_callbacks(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>,<sp/>&amp;callbacks,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>register<sp/>event<sp/>callbacks:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_node_delete(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1ad3577fad0067aabf4ae9f2e8e338ef46" kindref="member">ConvertEspError</ref>(esp_err);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>TWAI<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>esp_err<sp/>=<sp/>twai_node_enable(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>enable<sp/>TWAI<sp/>node:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>twai_node_delete(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1ad3577fad0067aabf4ae9f2e8e338ef46" kindref="member">ConvertEspError</ref>(esp_err);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>statistics<sp/>(atomic<sp/>operations<sp/>-<sp/>no<sp/>mutex<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a6f392c8538addd589e6bccb3ba53e0ab" kindref="member">diagnostics_</ref><sp/>=<sp/><ref refid="structhf__can__diagnostics__t" kindref="compound">hf_can_diagnostics_t</ref>{};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a8f4ec03bb515d5543808e3c3a076621e" kindref="member">is_enabled_</ref>.store(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>base<sp/>class<sp/>initialization<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TWAI<sp/>node<sp/>%u<sp/>initialized<sp/>successfully&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a96ec0a7e2636ba9e99d651f21c4e9153" kindref="member">EspCan::Deinitialize</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspCan_1a6d8efbb99af9eafcfe99ea736b432edf" kindref="member">config_mutex_</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TWAI<sp/>node<sp/>%u<sp/>already<sp/>deinitialized&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Deinitializing<sp/>TWAI<sp/>node<sp/>%u&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1af0cad1fa0e4c312eebcc5d1b938876df" kindref="member">ClearReceiveCallbackEx</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a077cc96263ea79483559055841d873d6" kindref="member">ClearErrorCallback</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a86db68ed58d7c1791683151cb9a49260" kindref="member">ClearStateChangeCallback</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a335b99de3bbf289de667f843ba83d31d" kindref="member">ClearTxCompleteCallback</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>and<sp/>delete<sp/>TWAI<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classEspCan_1a8f4ec03bb515d5543808e3c3a076621e" kindref="member">is_enabled_</ref>.load())<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>twai_node_disable(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEspCan_1a8f4ec03bb515d5543808e3c3a076621e" kindref="member">is_enabled_</ref>.store(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_delete(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>delete<sp/>TWAI<sp/>node:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>base<sp/>class<sp/>initialization<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1acb5ae2ddfce72a30d1bd14b721f1faab" kindref="member">filter_configured_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TWAI<sp/>node<sp/>%u<sp/>deinitialized<sp/>successfully&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CORE<sp/>CAN<sp/>OPERATIONS<sp/>(From<sp/>BaseCan<sp/>interface)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a3b9bfd81e512b835c89111b6cf0ced79" kindref="member">EspCan::SendMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref>&amp;<sp/>message,<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>timeout_ms)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>frame_buffer_size<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>message<sp/>parameters<sp/>early<sp/>to<sp/>catch<sp/>corruption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.dlc<sp/>&gt;<sp/>frame_buffer_size)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>DLC:<sp/>%d<sp/>(max:<sp/>%zu)&quot;</highlight><highlight class="normal">,<sp/>message.dlc,<sp/>frame_buffer_size);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba6196406a3d4f40519e1c3e32edf09214" kindref="member">hf_can_err_t::CAN_ERR_MESSAGE_INVALID_DLC</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.dlc<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>DLC:<sp/>0<sp/>(must<sp/>be<sp/>1-8)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba6196406a3d4f40519e1c3e32edf09214" kindref="member">hf_can_err_t::CAN_ERR_MESSAGE_INVALID_DLC</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>message<sp/>details<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>message:<sp/>ID=0x%X,<sp/>DLC=%d,<sp/>Extended=%s,<sp/>RTR=%s&quot;</highlight><highlight class="normal">,<sp/>message.id,<sp/>message.dlc,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message.is_extended<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">,<sp/>message.is_rtr<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>ESP-IDF<sp/>v5.5<sp/>TWAI<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>twai_frame_t<sp/>frame;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>uint8_t<sp/>frame_buffer[frame_buffer_size]<sp/>=<sp/>{0};<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>buffer<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>frame.buffer<sp/>=<sp/>frame_buffer;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>frame.buffer_len<sp/>=<sp/>message.dlc;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>frame<sp/>header<sp/>to<sp/>zero<sp/>before<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>std::memset(&amp;frame.header,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(frame.header));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/>convert_result<sp/>=<sp/>ConvertToTwaiFrame(message,<sp/>frame);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(convert_result<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateStatistics(<ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eab93fd8b67d8341b2f91be168a6d65129" kindref="member">hf_can_operation_type_t::HF_CAN_OP_SEND</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>convert_result;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>frame<sp/>after<sp/>conversion<sp/>to<sp/>catch<sp/>corruption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frame.header.dlc<sp/>&gt;<sp/>8<sp/>||<sp/>frame.buffer<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Frame<sp/>corruption<sp/>detected!<sp/>DLC=%d,<sp/>buffer=%p&quot;</highlight><highlight class="normal">,<sp/>frame.header.dlc,<sp/>frame.buffer);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateStatistics(<ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eab93fd8b67d8341b2f91be168a6d65129" kindref="member">hf_can_operation_type_t::HF_CAN_OP_SEND</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbaa7912804d8cc7f865a2e48d027df53fc" kindref="member">hf_can_err_t::CAN_ERR_MESSAGE_INVALID</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>ESP_LOGD(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Frame<sp/>ready:<sp/>DLC=%d,<sp/>buffer=%p,<sp/>buffer_len=%zu&quot;</highlight><highlight class="normal">,<sp/>frame.header.dlc,<sp/>frame.buffer,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame.buffer_len);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>using<sp/>ESP-IDF<sp/>v5.5<sp/>TWAI<sp/>node<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_transmit(twai_node_handle_,<sp/>&amp;frame,<sp/>timeout_ms);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>(esp_err<sp/>==<sp/>ESP_OK);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>UpdateStatistics(<ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eab93fd8b67d8341b2f91be168a6d65129" kindref="member">hf_can_operation_type_t::HF_CAN_OP_SEND</ref>,<sp/>success);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CRITICAL:<sp/>Add<sp/>delay<sp/>to<sp/>prevent<sp/>ESP-IDF<sp/>driver<sp/>overload<sp/>during<sp/>rapid<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>prevents<sp/>the<sp/>frame<sp/>corruption<sp/>issue<sp/>in<sp/>high-throughput<sp/>scenarios</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(1));<sp/></highlight><highlight class="comment">//<sp/>1ms<sp/>delay<sp/>to<sp/>prevent<sp/>driver<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dispatch<sp/>TX<sp/>complete<sp/>callback<sp/>to<sp/>user<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__tx__info__t" kindref="compound">hf_esp_can_tx_info_t</ref><sp/>tx_info;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>tx_info.<ref refid="structhf__esp__can__tx__info__t_1a9adf7b89eb91027779ad3837efc71695" kindref="member">message</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>tx_info.<ref refid="structhf__esp__can__tx__info__t_1a8cc21dcb52667cae68c81c781d46a0c2" kindref="member">success</ref><sp/>=<sp/>success;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>tx_info.<ref refid="structhf__esp__can__tx__info__t_1a3c647fd808e471906496542390b24dbb" kindref="member">timestamp_us</ref><sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>DispatchTxCompleteCallbacks(tx_info);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1ad33472b071ef5f1ab76efbdb58f3c855" kindref="member">EspCan::ReceiveMessage</ref>(<ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref>&amp;<sp/>message,<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>timeout_ms)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>With<sp/>ESP-IDF<sp/>v5.5<sp/>node<sp/>API,<sp/>message<sp/>reception<sp/>is<sp/>handled<sp/>via<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>provided<sp/>for<sp/>legacy<sp/>compatibility<sp/>but<sp/>may<sp/>not<sp/>be<sp/>the<sp/>preferred<sp/>approach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>ESP_LOGW(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Polling<sp/>receive<sp/>not<sp/>recommended<sp/>with<sp/>ESP-IDF<sp/>v5.5<sp/>node<sp/>API<sp/>-<sp/>use<sp/>callbacks<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>UpdateStatistics(<ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eaaa20097e2ca23af5a4df438c7b686b71" kindref="member">hf_can_operation_type_t::HF_CAN_OP_RECEIVE</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbaebc29e4eccb8de0556d22418b14bc930" kindref="member">hf_can_err_t::CAN_ERR_UNSUPPORTED_OPERATION</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a15ded2afcc3564560fa704e661546500" kindref="member">EspCan::SetReceiveCallback</ref>(<ref refid="BaseCan_8h_1af02a5addf5896402a59198a9d8295e40" kindref="member">hf_can_receive_callback_t</ref><sp/>callback)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>ESP_LOGW(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;SetReceiveCallback<sp/>(BaseCan)<sp/>is<sp/>deprecated<sp/>-<sp/>use<sp/>SetReceiveCallbackEx<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbac6826689e9756b15d3cad7f54cb66d07" kindref="member">hf_can_err_t::CAN_ERR_NOT_SUPPORTED</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a6c7eea2a0ccea5125cafb3b26af6c5ff" kindref="member">EspCan::ClearReceiveCallback</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ClearReceiveCallback<sp/>(BaseCan)<sp/>is<sp/>deprecated<sp/>-<sp/>use<sp/>ClearReceiveCallbackEx<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SINGLE-CALLBACK<sp/>PER<sp/>EVENT<sp/>MANAGEMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1aacf7899068a281cb12144f913660aa49" kindref="member">EspCan::SetReceiveCallbackEx</ref>(<ref refid="EspCan_8h_1a0e8e52e37edef4bfc2e4f874a7df1941" kindref="member">hf_esp_can_receive_callback_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cb)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3d942a792e9ec867700d25a3805ae555" kindref="member">hf_can_err_t::CAN_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(callback_mutex_);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>receive_cb_<sp/>=<sp/>std::move(cb);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>receive_ud_<sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1af0cad1fa0e4c312eebcc5d1b938876df" kindref="member">EspCan::ClearReceiveCallbackEx</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspCan_1a5d41d6182179ebd67aad8f5d9f50b5da" kindref="member">callback_mutex_</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a033c6357046c20596ec8c70d4315da07" kindref="member">receive_cb_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2b72b11c02ef567f4e37915ad452dbf2" kindref="member">receive_ud_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1ae49c30b2a556b92b8a8dbb12d1eec148" kindref="member">EspCan::SetErrorCallback</ref>(<ref refid="EspCan_8h_1acbb56c4f56595294590c3be9410d82a0" kindref="member">hf_esp_can_error_callback_t</ref><sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cb)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3d942a792e9ec867700d25a3805ae555" kindref="member">hf_can_err_t::CAN_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(callback_mutex_);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>error_cb_<sp/>=<sp/>std::move(cb);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>error_ud_<sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a077cc96263ea79483559055841d873d6" kindref="member">EspCan::ClearErrorCallback</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspCan_1a5d41d6182179ebd67aad8f5d9f50b5da" kindref="member">callback_mutex_</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1ad310be0cce73339268d83a1c3744a970" kindref="member">error_cb_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a4df3001f2b8ab4366f0fa38ca3ec47a8" kindref="member">error_ud_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a49f3ea9b23aa9b7ffcc1a0e7ab3dfda8" kindref="member">EspCan::SetStateChangeCallback</ref>(<ref refid="EspCan_8h_1ae36d9a7ad18ade3236d00009ecb1e76c" kindref="member">hf_esp_can_state_callback_t</ref><sp/>cb,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cb)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3d942a792e9ec867700d25a3805ae555" kindref="member">hf_can_err_t::CAN_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(callback_mutex_);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>state_cb_<sp/>=<sp/>std::move(cb);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>state_ud_<sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a86db68ed58d7c1791683151cb9a49260" kindref="member">EspCan::ClearStateChangeCallback</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspCan_1a5d41d6182179ebd67aad8f5d9f50b5da" kindref="member">callback_mutex_</ref>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a0283765650c36540b4a61fee2360d196" kindref="member">state_cb_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a5d0e83f62935d29002249184cdcb5d02" kindref="member">state_ud_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a774bf708978527bf71ecee26c5075c48" kindref="member">EspCan::SetTxCompleteCallback</ref>(<ref refid="EspCan_8h_1a07391fe28e5afa137b9a93f038ae2827" kindref="member">hf_esp_can_tx_callback_t</ref><sp/>cb,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cb)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3d942a792e9ec867700d25a3805ae555" kindref="member">hf_can_err_t::CAN_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(callback_mutex_);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>tx_cb_<sp/>=<sp/>std::move(cb);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>tx_ud_<sp/>=<sp/>user_data;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a335b99de3bbf289de667f843ba83d31d" kindref="member">EspCan::ClearTxCompleteCallback</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspCan_1a5d41d6182179ebd67aad8f5d9f50b5da" kindref="member">callback_mutex_</ref>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a9b8504de99b6a2c5ef2b9a9311ff17fd" kindref="member">tx_cb_</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1ab431b6af90e985b67e4cc2d8c5fbd0b4" kindref="member">tx_ud_</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1ab663edd5afb99a7ca95a9dd206d9ce85" kindref="member">EspCan::GetStatus</ref>(<ref refid="structhf__can__status__t" kindref="compound">hf_can_status_t</ref>&amp;<sp/>status)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>TWAI<sp/>node<sp/>info<sp/>using<sp/>ESP-IDF<sp/>v5.5<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>twai_node_status_t<sp/>node_status;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>twai_node_record_t<sp/>node_record;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_get_info(twai_node_handle_,<sp/>&amp;node_status,<sp/>&amp;node_record);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>CAN<sp/>bus<sp/>status<sp/>-<sp/>match<sp/>BaseCan.h<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>status.tx_error_count<sp/>=<sp/>node_status.tx_error_count;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>status.rx_error_count<sp/>=<sp/>node_status.rx_error_count;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>status.tx_failed_count<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>directly<sp/>available<sp/>in<sp/>v5.5<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>status.rx_missed_count<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>directly<sp/>available<sp/>in<sp/>v5.5<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>state<sp/>flags<sp/>based<sp/>on<sp/>TWAI<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node_status.state)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TWAI_ERROR_BUS_OFF:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>status.bus_off<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_warning<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_passive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TWAI_ERROR_ACTIVE:</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>status.bus_off<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_warning<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_passive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TWAI_ERROR_WARNING:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>status.bus_off<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_warning<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_passive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TWAI_ERROR_PASSIVE:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>status.bus_off<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_warning<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_passive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>status.bus_off<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_warning<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>status.error_passive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a38369430ccabfe4f339052590d5e4960" kindref="member">EspCan::Reset</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(<ref refid="classEspCan_1a6d8efbb99af9eafcfe99ea736b432edf" kindref="member">config_mutex_</ref>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Resetting<sp/>TWAI<sp/>node<sp/>%u&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>statistics<sp/>(atomic<sp/>operations<sp/>-<sp/>no<sp/>mutex<sp/>needed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>all<sp/>atomic<sp/>counters<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a42a1a9acddb43243100e32cb91964040" kindref="member">messages_sent</ref>.store(0);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1acb5e2a142071e386f62468ffb3be2a78" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a7259bc7c4bcbb390d68a1f9f34c11055" kindref="member">bytes_transmitted</ref>.store(0);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a3e1c67e6d1ae31cf16f98310d9b092fa" kindref="member">bytes_received</ref>.store(0);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a6fa2a6fc5344b483c30049aacc0ce429" kindref="member">send_failures</ref>.store(0);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1ac7c444ee891d0d34e547d540d6b3a81d" kindref="member">receive_failures</ref>.store(0);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a436e292e3f594cb51b7e3e2c795c391c" kindref="member">bus_error_count</ref>.store(0);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a531fe1f8cea7bf0300c5ac0cf3d75af9" kindref="member">arbitration_lost_count</ref>.store(0);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a818f6e7eb7f728a7f0bbf882496d1307" kindref="member">tx_failed_count</ref>.store(0);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1adabf2819712bc6d5cfaf74e893c8d449" kindref="member">bus_off_events</ref>.store(0);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a48b1a2d1150d29f3ea3d2ec0caee6727" kindref="member">error_warning_events</ref>.store(0);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a89b6fd61e6c03625a7f9b0ff81139b83" kindref="member">uptime_seconds</ref>.store(0);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a80c80945f20c50cb7d9ab4b9b9e4df10" kindref="member">last_activity_timestamp</ref>.store(0);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a8c261516730e47d445d56df9049d697b" kindref="member">last_error</ref>.store(<ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1aba07602085a2ec81ecdd65f53c1ca96f" kindref="member">tx_queue_peak</ref>.store(0);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a7c64556d630c51f04a7e97d5beca155c" kindref="member">rx_queue_peak</ref>.store(0);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a2c259e2b8a42178625a2bc9ee248c91c" kindref="member">tx_queue_overflows</ref>.store(0);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a66c9eac0c22489e6c56ea266fa537857" kindref="member">rx_queue_overflows</ref>.store(0);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a6f392c8538addd589e6bccb3ba53e0ab" kindref="member">diagnostics_</ref><sp/>=<sp/><ref refid="structhf__can__diagnostics__t" kindref="compound">hf_can_diagnostics_t</ref>{};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>node<sp/>is<sp/>in<sp/>bus-off<sp/>state<sp/>before<sp/>attempting<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>twai_node_status_t<sp/>node_status;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>twai_node_record_t<sp/>node_record;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>status_err<sp/>=<sp/>twai_node_get_info(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>,<sp/>&amp;node_status,<sp/>&amp;node_record);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_err<sp/>==<sp/>ESP_OK<sp/>&amp;&amp;<sp/>node_status.state<sp/>==<sp/>TWAI_ERROR_BUS_OFF)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Node<sp/>is<sp/>in<sp/>bus-off<sp/>state,<sp/>recovery<sp/>is<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_recover(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TWAI<sp/>node<sp/>recovery<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1ad3577fad0067aabf4ae9f2e8e338ef46" kindref="member">ConvertEspError</ref>(esp_err);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TWAI<sp/>node<sp/>%u<sp/>recovered<sp/>from<sp/>bus-off<sp/>state&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Node<sp/>is<sp/>not<sp/>in<sp/>bus-off<sp/>state,<sp/>just<sp/>reset<sp/>statistics<sp/>and<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;TWAI<sp/>node<sp/>%u<sp/>reset<sp/>(statistics<sp/>cleared,<sp/>node<sp/>operational)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a10e2f318110996d269ab9b4c550aa1c7" kindref="member">EspCan::SetAcceptanceFilter</ref>(<ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref><sp/>mask,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extended)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__filter__config__t" kindref="compound">hf_esp_can_filter_config_t</ref><sp/>filter_config;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>filter_config.<ref refid="structhf__esp__can__filter__config__t_1a714c587cf6ca14b1e59d2c09403d6c82" kindref="member">id</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>filter_config.<ref refid="structhf__esp__can__filter__config__t_1a457c38e26bbd3137793f28d03856a542" kindref="member">mask</ref><sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>filter_config.<ref refid="structhf__esp__can__filter__config__t_1ab3643098ab53fb26bc1ec66cd1c27ad0" kindref="member">is_extended</ref><sp/>=<sp/>extended;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>filter_config.<ref refid="structhf__esp__can__filter__config__t_1abe6a19952410570b8be6ccdb2e2daf39" kindref="member">is_dual_filter</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConfigureAdvancedFilter(filter_config);</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a8afcf00583c55f120bce0bdcd440cd29" kindref="member">EspCan::ClearAcceptanceFilter</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>filter<sp/>to<sp/>accept<sp/>all<sp/>messages<sp/>(ID=0,<sp/>Mask=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a10e2f318110996d269ab9b4c550aa1c7" kindref="member">SetAcceptanceFilter</ref>(0,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STATISTICS<sp/>AND<sp/>DIAGNOSTICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a0b3a9a316c7fc7949d481de6f6ac9856" kindref="member">EspCan::GetStatistics</ref>(<ref refid="structhf__can__statistics__t" kindref="compound">hf_can_statistics_t</ref>&amp;<sp/>stats)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>atomic<sp/>values<sp/>to<sp/>non-atomic<sp/>structure<sp/>for<sp/>return<sp/>(atomic<sp/>operations<sp/>are<sp/>thread-safe)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>stats.messages_sent<sp/>=<sp/>statistics_.messages_sent.load();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>stats.messages_received<sp/>=<sp/>statistics_.messages_received.load();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>stats.bytes_transmitted<sp/>=<sp/>statistics_.bytes_transmitted.load();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>stats.bytes_received<sp/>=<sp/>statistics_.bytes_received.load();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>stats.send_failures<sp/>=<sp/>statistics_.send_failures.load();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>stats.receive_failures<sp/>=<sp/>statistics_.receive_failures.load();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>stats.bus_error_count<sp/>=<sp/>statistics_.bus_error_count.load();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>stats.arbitration_lost_count<sp/>=<sp/>statistics_.arbitration_lost_count.load();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>stats.tx_failed_count<sp/>=<sp/>statistics_.tx_failed_count.load();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>stats.bus_off_events<sp/>=<sp/>statistics_.bus_off_events.load();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>stats.error_warning_events<sp/>=<sp/>statistics_.error_warning_events.load();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>stats.uptime_seconds<sp/>=<sp/>statistics_.uptime_seconds.load();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>stats.last_activity_timestamp<sp/>=<sp/>statistics_.last_activity_timestamp.load();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>stats.last_error<sp/>=<sp/>statistics_.last_error.load();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>stats.tx_queue_peak<sp/>=<sp/>statistics_.tx_queue_peak.load();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>stats.rx_queue_peak<sp/>=<sp/>statistics_.rx_queue_peak.load();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>stats.tx_queue_overflows<sp/>=<sp/>statistics_.tx_queue_overflows.load();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>stats.rx_queue_overflows<sp/>=<sp/>statistics_.rx_queue_overflows.load();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a93f9301c2a7c54c29f4c115e41bd1c4e" kindref="member">EspCan::ResetStatistics</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>all<sp/>atomic<sp/>counters<sp/>to<sp/>zero<sp/>(atomic<sp/>operations<sp/>are<sp/>thread-safe)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a42a1a9acddb43243100e32cb91964040" kindref="member">messages_sent</ref>.store(0);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1acb5e2a142071e386f62468ffb3be2a78" kindref="member">messages_received</ref>.store(0);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a7259bc7c4bcbb390d68a1f9f34c11055" kindref="member">bytes_transmitted</ref>.store(0);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a3e1c67e6d1ae31cf16f98310d9b092fa" kindref="member">bytes_received</ref>.store(0);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a6fa2a6fc5344b483c30049aacc0ce429" kindref="member">send_failures</ref>.store(0);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1ac7c444ee891d0d34e547d540d6b3a81d" kindref="member">receive_failures</ref>.store(0);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a436e292e3f594cb51b7e3e2c795c391c" kindref="member">bus_error_count</ref>.store(0);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a531fe1f8cea7bf0300c5ac0cf3d75af9" kindref="member">arbitration_lost_count</ref>.store(0);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a818f6e7eb7f728a7f0bbf882496d1307" kindref="member">tx_failed_count</ref>.store(0);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1adabf2819712bc6d5cfaf74e893c8d449" kindref="member">bus_off_events</ref>.store(0);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a48b1a2d1150d29f3ea3d2ec0caee6727" kindref="member">error_warning_events</ref>.store(0);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a89b6fd61e6c03625a7f9b0ff81139b83" kindref="member">uptime_seconds</ref>.store(0);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a80c80945f20c50cb7d9ab4b9b9e4df10" kindref="member">last_activity_timestamp</ref>.store(0);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a8c261516730e47d445d56df9049d697b" kindref="member">last_error</ref>.store(<ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1aba07602085a2ec81ecdd65f53c1ca96f" kindref="member">tx_queue_peak</ref>.store(0);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a7c64556d630c51f04a7e97d5beca155c" kindref="member">rx_queue_peak</ref>.store(0);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a2c259e2b8a42178625a2bc9ee248c91c" kindref="member">tx_queue_overflows</ref>.store(0);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a2598cfa17215039375d57ff8a0682873" kindref="member">statistics_</ref>.<ref refid="structhf__can__statistics__t_1a66c9eac0c22489e6c56ea266fa537857" kindref="member">rx_queue_overflows</ref>.store(0);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a56b08aacb4bdb4c440067e319593c013" kindref="member">EspCan::GetDiagnostics</ref>(<ref refid="structhf__can__diagnostics__t" kindref="compound">hf_can_diagnostics_t</ref>&amp;<sp/>diagnostics)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>mutex<sp/>needed<sp/>-<sp/>diagnostics<sp/>are<sp/>not<sp/>updated<sp/>from<sp/>ISR<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>diagnostics<sp/>with<sp/>current<sp/>TWAI<sp/>node<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>twai_node_status_t<sp/>node_status;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>twai_node_record_t<sp/>node_record;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_get_info(twai_node_handle_,<sp/>&amp;node_status,<sp/>&amp;node_record);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>==<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.tx_error_count<sp/>=<sp/>node_status.tx_error_count;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.rx_error_count<sp/>=<sp/>node_status.rx_error_count;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>diagnostics_.last_error_timestamp<sp/>=<sp/>esp_timer_get_time()<sp/>/<sp/>1000;<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>milliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>diagnostics<sp/>=<sp/>diagnostics_;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>v5.5<sp/>SPECIFIC<sp/>ADVANCED<sp/>FEATURES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a2b68a7ae3dfcda3bb81766a9b333c7fd" kindref="member">EspCan::ConfigureAdvancedTiming</ref>(</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__esp__can__timing__config__t" kindref="compound">hf_esp_can_timing_config_t</ref>&amp;<sp/>timing_config)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(config_mutex_);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>v5.5<sp/>requires<sp/>node<sp/>to<sp/>be<sp/>stopped<sp/>for<sp/>timing<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>was_enabled<sp/>=<sp/>is_enabled_.load();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_enabled)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>disable_err<sp/>=<sp/>twai_node_disable(twai_node_handle_);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disable_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>node<sp/>for<sp/>timing<sp/>config:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(disable_err));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(disable_err);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_.store(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>advanced<sp/>timing<sp/>for<sp/>improved<sp/>signal<sp/>quality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>twai_timing_config_t<sp/>esp_timing_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.clk_src<sp/>=<sp/>TWAI_CLK_SRC_DEFAULT,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.quanta_resolution_hz<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.brp<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(timing_config.brp),</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.prop_seg<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(timing_config.prop_seg),</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.tseg_1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(timing_config.tseg_1),</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.tseg_2<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(timing_config.tseg_2),</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.sjw<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(timing_config.sjw),</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.ssp_offset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(timing_config.ssp_offset),</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.triple_sampling<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_reconfig_timing(twai_node_handle_,<sp/>&amp;esp_timing_config,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-enable<sp/>node<sp/>if<sp/>it<sp/>was<sp/>enabled<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_enabled)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>enable_err<sp/>=<sp/>twai_node_enable(twai_node_handle_);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>re-enable<sp/>node<sp/>after<sp/>timing<sp/>config:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_to_name(enable_err));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(enable_err);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_.store(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>advanced<sp/>timing:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>advanced_timing_<sp/>=<sp/>timing_config;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Advanced<sp/>timing<sp/>configured<sp/>for<sp/>TWAI<sp/>node<sp/>%u&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(config_.controller_id));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a2dceac78571417483299cfc7360e4cda" kindref="member">EspCan::ConfigureAdvancedFilter</ref>(</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__esp__can__filter__config__t" kindref="compound">hf_esp_can_filter_config_t</ref>&amp;<sp/>filter_config)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><ref refid="classRtosUniqueLock" kindref="compound">MutexLockGuard</ref><sp/>lock(config_mutex_);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>v5.5<sp/>requires<sp/>node<sp/>to<sp/>be<sp/>stopped<sp/>for<sp/>filter<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>was_enabled<sp/>=<sp/>is_enabled_.load();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_enabled)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>disable_err<sp/>=<sp/>twai_node_disable(twai_node_handle_);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disable_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>disable<sp/>node<sp/>for<sp/>filter<sp/>config:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(disable_err));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(disable_err);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_.store(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>twai_mask_filter_config_t<sp/>mask_filter;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_config.is_dual_filter)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>dual<sp/>filter<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>mask_filter<sp/>=<sp/>twai_make_dual_filter(filter_config.id,<sp/>filter_config.mask,<sp/>filter_config.id2,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter_config.mask2,<sp/>filter_config.is_extended);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>single<sp/>filter<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>mask_filter.id<sp/>=<sp/>filter_config.id;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>mask_filter.mask<sp/>=<sp/>filter_config.mask;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>mask_filter.is_ext<sp/>=<sp/>filter_config.is_extended;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_config_mask_filter(twai_node_handle_,<sp/>0,<sp/>&amp;mask_filter);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-enable<sp/>node<sp/>if<sp/>it<sp/>was<sp/>enabled<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_enabled)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>enable_err<sp/>=<sp/>twai_node_enable(twai_node_handle_);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>re-enable<sp/>node<sp/>after<sp/>filter<sp/>config:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_to_name(enable_err));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(enable_err);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>is_enabled_.store(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>configure<sp/>filter:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>current_filter_<sp/>=<sp/>filter_config;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>filter_configured_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Filter<sp/>configured<sp/>for<sp/>TWAI<sp/>node<sp/>%u<sp/>(ID:<sp/>0x%X,<sp/>Mask:<sp/>0x%X,<sp/>Extended:<sp/>%s,<sp/>Dual:<sp/>%s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(config_.controller_id),<sp/>filter_config.id,<sp/>filter_config.mask,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter_config.is_extended<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">,<sp/>filter_config.is_dual_filter<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a5e051944e810526770cc8533ec28e7cf" kindref="member">EspCan::InitiateBusRecovery</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classBaseCan_1a664e24b04c3fd40328b75b9850fef57f" kindref="member">initialized_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Initiating<sp/>bus<sp/>recovery<sp/>for<sp/>TWAI<sp/>node<sp/>%u&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>node<sp/>is<sp/>in<sp/>bus-off<sp/>state<sp/>before<sp/>attempting<sp/>recovery</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>twai_node_status_t<sp/>node_status;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>twai_node_record_t<sp/>node_record;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>status_err<sp/>=<sp/>twai_node_get_info(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>,<sp/>&amp;node_status,<sp/>&amp;node_record);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>node<sp/>status<sp/>for<sp/>recovery:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(status_err));</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1ad3577fad0067aabf4ae9f2e8e338ef46" kindref="member">ConvertEspError</ref>(status_err);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_status.state<sp/>!=<sp/>TWAI_ERROR_BUS_OFF)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>is<sp/>not<sp/>in<sp/>bus-off<sp/>state<sp/>(current:<sp/>%d),<sp/>recovery<sp/>not<sp/>needed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_status.state);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>an<sp/>error,<sp/>just<sp/>not<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="classEspCan_1a9268e3542c090d15173658df7154e683" kindref="member">is_recovering_</ref>.store(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_recover(<ref refid="classEspCan_1a836c7bd0fe611a5d232929a3c21b3995" kindref="member">twai_node_handle_</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspCan_1a9268e3542c090d15173658df7154e683" kindref="member">is_recovering_</ref>.store(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initiate<sp/>bus<sp/>recovery:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(esp_err));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1ad3577fad0067aabf4ae9f2e8e338ef46" kindref="member">ConvertEspError</ref>(esp_err);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>recovery<sp/>initiated<sp/>successfully<sp/>for<sp/>TWAI<sp/>node<sp/>%u&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classEspCan_1a6de43eb14969d0a0e67e287d5a24fb81" kindref="member">config_</ref>.<ref refid="structhf__esp__can__config__t_1a4ea9cefcad04713b957442a2c93186de" kindref="member">controller_id</ref>));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1aae5b5879e2700aad137e516be9edf1b7" kindref="member">EspCan::GetNodeInfo</ref>(twai_node_record_t&amp;<sp/>node_info)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3f12a9728c316c44f7de6363cc7957a7" kindref="member">hf_can_err_t::CAN_ERR_NOT_INITIALIZED</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>both<sp/>status<sp/>and<sp/>record<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>twai_node_status_t<sp/>node_status;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>esp_err<sp/>=<sp/>twai_node_get_info(twai_node_handle_,<sp/>&amp;node_status,<sp/>&amp;node_info);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConvertEspError(esp_err);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">uint32_t<sp/><ref refid="classEspCan_1a1c80557f426bd1c1b78cd0a7e0bbb8ee" kindref="member">EspCan::SendMessageBatch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref>*<sp/>messages,<sp/>uint32_t<sp/>count,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timeout_ms)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!messages<sp/>||<sp/>count<sp/>==<sp/>0<sp/>||<sp/>!initialized_)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sent_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SendMessage(messages[i],<sp/>timeout_ms)<sp/>==<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sent_count++;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>between<sp/>messages<sp/>(reduced<sp/>since<sp/>SendMessage<sp/>now<sp/>has<sp/>its<sp/>own<sp/>delay)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(2));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>on<sp/>first<sp/>failure<sp/>to<sp/>maintain<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sent_count;</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>EVENT<sp/>CALLBACKS<sp/>(ESP-IDF<sp/>v5.5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a105e73dbb299a49c55dd044b4a30587e" kindref="member">EspCan::InternalReceiveCallback</ref>(twai_node_handle_t<sp/>handle,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_rx_done_event_data_t*<sp/>event_data,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_ctx)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref>*<sp/>esp_can<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classEspCan" kindref="compound">EspCan</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(user_ctx);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_can)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>v5.5:<sp/>RX<sp/>callback<sp/>is<sp/>just<sp/>a<sp/>notification<sp/>that<sp/>a<sp/>message<sp/>was<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>actual<sp/>message<sp/>retrieval<sp/>should<sp/>be<sp/>done<sp/>via<sp/>polling<sp/>or<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now,<sp/>we&apos;ll<sp/>use<sp/>a<sp/>simple<sp/>approach:<sp/>try<sp/>to<sp/>receive<sp/>the<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>receive<sp/>message<sp/>from<sp/>the<sp/>RX<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>uint8_t<sp/>recv_buffer[8];</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>twai_frame_t<sp/>rx_frame<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.header<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.buffer<sp/>=<sp/>recv_buffer,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.buffer_len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(recv_buffer),</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>non-blocking<sp/>receive<sp/>from<sp/>ISR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>recv_result<sp/>=<sp/>twai_node_receive_from_isr(handle,<sp/>&amp;rx_frame);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recv_result<sp/>==<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>successfully<sp/>received<sp/>-<sp/>process<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_can-&gt;<ref refid="classEspCan_1a5c0fe05680907d926d0bacdc6cebd811" kindref="member">ProcessReceivedMessage</ref>(rx_frame);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_can-&gt;<ref refid="classEspCan_1aac77cb4d9af633288fd60fad3fee474b" kindref="member">UpdateStatistics</ref>(<ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eaaa20097e2ca23af5a4df438c7b686b71" kindref="member">hf_can_operation_type_t::HF_CAN_OP_RECEIVE</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recv_result<sp/>==<sp/>ESP_ERR_NOT_FOUND)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>message<sp/>available<sp/>-<sp/>this<sp/>can<sp/>happen<sp/>if<sp/>callback<sp/>was<sp/>triggered<sp/>but<sp/>message<sp/>was<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>processed<sp/>This<sp/>is<sp/>normal<sp/>behavior,<sp/>don&apos;t<sp/>count<sp/>as<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Actual<sp/>error<sp/>occurred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_can-&gt;<ref refid="classEspCan_1aac77cb4d9af633288fd60fad3fee474b" kindref="member">UpdateStatistics</ref>(<ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eaaa20097e2ca23af5a4df438c7b686b71" kindref="member">hf_can_operation_type_t::HF_CAN_OP_RECEIVE</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>yield<sp/>to<sp/>higher<sp/>priority<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a47f76d6f0c8f8e313709d7a6eadaa70f" kindref="member">EspCan::InternalErrorCallback</ref>(twai_node_handle_t<sp/>handle,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_error_event_data_t*<sp/>event_data,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_ctx)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref>*<sp/>esp_can<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classEspCan" kindref="compound">EspCan</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(user_ctx);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_can<sp/>||<sp/>!event_data)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>error<sp/>statistics<sp/>using<sp/>atomic<sp/>operations<sp/>(ISR-safe)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>esp_can-&gt;<ref refid="classEspCan_1a8fff536c8eae7799252dc4341bad7ba3" kindref="member">UpdateErrorStatistics</ref>(event_data-&gt;err_flags.val);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>No<sp/>logging<sp/>in<sp/>ISR<sp/>context<sp/>-<sp/>ESP_LOGW<sp/>uses<sp/>mutex<sp/>locks<sp/>which<sp/>are<sp/>not<sp/>ISR-safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1aa6f1d7c5c5ad82b55ae5c83076ed0013" kindref="member">EspCan::InternalStateChangeCallback</ref>(twai_node_handle_t<sp/>handle,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_state_change_event_data_t*<sp/>event_data,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_ctx)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><ref refid="classEspCan" kindref="compound">EspCan</ref>*<sp/>esp_can<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classEspCan" kindref="compound">EspCan</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(user_ctx);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_can<sp/>||<sp/>!event_data)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>No<sp/>logging<sp/>in<sp/>ISR<sp/>context<sp/>-<sp/>ESP_LOGI<sp/>uses<sp/>mutex<sp/>locks<sp/>which<sp/>are<sp/>not<sp/>ISR-safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>bus<sp/>recovery<sp/>completion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_can-&gt;<ref refid="classEspCan_1a9268e3542c090d15173658df7154e683" kindref="member">is_recovering_</ref>.load())<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_can-&gt;<ref refid="classEspCan_1a9268e3542c090d15173658df7154e683" kindref="member">is_recovering_</ref>.store(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>No<sp/>logging<sp/>in<sp/>ISR<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>state<sp/>change<sp/>info<sp/>and<sp/>dispatch<sp/>to<sp/>user<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__state__info__t" kindref="compound">hf_esp_can_state_info_t</ref><sp/>state_info;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>state_info.<ref refid="structhf__esp__can__state__info__t_1a6b249242fbf5f87041125dabef3ea042" kindref="member">previous_state</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Would<sp/>need<sp/>actual<sp/>previous<sp/>state<sp/>from<sp/>ESP-IDF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>state_info.<ref refid="structhf__esp__can__state__info__t_1ab61756d0ff06c7f29da86ea07842b723" kindref="member">current_state</ref><sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Would<sp/>need<sp/>actual<sp/>current<sp/>state<sp/>from<sp/>ESP-IDF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>state_info.<ref refid="structhf__esp__can__state__info__t_1af6ed3c280a8db31559bc2ebbeff3cfe4" kindref="member">timestamp_us</ref><sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>esp_can-&gt;<ref refid="classEspCan_1abead43013dd161753d56006157679fe0" kindref="member">DispatchStateChangeCallbacks</ref>(state_info);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>HELPER<sp/>METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1ae27d8b7560c7ce88f8a927dd2df94836" kindref="member">EspCan::ConvertToTwaiFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref>&amp;<sp/>hf_message,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twai_frame_t&amp;<sp/>twai_frame)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hf_message.dlc<sp/>&gt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba6196406a3d4f40519e1c3e32edf09214" kindref="member">hf_can_err_t::CAN_ERR_MESSAGE_INVALID_DLC</ref>;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>buffer<sp/>is<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!twai_frame.buffer)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba6196406a3d4f40519e1c3e32edf09214" kindref="member">hf_can_err_t::CAN_ERR_MESSAGE_INVALID_DLC</ref>;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>header<sp/>fields<sp/>directly<sp/>(frame.header<sp/>already<sp/>cleared<sp/>in<sp/>SendMessage)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>twai_frame.header.id<sp/>=<sp/>hf_message.id;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>twai_frame.header.ide<sp/>=<sp/>hf_message.is_extended;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>twai_frame.header.rtr<sp/>=<sp/>hf_message.is_rtr;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>twai_frame.header.dlc<sp/>=<sp/>hf_message.dlc;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>data<sp/>if<sp/>not<sp/>a<sp/>remote<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hf_message.is_rtr<sp/>&amp;&amp;<sp/>hf_message.dlc<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>twai_frame.buffer)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(twai_frame.buffer,<sp/>hf_message.data,<sp/>hf_message.dlc);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1a1b91c8ad9fd014b9eba4417e7abbbb1d" kindref="member">EspCan::ConvertFromTwaiFrame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_frame_t&amp;<sp/>twai_frame,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref>&amp;<sp/>hf_message)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>hf_message<sp/>=<sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref>{};</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>header<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>hf_message.<ref refid="structhf__can__message__t_1a0b85c579dd4bb8ad383e91510ef5e1f4" kindref="member">id</ref><sp/>=<sp/>twai_frame.header.id;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>hf_message.is_extended<sp/>=<sp/>twai_frame.header.ide;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>hf_message.is_rtr<sp/>=<sp/>twai_frame.header.rtr;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>hf_message.dlc<sp/>=<sp/>twai_frame.header.dlc;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>hf_message.timestamp_us<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>data<sp/>if<sp/>not<sp/>a<sp/>remote<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hf_message.is_rtr<sp/>&amp;&amp;<sp/>hf_message.dlc<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(hf_message.data,<sp/>twai_frame.buffer,<sp/>hf_message.dlc);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fb" kindref="member">hf_can_err_t</ref><sp/><ref refid="classEspCan_1ad3577fad0067aabf4ae9f2e8e338ef46" kindref="member">EspCan::ConvertEspError</ref>(esp_err_t<sp/>esp_err)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(esp_err)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_OK:</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_ARG:</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3d942a792e9ec867700d25a3805ae555" kindref="member">hf_can_err_t::CAN_ERR_INVALID_PARAMETER</ref>;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_INVALID_STATE:</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba1bac95997e2f1243cf647869f525689d" kindref="member">hf_can_err_t::CAN_ERR_INVALID_STATE</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_TIMEOUT:</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbab30b27c8b246285d16ab4ad4b846e3bd" kindref="member">hf_can_err_t::CAN_ERR_MESSAGE_TIMEOUT</ref>;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_NO_MEM:</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba3c2304de516bd8825e822b58eb9084a7" kindref="member">hf_can_err_t::CAN_ERR_OUT_OF_MEMORY</ref>;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_ERR_NOT_FOUND:</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba4424e545e4ce03c51dea8cd4d446bce7" kindref="member">hf_can_err_t::CAN_ERR_DEVICE_NOT_RESPONDING</ref>;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ESP_FAIL:</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbaf295d95a127a17137b8f0ed316ff485b" kindref="member">hf_can_err_t::CAN_ERR_FAILURE</ref>;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fba996eb680a753eed021002fd5293d1eda" kindref="member">hf_can_err_t::CAN_ERR_SYSTEM_ERROR</ref>;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1aac77cb4d9af633288fd60fad3fee474b" kindref="member">EspCan::UpdateStatistics</ref>(<ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070e" kindref="member">hf_can_operation_type_t</ref><sp/>operation_type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>mutex<sp/>lock<sp/>needed<sp/>-<sp/>using<sp/>atomic<sp/>operations<sp/>for<sp/>ISR<sp/>safety</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(operation_type)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eab93fd8b67d8341b2f91be168a6d65129" kindref="member">hf_can_operation_type_t::HF_CAN_OP_SEND</ref>:</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>statistics_.messages_sent.fetch_add(1);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>statistics_.send_failures.fetch_add(1);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="EspTypes__CAN_8h_1a894b6951598567b73bc3ef3ae747070eaaa20097e2ca23af5a4df438c7b686b71" kindref="member">hf_can_operation_type_t::HF_CAN_OP_RECEIVE</ref>:</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>statistics_.messages_received.fetch_add(1);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>statistics_.receive_failures.fetch_add(1);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>statistics_.last_activity_timestamp.store(esp_timer_get_time()<sp/>/<sp/>1000);<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>milliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ENHANCED<sp/>CALLBACK<sp/>DISPATCH<sp/>METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//==============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a5c0fe05680907d926d0bacdc6cebd811" kindref="member">EspCan::ProcessReceivedMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_frame_t&amp;<sp/>frame)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dispatch<sp/>to<sp/>callback<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>DispatchReceiveCallbacks(frame);</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1aea03a2e1e72fe5e104c150e71f988083" kindref="member">EspCan::DispatchReceiveCallbacks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>twai_frame_t&amp;<sp/>frame)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>HF<sp/>message<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><ref refid="structhf__can__message__t" kindref="compound">hf_can_message_t</ref><sp/>hf_message;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ConvertFromTwaiFrame(frame,<sp/>hf_message)<sp/>!=<sp/><ref refid="BaseCan_8h_1aa9d5ead384ce9ec0dd791bcdc73589fbae831b317d8b789b7b3d679d89c7d045a" kindref="member">hf_can_err_t::CAN_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="EspCan_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>TWAI<sp/>frame<sp/>to<sp/>HF<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(receive_cb_)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>receive_cb_(hf_message,<sp/>receive_ud_);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a67fa247f0a5f007b0cb20e405ed1ed0c" kindref="member">EspCan::DispatchErrorCallbacks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__esp__can__error__info__t" kindref="compound">hf_esp_can_error_info_t</ref>&amp;<sp/>error_info)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error_cb_)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>error_cb_(error_info,<sp/>error_ud_);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1abead43013dd161753d56006157679fe0" kindref="member">EspCan::DispatchStateChangeCallbacks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__esp__can__state__info__t" kindref="compound">hf_esp_can_state_info_t</ref>&amp;<sp/>state_info)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_cb_)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>state_cb_(state_info,<sp/>state_ud_);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1afbdb95ac14728f468847fae264b8f536" kindref="member">EspCan::DispatchTxCompleteCallbacks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhf__esp__can__tx__info__t" kindref="compound">hf_esp_can_tx_info_t</ref>&amp;<sp/>tx_info)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_cb_)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_cb_(tx_info,<sp/>tx_ud_);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(No<sp/>registry<sp/>helpers<sp/>in<sp/>single-callback<sp/>design)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEspCan_1a8fff536c8eae7799252dc4341bad7ba3" kindref="member">EspCan::UpdateErrorStatistics</ref>(uint32_t<sp/>error_type)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>mutex<sp/>lock<sp/>needed<sp/>-<sp/>using<sp/>atomic<sp/>operations<sp/>for<sp/>ISR<sp/>safety</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>error<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(error_type)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x01:<sp/></highlight><highlight class="comment">//<sp/>TX<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.bus_error_count.fetch_add(1);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x02:<sp/></highlight><highlight class="comment">//<sp/>RX<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.bus_error_count.fetch_add(1);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x04:<sp/></highlight><highlight class="comment">//<sp/>Bus<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.bus_error_count.fetch_add(1);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>statistics_.bus_error_count.fetch_add(1);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>statistics_.last_activity_timestamp.store(esp_timer_get_time()<sp/>/<sp/>1000);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>error<sp/>info<sp/>and<sp/>dispatch<sp/>to<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><ref refid="structhf__esp__can__error__info__t" kindref="compound">hf_esp_can_error_info_t</ref><sp/>error_info;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>error_info.<ref refid="structhf__esp__can__error__info__t_1a337f060887be746ba3aa514fc7ec94b6" kindref="member">error_type</ref><sp/>=<sp/>error_type;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>error_info.<ref refid="structhf__esp__can__error__info__t_1afc980c020d46591ec4734184ca4443c3" kindref="member">tx_error_count</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>available<sp/>in<sp/>statistics<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>error_info.<ref refid="structhf__esp__can__error__info__t_1a2b29a78d9d1b7fab17e42a2718b1ac40" kindref="member">rx_error_count</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>available<sp/>in<sp/>statistics<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>error_info.<ref refid="structhf__esp__can__error__info__t_1a0ff10456e35f6bea840201b935230fa7" kindref="member">bus_off_state</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Would<sp/>need<sp/>to<sp/>query<sp/>actual<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>error_info.<ref refid="structhf__esp__can__error__info__t_1a2ddfc6bb399ed51efe47f6d630d1fe33" kindref="member">error_warning</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Would<sp/>need<sp/>to<sp/>query<sp/>actual<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>error_info.<ref refid="structhf__esp__can__error__info__t_1acd2ebe7f3854cbbcf8e5f2e57fdde882" kindref="member">error_passive</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Would<sp/>need<sp/>to<sp/>query<sp/>actual<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>error_info.<ref refid="structhf__esp__can__error__info__t_1a54d9937e08e032a706473d042a8557d6" kindref="member">timestamp_us</ref><sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>DispatchErrorCallbacks(error_info);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/mcu/esp32/EspCan.cpp"/>
  </compounddef>
</doxygen>
