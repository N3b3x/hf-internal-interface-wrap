<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classEspSpiDevice" kind="class" language="C++" prot="public">
    <compoundname>EspSpiDevice</compoundname>
    <basecompoundref refid="classBaseSpi" prot="public" virt="non-virtual">BaseSpi</basecompoundref>
    <includes refid="EspSpi_8h" local="no">EspSpi.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspSpiDevice_1a79ef01539203d2b3d77a404d962750ff" prot="private" static="no" mutable="no">
        <type><ref refid="classEspSpiBus" kindref="compound">EspSpiBus</ref> *</type>
        <definition>EspSpiBus* EspSpiDevice::parent_bus_</definition>
        <argsstring></argsstring>
        <name>parent_bus_</name>
        <qualifiedname>EspSpiDevice::parent_bus_</qualifiedname>
        <briefdescription>
<para>Parent SPI bus. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="155" column="13" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspSpiDevice_1a600b28bd83ef66f3645f6ecb56315eb2" prot="private" static="no" mutable="no">
        <type>spi_device_handle_t</type>
        <definition>spi_device_handle_t EspSpiDevice::handle_</definition>
        <argsstring></argsstring>
        <name>handle_</name>
        <qualifiedname>EspSpiDevice::handle_</qualifiedname>
        <briefdescription>
<para>ESP-IDF device handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="156" column="23" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspSpiDevice_1a178c4ca0df69e47b6930c09787d7295b" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__spi__device__config__t" kindref="compound">hf_spi_device_config_t</ref></type>
        <definition>hf_spi_device_config_t EspSpiDevice::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>EspSpiDevice::config_</qualifiedname>
        <briefdescription>
<para>Device configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="157" column="26" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspSpiDevice_1ad547b708efaac31e0f6dca17d76184e2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EspSpiDevice::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>EspSpiDevice::initialized_</qualifiedname>
        <briefdescription>
<para>Initialization state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="158" column="8" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspSpiDevice_1aa34f977ac3bb19d6319a4e3c1a12b138" prot="private" static="no" mutable="no">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspSpiDevice::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspSpiDevice::mutex_</qualifiedname>
        <briefdescription>
<para>Thread safety. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="159" column="13" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="159" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspSpiDevice_1a314ecda5e0dd7eae427ea031edb174d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspSpiDevice::EspSpiDevice</definition>
        <argsstring>(EspSpiBus *parent, const hf_spi_device_config_t &amp;config)</argsstring>
        <name>EspSpiDevice</name>
        <qualifiedname>EspSpiDevice::EspSpiDevice</qualifiedname>
        <param>
          <type><ref refid="classEspSpiBus" kindref="compound">EspSpiBus</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="structhf__spi__device__config__t" kindref="compound">hf_spi_device_config_t</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classEspSpiDevice" kindref="compound">EspSpiDevice</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the parent <ref refid="classEspSpiBus" kindref="compound">EspSpiBus</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Device configuration (<ref refid="structhf__spi__device__config__t" kindref="compound">hf_spi_device_config_t</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="81" column="3" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1a78fbd11aa22825ddcd1f58a43945aee5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspSpiDevice::~EspSpiDevice</definition>
        <argsstring>() noexcept override</argsstring>
        <name>~EspSpiDevice</name>
        <qualifiedname>EspSpiDevice::~EspSpiDevice</qualifiedname>
        <briefdescription>
<para>Destructor. Automatically deinitializes the device if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="85" column="3" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1ae61fd5adb61b7e68e080aad9173a6708" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspSpiDevice::Initialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspSpiDevice::Initialize</qualifiedname>
        <reimplements refid="classBaseSpi_1a0ee4d13f589e319c6fbb3d5bb6492784">Initialize</reimplements>
        <briefdescription>
<para>Initialize the SPI device (no-op if already initialized). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="91" column="8" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="222" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1af45ba6122e82902c728d8c569362b87b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspSpiDevice::Deinitialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspSpiDevice::Deinitialize</qualifiedname>
        <reimplements refid="classBaseSpi_1a20608abd3e6dc4335dc14bc11d3016e6">Deinitialize</reimplements>
        <briefdescription>
<para>Deinitialize the SPI device and free resources. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="96" column="8" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="299" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1a511a9f42ccbfb10d07f839ae907cac3c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EspSpiDevice::MarkAsDeinitialized</definition>
        <argsstring>() noexcept</argsstring>
        <name>MarkAsDeinitialized</name>
        <qualifiedname>EspSpiDevice::MarkAsDeinitialized</qualifiedname>
        <briefdescription>
<para>Mark the device as deinitialized without ESP-IDF cleanup. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>ESP-IDF cleanup is handled by the parent bus </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="103" column="8" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="289" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1ac7432fd2630032d20f8d2f8388f6e1a5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>hf_spi_err_t EspSpiDevice::Transfer</definition>
        <argsstring>(const hf_u8_t *tx_data, hf_u8_t *rx_data, hf_u16_t length, hf_u32_t timeout_ms=0) noexcept override</argsstring>
        <name>Transfer</name>
        <qualifiedname>EspSpiDevice::Transfer</qualifiedname>
        <reimplements refid="classBaseSpi_1a7951cfcc329ab963764013ebe47288c0">Transfer</reimplements>
        <param>
          <type>const <ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>tx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a3aa2692c73b4cca0adc7139bd18ff613" kindref="member">hf_u8_t</ref> *</type>
          <declname>rx_data</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Perform a full-duplex SPI transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to transmit buffer (can be nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to receive buffer (can be nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to transfer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds (0 = default) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SPI operation result (hf_spi_err_t) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="113" column="16" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="318" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1a388f9afb603db8d9ddad17018ce2b547" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>const void *</type>
        <definition>const void * EspSpiDevice::GetDeviceConfig</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>GetDeviceConfig</name>
        <qualifiedname>EspSpiDevice::GetDeviceConfig</qualifiedname>
        <reimplements refid="classBaseSpi_1a6dd381f6a4423927bb59adb4395074ed">GetDeviceConfig</reimplements>
        <briefdescription>
<para>Get the device configuration for this SPI device. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to device configuration </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="120" column="14" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1a71bd19ff10847fcfb6fa5c1eb06e123b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>hf_spi_err_t EspSpiDevice::AcquireBus</definition>
        <argsstring>(hf_u32_t timeout_ms) noexcept</argsstring>
        <name>AcquireBus</name>
        <qualifiedname>EspSpiDevice::AcquireBus</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Acquire the SPI bus for exclusive use by this device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in milliseconds for acquiring the bus lock (0 = wait indefinitely) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_spi_err_t result code </para>
</simplesect>
<simplesect kind="note"><para>Use with <ref refid="classEspSpiDevice_1a8852888daf8fbff32a929144c4735228" kindref="member">ReleaseBus()</ref> for back-to-back transactions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="128" column="16" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="390" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1a8852888daf8fbff32a929144c4735228" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>hf_spi_err_t EspSpiDevice::ReleaseBus</definition>
        <argsstring>() noexcept</argsstring>
        <name>ReleaseBus</name>
        <qualifiedname>EspSpiDevice::ReleaseBus</qualifiedname>
        <briefdescription>
<para>Release the bus lock after operations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_spi_err_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="134" column="16" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="409" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1ade3c088859920ff4240eb70eee3bfcdb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>spi_device_handle_t</type>
        <definition>spi_device_handle_t EspSpiDevice::GetHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetHandle</name>
        <qualifiedname>EspSpiDevice::GetHandle</qualifiedname>
        <briefdescription>
<para>Get the ESP-IDF device handle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>spi_device_handle_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="140" column="23" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="382" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1af0abe6968f3dbf158f05f972c19f93d6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="structhf__spi__device__config__t" kindref="compound">hf_spi_device_config_t</ref> &amp;</type>
        <definition>const hf_spi_device_config_t &amp; EspSpiDevice::GetConfig</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetConfig</name>
        <qualifiedname>EspSpiDevice::GetConfig</qualifiedname>
        <briefdescription>
<para>Get the device configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structhf__spi__device__config__t" kindref="compound">hf_spi_device_config_t</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="145" column="32" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classEspSpiDevice_1afe4b0f88a3ae65ec19ea1757d44b6bf0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseSpi_8h_1a349a53792ac48c02b7e7f2d8761377df" kindref="member">hf_spi_err_t</ref></type>
        <definition>hf_spi_err_t EspSpiDevice::GetActualClockFrequency</definition>
        <argsstring>(hf_u32_t &amp;actual_freq_hz) const noexcept</argsstring>
        <name>GetActualClockFrequency</name>
        <qualifiedname>EspSpiDevice::GetActualClockFrequency</qualifiedname>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref> &amp;</type>
          <declname>actual_freq_hz</declname>
        </param>
        <briefdescription>
<para>Get the actual clock frequency used by this device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>actual_freq_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store the actual frequency (Hz) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hf_spi_err_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspSpi.h" line="152" column="16" bodyfile="src/mcu/esp32/EspSpi.cpp" bodystart="417" bodyend="430"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Represents a single SPI device on a bus (CS/config/handle). </para>
    </briefdescription>
    <detaileddescription>
<para>Inherits from <ref refid="classBaseSpi" kindref="compound">BaseSpi</ref> and delegates transfers to the parent bus. Provides full configuration and control for a single SPI device, including DMA, queueing, and advanced ESP-IDF v5.5+ features.</para>
<para><simplesect kind="note"><para>Thread-safe. All operations are protected by <ref refid="classRtosMutex" kindref="compound">RtosMutex</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BaseSpi</label>
        <link refid="classBaseSpi"/>
      </node>
      <node id="1">
        <label>EspSpiDevice</label>
        <link refid="classEspSpiDevice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BaseSpi</label>
        <link refid="classBaseSpi"/>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>EspSpiBus</label>
        <link refid="classEspSpiBus"/>
        <childnode refid="6" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>EspSpiDevice</label>
        <link refid="classEspSpiDevice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>parent_bus_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>config_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mutex_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="6">
        <label>hf_spi_bus_config_t</label>
        <link refid="structhf__spi__bus__config__t"/>
      </node>
      <node id="8">
        <label>hf_spi_device_config_t</label>
        <link refid="structhf__spi__device__config__t"/>
      </node>
      <node id="4">
        <label>hf_spi_diagnostics_t</label>
        <link refid="structhf__spi__diagnostics__t"/>
      </node>
      <node id="3">
        <label>hf_spi_statistics_t</label>
        <link refid="structhf__spi__statistics__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspSpi.h" line="74" column="1" bodyfile="inc/mcu/esp32/EspSpi.h" bodystart="74" bodyend="160"/>
    <listofallmembers>
      <member refid="classEspSpiDevice_1a71bd19ff10847fcfb6fa5c1eb06e123b" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>AcquireBus</name></member>
      <member refid="classBaseSpi_1abf33121948481f9001f6d18042da61bb" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>BaseSpi</name></member>
      <member refid="classBaseSpi_1a3e7a45c66f5c951d6f023ad361e00dd2" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>BaseSpi</name></member>
      <member refid="classBaseSpi_1ad499c99d4a592cb117483db0e692f12d" prot="protected" virt="non-virtual"><scope>EspSpiDevice</scope><name>BaseSpi</name></member>
      <member refid="classBaseSpi_1a88b3ba81405134a3566a01ca170bf8bb" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Close</name></member>
      <member refid="classEspSpiDevice_1a178c4ca0df69e47b6930c09787d7295b" prot="private" virt="non-virtual"><scope>EspSpiDevice</scope><name>config_</name></member>
      <member refid="classEspSpiDevice_1af45ba6122e82902c728d8c569362b87b" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Deinitialize</name></member>
      <member refid="classBaseSpi_1aa215f89886b0839c13e94f52e9725444" prot="protected" virt="non-virtual"><scope>EspSpiDevice</scope><name>diagnostics_</name></member>
      <member refid="classBaseSpi_1acd991c97d9e67d35af31a0594dd5357a" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBaseSpi_1a6e74ff977b2bfd381f25f2880387e5ca" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>EnsureInitialized</name></member>
      <member refid="classEspSpiDevice_1a314ecda5e0dd7eae427ea031edb174d4" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>EspSpiDevice</name></member>
      <member refid="classEspSpiDevice_1afe4b0f88a3ae65ec19ea1757d44b6bf0" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>GetActualClockFrequency</name></member>
      <member refid="classEspSpiDevice_1af0abe6968f3dbf158f05f972c19f93d6" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>GetConfig</name></member>
      <member refid="classEspSpiDevice_1a388f9afb603db8d9ddad17018ce2b547" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>GetDeviceConfig</name></member>
      <member refid="classBaseSpi_1af87f59a0d9b50a13294d72f2c123fdda" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>GetDiagnostics</name></member>
      <member refid="classEspSpiDevice_1ade3c088859920ff4240eb70eee3bfcdb" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>GetHandle</name></member>
      <member refid="classBaseSpi_1a034862a5015ab8d5bb10ddebfabdd7d6" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>GetStatistics</name></member>
      <member refid="classEspSpiDevice_1a600b28bd83ef66f3645f6ecb56315eb2" prot="private" virt="non-virtual"><scope>EspSpiDevice</scope><name>handle_</name></member>
      <member refid="classEspSpiDevice_1ae61fd5adb61b7e68e080aad9173a6708" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Initialize</name></member>
      <member refid="classEspSpiDevice_1ad547b708efaac31e0f6dca17d76184e2" prot="private" virt="non-virtual"><scope>EspSpiDevice</scope><name>initialized_</name></member>
      <member refid="classBaseSpi_1a5cf6e0c4a2edba09319834e334ff2a8b" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>IsInitialized</name></member>
      <member refid="classEspSpiDevice_1a511a9f42ccbfb10d07f839ae907cac3c" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>MarkAsDeinitialized</name></member>
      <member refid="classEspSpiDevice_1aa34f977ac3bb19d6319a4e3c1a12b138" prot="private" virt="non-virtual"><scope>EspSpiDevice</scope><name>mutex_</name></member>
      <member refid="classBaseSpi_1a00e8995f1ccc7a5ab078e7b4c19ffa95" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Open</name></member>
      <member refid="classBaseSpi_1a3c4096c2e9300928a41671fd755d5b30" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>operator=</name></member>
      <member refid="classBaseSpi_1a98b2462a1b60f70c5fd8eaf56b28f2b7" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>operator=</name></member>
      <member refid="classEspSpiDevice_1a79ef01539203d2b3d77a404d962750ff" prot="private" virt="non-virtual"><scope>EspSpiDevice</scope><name>parent_bus_</name></member>
      <member refid="classBaseSpi_1a64493eb569f32c72a0ee8b1cbf90337d" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Read</name></member>
      <member refid="classBaseSpi_1af49a8f4a53f964975a4d4645b875e5d1" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Read</name></member>
      <member refid="classBaseSpi_1aef966769cc28e0e5f44e627a4a59602b" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>ReadByte</name></member>
      <member refid="classEspSpiDevice_1a8852888daf8fbff32a929144c4735228" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>ReleaseBus</name></member>
      <member refid="classBaseSpi_1a245c1518757648334ad2d2edd459c2f9" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>ResetDiagnostics</name></member>
      <member refid="classBaseSpi_1a7f63d12c1a0fad18ede02f8a7f2ab6d6" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>ResetStatistics</name></member>
      <member refid="classBaseSpi_1a801d2346551161f1d2e1b755501cc1e1" prot="protected" virt="non-virtual"><scope>EspSpiDevice</scope><name>statistics_</name></member>
      <member refid="classEspSpiDevice_1ac7432fd2630032d20f8d2f8388f6e1a5" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Transfer</name></member>
      <member refid="classBaseSpi_1a949d019c6b5d68d6f3949a63316bfcd0" prot="public" virt="virtual" ambiguityscope="BaseSpi::"><scope>EspSpiDevice</scope><name>Transfer</name></member>
      <member refid="classBaseSpi_1ac4b29e0ea6f6dd6d4c514e8d24ca13d2" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>TransferByte</name></member>
      <member refid="classBaseSpi_1a9f84c77a20232f43082b4a493c9baaf2" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Write</name></member>
      <member refid="classBaseSpi_1a5c378f3322713d058a08b8b205ad821e" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>Write</name></member>
      <member refid="classBaseSpi_1a31a33d8d816ce7189982455bed742905" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>WriteByte</name></member>
      <member refid="classBaseSpi_1a00d984807a767a1b3de27d3ce0a61fd8" prot="public" virt="virtual"><scope>EspSpiDevice</scope><name>~BaseSpi</name></member>
      <member refid="classEspSpiDevice_1a78fbd11aa22825ddcd1f58a43945aee5" prot="public" virt="non-virtual"><scope>EspSpiDevice</scope><name>~EspSpiDevice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
