<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classDigitalOutputGuard" kind="class" language="C++" prot="public">
    <compoundname>DigitalOutputGuard</compoundname>
    <includes refid="DigitalOutputGuard_8h" local="no">DigitalOutputGuard.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classDigitalOutputGuard_1ade3da3f4413de4ea58f2fe82125fc56b" prot="private" static="no" mutable="no">
        <type><ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> *</type>
        <definition>BaseGpio* DigitalOutputGuard::gpio_</definition>
        <argsstring></argsstring>
        <name>gpio_</name>
        <qualifiedname>DigitalOutputGuard::gpio_</qualifiedname>
        <briefdescription>
<para>Pointer to the managed <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="119" column="12" bodyfile="inc/utils/DigitalOutputGuard.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDigitalOutputGuard_1aee20e95f884029b17d08eaff68156304" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DigitalOutputGuard::was_output_mode_</definition>
        <argsstring></argsstring>
        <name>was_output_mode_</name>
        <qualifiedname>DigitalOutputGuard::was_output_mode_</qualifiedname>
        <briefdescription>
<para>Whether the GPIO was already in output mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="120" column="8" bodyfile="inc/utils/DigitalOutputGuard.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDigitalOutputGuard_1a17b9cdad4008b79d15935976d29dd730" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool DigitalOutputGuard::is_valid_</definition>
        <argsstring></argsstring>
        <name>is_valid_</name>
        <qualifiedname>DigitalOutputGuard::is_valid_</qualifiedname>
        <briefdescription>
<para>Whether the guard is in a valid state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="121" column="8" bodyfile="inc/utils/DigitalOutputGuard.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classDigitalOutputGuard_1a2028b30c270bc8dfd8f55fb442528c74" prot="private" static="no" mutable="no">
        <type><ref refid="group__gpio_1ga2632aac2351807c35e790ec20bda305d" kindref="member">hf_gpio_err_t</ref></type>
        <definition>hf_gpio_err_t DigitalOutputGuard::last_error_</definition>
        <argsstring></argsstring>
        <name>last_error_</name>
        <qualifiedname>DigitalOutputGuard::last_error_</qualifiedname>
        <briefdescription>
<para>Last error code from operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="122" column="17" bodyfile="inc/utils/DigitalOutputGuard.h" bodystart="122" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classDigitalOutputGuard_1af9c1cd53f50d499b69017b857813c9e6" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>DigitalOutputGuard::DigitalOutputGuard</definition>
        <argsstring>(BaseGpio &amp;gpio, bool ensure_output_mode=true) noexcept</argsstring>
        <name>DigitalOutputGuard</name>
        <qualifiedname>DigitalOutputGuard::DigitalOutputGuard</qualifiedname>
        <param>
          <type><ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> &amp;</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ensure_output_mode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor with <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> instance to manage </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ensure_output_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, automatically switch to output mode (default: true)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Configures the GPIO as output (if needed) and sets it to active state. If the GPIO is already in output mode, it just sets the active state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="52" column="12" bodyfile="src/utils/DigitalOutputGuard.cpp" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1ade1b9042577a41e2a4dcd2d1e2bd2f3f" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>DigitalOutputGuard::DigitalOutputGuard</definition>
        <argsstring>(BaseGpio *gpio, bool ensure_output_mode=true) noexcept</argsstring>
        <name>DigitalOutputGuard</name>
        <qualifiedname>DigitalOutputGuard::DigitalOutputGuard</qualifiedname>
        <param>
          <type><ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ensure_output_mode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructor with <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> instance to manage (must not be null) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ensure_output_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, automatically switch to output mode (default: true)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Configures the GPIO as output (if needed) and sets it to active state. If the GPIO is already in output mode, it just sets the active state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="61" column="12" bodyfile="src/utils/DigitalOutputGuard.cpp" bodystart="27" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a80f27ca652a17ee6faf46f50614b5925" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>DigitalOutputGuard::~DigitalOutputGuard</definition>
        <argsstring>() noexcept</argsstring>
        <name>~DigitalOutputGuard</name>
        <qualifiedname>DigitalOutputGuard::~DigitalOutputGuard</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the associated <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> instance to inactive state. Does not change the pin direction to preserve configuration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="68" column="3" bodyfile="src/utils/DigitalOutputGuard.cpp" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1acf7b9e415cd2bef1214a50a6f8bf4e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DigitalOutputGuard::DigitalOutputGuard</definition>
        <argsstring>(const DigitalOutputGuard &amp;)=delete</argsstring>
        <name>DigitalOutputGuard</name>
        <qualifiedname>DigitalOutputGuard::DigitalOutputGuard</qualifiedname>
        <param>
          <type>const <ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="71" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a9510e46288cc16957397aed8615eb36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> &amp;</type>
        <definition>DigitalOutputGuard &amp; DigitalOutputGuard::operator=</definition>
        <argsstring>(const DigitalOutputGuard &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>DigitalOutputGuard::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="72" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a7fcc798ecd368c7a44a905bd65d6a48b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>DigitalOutputGuard::DigitalOutputGuard</definition>
        <argsstring>(DigitalOutputGuard &amp;&amp;) noexcept=default</argsstring>
        <name>DigitalOutputGuard</name>
        <qualifiedname>DigitalOutputGuard::DigitalOutputGuard</qualifiedname>
        <param>
          <type><ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="75" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a260659b0c951b0cc733a2a7071ea3521" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> &amp;</type>
        <definition>DigitalOutputGuard &amp; DigitalOutputGuard::operator=</definition>
        <argsstring>(DigitalOutputGuard &amp;&amp;) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>DigitalOutputGuard::operator=</qualifiedname>
        <param>
          <type><ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="76" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a848c506b63971c715801b44192cc0ce9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool DigitalOutputGuard::IsValid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IsValid</name>
        <qualifiedname>DigitalOutputGuard::IsValid</qualifiedname>
        <briefdescription>
<para>Check if the guard was successfully initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the GPIO is properly configured and managed, false otherwise</para>
</simplesect>
Returns false if there were errors during construction or if the GPIO pointer is invalid. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="84" column="9" bodyfile="inc/utils/DigitalOutputGuard.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a1e9f2d8542dd81c7210335ae89a42ba3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__gpio_1ga2632aac2351807c35e790ec20bda305d" kindref="member">hf_gpio_err_t</ref></type>
        <definition>hf_gpio_err_t DigitalOutputGuard::GetLastError</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetLastError</name>
        <qualifiedname>DigitalOutputGuard::GetLastError</qualifiedname>
        <briefdescription>
<para>Get the last error that occurred during guard operations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hf_gpio_err_t error code from the last operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="92" column="18" bodyfile="inc/utils/DigitalOutputGuard.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a1ec6a7a545175077da4bb7efa2c90f34" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__gpio_1ga2632aac2351807c35e790ec20bda305d" kindref="member">hf_gpio_err_t</ref></type>
        <definition>hf_gpio_err_t DigitalOutputGuard::SetActive</definition>
        <argsstring>() noexcept</argsstring>
        <name>SetActive</name>
        <qualifiedname>DigitalOutputGuard::SetActive</qualifiedname>
        <briefdescription>
<para>Manually set the GPIO to active state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__gpio_1gga2632aac2351807c35e790ec20bda305da08c6dcbce56949318695e40344555937" kindref="member">hf_gpio_err_t::GPIO_SUCCESS</ref> if successful, error code otherwise</para>
</simplesect>
Allows manual control while the guard is active. The destructor will still set the pin inactive when the guard goes out of scope. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="102" column="17" bodyfile="src/utils/DigitalOutputGuard.cpp" bodystart="60" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a67bacfef3a6249f4bf0cccbd908bbd8e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__gpio_1ga2632aac2351807c35e790ec20bda305d" kindref="member">hf_gpio_err_t</ref></type>
        <definition>hf_gpio_err_t DigitalOutputGuard::SetInactive</definition>
        <argsstring>() noexcept</argsstring>
        <name>SetInactive</name>
        <qualifiedname>DigitalOutputGuard::SetInactive</qualifiedname>
        <briefdescription>
<para>Manually set the GPIO to inactive state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__gpio_1gga2632aac2351807c35e790ec20bda305da08c6dcbce56949318695e40344555937" kindref="member">hf_gpio_err_t::GPIO_SUCCESS</ref> if successful, error code otherwise</para>
</simplesect>
Allows manual control while the guard is active. The destructor will still attempt to set the pin inactive when the guard goes out of scope. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="110" column="17" bodyfile="src/utils/DigitalOutputGuard.cpp" bodystart="79" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classDigitalOutputGuard_1a4602903caa7df15bd0c14ff1b709595e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__gpio_1ga49490004a4935c1f8f727fcbfba7f887" kindref="member">hf_gpio_state_t</ref></type>
        <definition>hf_gpio_state_t DigitalOutputGuard::GetCurrentState</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetCurrentState</name>
        <qualifiedname>DigitalOutputGuard::GetCurrentState</qualifiedname>
        <briefdescription>
<para>Get the current state of the managed GPIO. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current BaseGpio::hf_gpio_state_t (Active or Inactive) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="116" column="20" bodyfile="src/utils/DigitalOutputGuard.cpp" bodystart="98" bodyend="104"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classDigitalOutputGuard_1ae7949ca40e1d7dcc530dfb9559bd89b2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool DigitalOutputGuard::InitializeGuard</definition>
        <argsstring>(bool ensure_output_mode) noexcept</argsstring>
        <name>InitializeGuard</name>
        <qualifiedname>DigitalOutputGuard::InitializeGuard</qualifiedname>
        <param>
          <type>bool</type>
          <declname>ensure_output_mode</declname>
        </param>
        <briefdescription>
<para>Internal helper to initialize the guard state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ensure_output_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to ensure output mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if initialization successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/DigitalOutputGuard.h" line="129" column="8" bodyfile="src/utils/DigitalOutputGuard.cpp" bodystart="110" bodyend="144"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class ensures that a <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> instance is configured as output and set active in its constructor, and set inactive in its destructor. This ensures proper resource management and consistent behavior using RAII principles.</para>
<para>Features:<itemizedlist>
<listitem><para>Automatic output mode configuration</para>
</listitem><listitem><para>Safe state management with error handling</para>
</listitem><listitem><para>RAII pattern for exception safety</para>
</listitem><listitem><para>Supports both reference and pointer interfaces The <ref refid="classDigitalOutputGuard" kindref="compound">DigitalOutputGuard</ref> ensures that a <ref refid="classBaseGpio" kindref="compound">BaseGpio</ref> instance is configured as output and set active in its constructor, and set inactive in its destructor. This ensures proper resource management and consistent behavior using RAII principles.</para>
</listitem></itemizedlist>
</para>
<para>Features:<itemizedlist>
<listitem><para>Automatic output mode configuration</para>
</listitem><listitem><para>Safe state management with error handling</para>
</listitem><listitem><para>RAII pattern for exception safety</para>
</listitem><listitem><para>Supports both reference and pointer interfaces </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>BaseGpio</label>
        <link refid="classBaseGpio"/>
        <childnode refid="3" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>DigitalOutputGuard</label>
        <link refid="classDigitalOutputGuard"/>
        <childnode refid="2" relation="usage">
          <edgelabel>gpio_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>hf_gpio_diagnostics_t</label>
        <link refid="structhf__gpio__diagnostics__t"/>
      </node>
      <node id="3">
        <label>hf_gpio_statistics_t</label>
        <link refid="structhf__gpio__statistics__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/utils/DigitalOutputGuard.h" line="43" column="1" bodyfile="inc/utils/DigitalOutputGuard.h" bodystart="43" bodyend="130"/>
    <listofallmembers>
      <member refid="classDigitalOutputGuard_1af9c1cd53f50d499b69017b857813c9e6" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>DigitalOutputGuard</name></member>
      <member refid="classDigitalOutputGuard_1ade1b9042577a41e2a4dcd2d1e2bd2f3f" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>DigitalOutputGuard</name></member>
      <member refid="classDigitalOutputGuard_1acf7b9e415cd2bef1214a50a6f8bf4e37" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>DigitalOutputGuard</name></member>
      <member refid="classDigitalOutputGuard_1a7fcc798ecd368c7a44a905bd65d6a48b" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>DigitalOutputGuard</name></member>
      <member refid="classDigitalOutputGuard_1a4602903caa7df15bd0c14ff1b709595e" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>GetCurrentState</name></member>
      <member refid="classDigitalOutputGuard_1a1e9f2d8542dd81c7210335ae89a42ba3" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>GetLastError</name></member>
      <member refid="classDigitalOutputGuard_1ade3da3f4413de4ea58f2fe82125fc56b" prot="private" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>gpio_</name></member>
      <member refid="classDigitalOutputGuard_1ae7949ca40e1d7dcc530dfb9559bd89b2" prot="private" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>InitializeGuard</name></member>
      <member refid="classDigitalOutputGuard_1a17b9cdad4008b79d15935976d29dd730" prot="private" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>is_valid_</name></member>
      <member refid="classDigitalOutputGuard_1a848c506b63971c715801b44192cc0ce9" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>IsValid</name></member>
      <member refid="classDigitalOutputGuard_1a2028b30c270bc8dfd8f55fb442528c74" prot="private" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>last_error_</name></member>
      <member refid="classDigitalOutputGuard_1a9510e46288cc16957397aed8615eb36e" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>operator=</name></member>
      <member refid="classDigitalOutputGuard_1a260659b0c951b0cc733a2a7071ea3521" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>operator=</name></member>
      <member refid="classDigitalOutputGuard_1a1ec6a7a545175077da4bb7efa2c90f34" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>SetActive</name></member>
      <member refid="classDigitalOutputGuard_1a67bacfef3a6249f4bf0cccbd908bbd8e" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>SetInactive</name></member>
      <member refid="classDigitalOutputGuard_1aee20e95f884029b17d08eaff68156304" prot="private" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>was_output_mode_</name></member>
      <member refid="classDigitalOutputGuard_1a80f27ca652a17ee6faf46f50614b5925" prot="public" virt="non-virtual"><scope>DigitalOutputGuard</scope><name>~DigitalOutputGuard</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
