<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="I2cComprehensiveTest_8cpp" kind="file" language="C++">
    <compoundname>I2cComprehensiveTest.cpp</compoundname>
    <includes refid="BaseI2c_8h" local="yes">base/BaseI2c.h</includes>
    <includes refid="EspI2c_8h" local="yes">mcu/esp32/EspI2c.h</includes>
    <includes refid="EspTypes__I2C_8h" local="yes">mcu/esp32/utils/EspTypes_I2C.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <includes refid="TestFramework_8h" local="yes">TestFramework.h</includes>
    <includes refid="EspGpio_8h" local="yes">mcu/esp32/EspGpio.h</includes>
    <incdepgraph>
      <node id="1">
        <label>examples/esp32/main/I2cComprehensiveTest.cpp</label>
        <link refid="I2cComprehensiveTest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>TestFramework.h</label>
        <link refid="TestFramework_8h"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>BaseAdc.h</label>
        <link refid="BaseAdc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>BaseCan.h</label>
        <link refid="BaseCan_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>BaseGpio.h</label>
        <link refid="BaseGpio_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>base/BaseI2c.h</label>
        <link refid="BaseI2c_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>BasePio.h</label>
        <link refid="BasePio_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../../../base/BasePwm.h</label>
        <link refid="BasePwm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>BaseSpi.h</label>
        <link refid="BaseSpi_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>BaseUart.h</label>
        <link refid="BaseUart_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>HardwareTypes.h</label>
        <link refid="HardwareTypes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>mcu/esp32/EspGpio.h</label>
        <link refid="EspGpio_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>mcu/esp32/EspI2c.h</label>
        <link refid="EspI2c_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>utils/EspTypes.h</label>
        <link refid="EspTypes_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>EspTypes_ADC.h</label>
        <link refid="EspTypes__ADC_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>EspTypes_Base.h</label>
        <link refid="EspTypes__Base_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>EspTypes_CAN.h</label>
        <link refid="EspTypes__CAN_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>EspTypes_GPIO.h</label>
        <link refid="EspTypes__GPIO_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>EspTypes_I2C.h</label>
        <link refid="EspTypes__I2C_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>EspTypes_PIO.h</label>
        <link refid="EspTypes__PIO_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>EspTypes_PWM.h</label>
        <link refid="EspTypes__PWM_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>EspTypes_SPI.h</label>
        <link refid="EspTypes__SPI_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>EspTypes_Timer.h</label>
        <link refid="EspTypes__Timer_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>EspTypes_UART.h</label>
        <link refid="EspTypes__UART_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>McuSelect.h</label>
        <link refid="McuSelect_8h"/>
      </node>
      <node id="36">
        <label>utils/RtosMutex.h</label>
        <link refid="RtosMutex_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>algorithm</label>
      </node>
      <node id="14">
        <label>atomic</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="35">
        <label>cstring</label>
      </node>
      <node id="47">
        <label>driver/gpio.h</label>
      </node>
      <node id="23">
        <label>driver/i2c.h</label>
      </node>
      <node id="41">
        <label>driver/i2c_master.h</label>
      </node>
      <node id="30">
        <label>driver/spi_master.h</label>
      </node>
      <node id="15">
        <label>esp_adc/adc_continuous.h</label>
      </node>
      <node id="16">
        <label>esp_adc/adc_oneshot.h</label>
      </node>
      <node id="48">
        <label>esp_attr.h</label>
      </node>
      <node id="42">
        <label>esp_log.h</label>
      </node>
      <node id="32">
        <label>esp_timer.h</label>
      </node>
      <node id="37">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="45">
        <label>freertos/queue.h</label>
      </node>
      <node id="38">
        <label>freertos/semphr.h</label>
      </node>
      <node id="39">
        <label>freertos/task.h</label>
      </node>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="40">
        <label>memory</label>
      </node>
      <node id="49">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>string_view</label>
      </node>
      <node id="22">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" prot="public" static="no">
        <name>CREATE_TEST_BUS_INLINE</name>
        <param><defname>bus_var_name</defname></param>
        <param><defname>mode_val</defname></param>
        <initializer>  <ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref> bus_config = {};                                                      \
  bus_config.i2c_port = <ref refid="I2cComprehensiveTest_8cpp_1aa8be7e5484e64f43efca3e6dd9916ca2" kindref="member">I2C_PORT_NUM</ref>;                                                              \
  bus_config.sda_io_num = <ref refid="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" kindref="member">TEST_SDA_PIN</ref>;                                                            \
  bus_config.scl_io_num = <ref refid="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" kindref="member">TEST_SCL_PIN</ref>;                                                            \
  bus_config.mode = mode_val;                                                                      \
  bus_config.trans_queue_depth = (mode_val == <ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>) ? 32 : 0;          \
  bus_config.clk_source = <ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca25f98fdb9da6e93af206cac8a148cd65" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT</ref>;                           \
  bus_config.glitch_ignore_cnt = <ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896a3e3f7d4ba736e80421353ee8ad59524c" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES</ref>;            \
  bus_config.intr_priority = 0;                                                                    \
  bus_config.flags.enable_internal_pullup = true;                                                  \
  bus_config.flags.allow_pd = false;                                                               \
  auto bus_var_name = std::make_unique&lt;<ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref>&gt;(bus_config);                                     \
  if (!bus_var_name-&gt;Initialize()) {                                                               \
    ESP_LOGE(<ref refid="EspAdc_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>, &quot;Failed to initialize I2C bus&quot;);                                                 \
    return false;                                                                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="104" column="9" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="104" bodyend="120"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;I2C_Test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="33" column="19" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_CORE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_CORE_TESTS</name>
        <initializer>=
    false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="41" column="23" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1ac1e53fc92221c5c68c94ad69e2fc0aab" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_OPERATION_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_OPERATION_TESTS</name>
        <initializer>=
    false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="43" column="23" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_ADVANCED_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_ADVANCED_TESTS</name>
        <initializer>=
    false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="45" column="23" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a362ae025a7b83c898995613ee8fbddc7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_PERFORMANCE_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_PERFORMANCE_TESTS</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="47" column="23" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a8b919732af89f61759068ba91ecde65e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool ENABLE_SPECIALIZED_TESTS</definition>
        <argsstring></argsstring>
        <name>ENABLE_SPECIALIZED_TESTS</name>
        <initializer>=
    true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="48" column="23" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" prot="public" static="yes" mutable="no">
        <type><ref refid="structTestResults" kindref="compound">TestResults</ref></type>
        <definition>TestResults g_test_results</definition>
        <argsstring></argsstring>
        <name>g_test_results</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="51" column="20" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1aa8be7e5484e64f43efca3e6dd9916ca2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr i2c_port_t</type>
        <definition>constexpr i2c_port_t I2C_PORT_NUM</definition>
        <argsstring></argsstring>
        <name>I2C_PORT_NUM</name>
        <initializer>= I2C_NUM_0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="61" column="29" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref></type>
        <definition>constexpr hf_pin_num_t TEST_SDA_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_SDA_PIN</name>
        <initializer>= 21</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="62" column="31" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref></type>
        <definition>constexpr hf_pin_num_t TEST_SCL_PIN</definition>
        <argsstring></argsstring>
        <name>TEST_SCL_PIN</name>
        <initializer>= 22</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="63" column="31" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t TEST_DEVICE_ADDR_1</definition>
        <argsstring></argsstring>
        <name>TEST_DEVICE_ADDR_1</name>
        <initializer>= 0x48</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="65" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a10cdf7c09d5bb1d75d28128967fda944" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t TEST_DEVICE_ADDR_2</definition>
        <argsstring></argsstring>
        <name>TEST_DEVICE_ADDR_2</name>
        <initializer>= 0x50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="66" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1aea1a58ed6eb8e3331e19a2cb9ed3619b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t NONEXISTENT_ADDR</definition>
        <argsstring></argsstring>
        <name>NONEXISTENT_ADDR</name>
        <initializer>= 0x7E</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="67" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t STANDARD_FREQ</definition>
        <argsstring></argsstring>
        <name>STANDARD_FREQ</name>
        <initializer>= 100000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="68" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1ab24807f3c51fd761d31353418fa649e5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t FAST_FREQ</definition>
        <argsstring></argsstring>
        <name>FAST_FREQ</name>
        <initializer>= 400000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="69" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1aa78e15898e88f4e9b76a843bd61c1ac1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t FAST_PLUS_FREQ</definition>
        <argsstring></argsstring>
        <name>FAST_PLUS_FREQ</name>
        <initializer>= 1000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="70" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TIMEOUT_VERY_FAST_MS</definition>
        <argsstring></argsstring>
        <name>TIMEOUT_VERY_FAST_MS</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="73" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a84c097e1bded3ed9c6986be98c286bfe" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TIMEOUT_FAST_MS</definition>
        <argsstring></argsstring>
        <name>TIMEOUT_FAST_MS</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="74" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TIMEOUT_STANDARD_MS</definition>
        <argsstring></argsstring>
        <name>TIMEOUT_STANDARD_MS</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="75" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a3b185b68c8beed8fdf9b0d0b21dbfcaa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TIMEOUT_MEDIUM_MS</definition>
        <argsstring></argsstring>
        <name>TIMEOUT_MEDIUM_MS</name>
        <initializer>= 500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="76" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a32a10ee72327a671a5fec798c52e3b0e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TIMEOUT_LONG_MS</definition>
        <argsstring></argsstring>
        <name>TIMEOUT_LONG_MS</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="77" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a742faba1dc28913f83827cf9f832b0f8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TIMEOUT_VERY_LONG_MS</definition>
        <argsstring></argsstring>
        <name>TIMEOUT_VERY_LONG_MS</name>
        <initializer>= 2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="78" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="I2cComprehensiveTest_8cpp_1a3ae7dcf112b2564560cd460ec23dfa7c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t TIMEOUT_EXTENDED_MS</definition>
        <argsstring></argsstring>
        <name>TIMEOUT_EXTENDED_MS</name>
        <initializer>= 10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="79" column="27" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a7e1d0a77bdfa8c3243f86bda180c327b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref></type>
        <definition>hf_i2c_master_bus_config_t create_test_bus_config</definition>
        <argsstring>(hf_i2c_mode_t mode, uint32_t freq=STANDARD_FREQ, hf_i2c_clock_source_t clk_source=hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT, hf_i2c_glitch_filter_t glitch_filter=hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES, bool allow_power_down=false) noexcept</argsstring>
        <name>create_test_bus_config</name>
        <param>
          <type><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbb" kindref="member">hf_i2c_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>freq</declname>
          <defval><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref></defval>
        </param>
        <param>
          <type><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eec" kindref="member">hf_i2c_clock_source_t</ref></type>
          <declname>clk_source</declname>
          <defval><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca25f98fdb9da6e93af206cac8a148cd65" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT</ref></defval>
        </param>
        <param>
          <type><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896" kindref="member">hf_i2c_glitch_filter_t</ref></type>
          <declname>glitch_filter</declname>
          <defval><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896a3e3f7d4ba736e80421353ee8ad59524c" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allow_power_down</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="82" column="28" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="82" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a789fd16b0147f2e9b5ec64337845b402" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_espidf_direct_api</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_espidf_direct_api</name>
        <briefdescription>
<para>Test I2C using ESP-IDF API directly (bypassing our wrapper) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>This test runs FIRST to verify ESP-IDF I2C driver functionality </para>
</simplesect>
<simplesect kind="note"><para>Runs in a loop with sufficient time to thoroughly test I2C operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1813" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1813" bodyend="2013" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a34148e7911fe8d3fd4ed86859bbde872" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_espidf_wrapper_replica</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_espidf_wrapper_replica</name>
        <briefdescription>
<para>Test I2C using <ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> wrapper (replicating ESP-IDF direct test) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>This test runs SECOND to compare <ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> wrapper with ESP-IDF direct API </para>
</simplesect>
<simplesect kind="note"><para>Uses identical configuration and test pattern as ESP-IDF direct test </para>
</simplesect>
<simplesect kind="note"><para>Runs in a loop with sufficient time to thoroughly test I2C operations </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="2026" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="2026" bodyend="2221" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a1f80f2ea7258698231471733c1c902f1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_espidf_wrapper_replica_continuous</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_espidf_wrapper_replica_continuous</name>
        <briefdescription>
<para>Test I2C using <ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref> wrapper continuously (stability test) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if successful, false otherwise </para>
</simplesect>
<simplesect kind="note"><para>This test runs the replica test in a loop to verify stability </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="2232" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="2232" bodyend="2349" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a760250b8e120244f577e386436400f65" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_bus_initialization</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_bus_initialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="175" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="175" bodyend="200" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1ae9dcba1a12d5daf31d839c8e7f74473d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_bus_deinitialization</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_bus_deinitialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="202" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="202" bodyend="235" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1aaad203c4b98b681c0b82fc804f8c808a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_configuration_validation</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_configuration_validation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="237" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="237" bodyend="261" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a8c20a23f919cd3715d127e8bf6af6be3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_device_creation</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_device_creation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="263" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="263" bodyend="345" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1ac9531bd30ff1d679f65a9b8e729c069f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_device_management</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_device_management</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="347" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="347" bodyend="416" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1aacc3800ce0aae33688324dd33a4b932a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_device_probing</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_device_probing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="418" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="418" bodyend="436" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1aae1be4afbdde5aeda93bb6d1afd668db" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_bus_scanning</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_bus_scanning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="438" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="438" bodyend="464" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a03ee0d40b01270f57b52625700b72f76" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_write_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_write_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="466" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="466" bodyend="519" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1aec4b99645628f46541d2adffc6d7887d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_read_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_read_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="521" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="521" bodyend="569" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a0cd2107131d8f551f97e42eb9ea6891b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_write_read_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_write_read_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="571" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="571" bodyend="615" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="139" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1ac5a59d7e374f7725742d87841ef5ef68" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_error_handling</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_error_handling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="617" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="617" bodyend="666" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a9455f8ca6c09c6f5a489335b451bcaf2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_timeout_handling</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_timeout_handling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="668" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="668" bodyend="724" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1ad3b98b1a54dc1a35623206c178f18790" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_multi_device_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_multi_device_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="726" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="726" bodyend="776" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a12fd885a0842058c1210cc7b1de3523f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_clock_speeds</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_clock_speeds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="778" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="778" bodyend="820" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a286364be1181eb6afc457dd0c224b79f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_address_modes</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_address_modes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="822" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="822" bodyend="866" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a14494a20d37fa7971dbb581ae4da0101" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_esp_specific_features</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_esp_specific_features</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="868" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="868" bodyend="889" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="145" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a5c77a30ba09909178786f0008d9722af" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_thread_safety</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_thread_safety</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="891" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="891" bodyend="972" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a7f8a5bb8e7f843262311cbd896763299" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_performance</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_performance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="974" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="974" bodyend="1068" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a81530af7f12a036b4370f6813e92e5bf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_edge_cases</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_edge_cases</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1070" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1070" bodyend="1105" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1aa06f88219fc5cd4a1f4f05913c351f9e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_power_management</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_power_management</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1107" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1107" bodyend="1119" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a533e88112389466272691e086466bf0c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_async_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_async_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1125" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1125" bodyend="1198" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="152" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a6f3a86582dcf68467cab5b1788728be1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_async_timeout_handling</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_async_timeout_handling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1200" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1200" bodyend="1261" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a214f128cc749be5b85d9798fb95d5ef6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_async_multiple_operations</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_async_multiple_operations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1263" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1263" bodyend="1322" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a2cea341139816eb26374b5c0b066cb4b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_index_based_access</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_index_based_access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1324" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1324" bodyend="1557" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="157" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a2f44ff787a2bd60a1c55e3be666ce15a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_sync_mode</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_sync_mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1560" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1560" bodyend="1607" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1abfd742698bfae28ee20752c00d3cc114" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_async_mode</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_async_mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1609" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1609" bodyend="1657" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a32902ab50a8fda7a5090fdfbb542665f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_mode_switching</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_mode_switching</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1659" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1659" bodyend="1698" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1ab3de99abef28beef615a55649f8c2acf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_basic_functionality</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_basic_functionality</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1700" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1700" bodyend="1747" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a0eee833f9af41ffc27f229d71b38ab19" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_i2c_probe_methods_comparison</definition>
        <argsstring>() noexcept</argsstring>
        <name>test_i2c_probe_methods_comparison</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1750" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1750" bodyend="1790" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1ad412801adee7f6475dbc1dbce403b411" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool verify_device_functionality</definition>
        <argsstring>(BaseI2c *device) noexcept</argsstring>
        <name>verify_device_functionality</name>
        <param>
          <type><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref> *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="1794" column="6" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="1794" bodyend="1801" declfile="examples/esp32/main/I2cComprehensiveTest.cpp" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="I2cComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void app_main</definition>
        <argsstring>(void)</argsstring>
        <name>app_main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esp32/main/I2cComprehensiveTest.cpp" line="2351" column="17" bodyfile="examples/esp32/main/I2cComprehensiveTest.cpp" bodystart="2351" bodyend="2489"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Comprehensive I2C testing suite for ESP32-C6 DevKit-M-1 (noexcept) </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains comprehensive testing for the ESP I2C implementation including:<itemizedlist>
<listitem><para>Bus initialization and configuration validation</para>
</listitem><listitem><para>Device creation and management</para>
</listitem><listitem><para>Data transfer operations (read/write/write-read)</para>
</listitem><listitem><para>Error handling and recovery</para>
</listitem><listitem><para>Bus scanning and device probing</para>
</listitem><listitem><para>Multi-device scenarios</para>
</listitem><listitem><para>ESP-specific features (clock sources, glitch filtering, power management)</para>
</listitem><listitem><para>Thread safety verification</para>
</listitem><listitem><para>Performance and timing tests</para>
</listitem><listitem><para>Edge cases and fault injection</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="author"><para>Nebiyu Tadesse </para>
</simplesect>
<simplesect kind="date"><para>2025 </para>
</simplesect>
<simplesect kind="copyright"><para>HardFOC </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="BaseI2c_8h" kindref="compound">base/BaseI2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspI2c_8h" kindref="compound">mcu/esp32/EspI2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspTypes__I2C_8h" kindref="compound">mcu/esp32/utils/EspTypes_I2C.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="TestFramework_8h" kindref="compound">TestFramework.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="EspGpio_8h" kindref="compound">mcu/esp32/EspGpio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I2C_Test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>SECTION<sp/>CONFIGURATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable/disable<sp/>specific<sp/>test<sp/>categories<sp/>by<sp/>setting<sp/>to<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Core<sp/>I2C<sp/>functionality<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>verification,<sp/>bus/device<sp/>init,<sp/>basic<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ac1e53fc92221c5c68c94ad69e2fc0aab" kindref="member">ENABLE_OPERATION_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Read/write,<sp/>error<sp/>handling,<sp/>timeouts,<sp/>multi-device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Clock<sp/>speeds,<sp/>address<sp/>modes,<sp/>ESP-specific,<sp/>thread<sp/>safety</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a362ae025a7b83c898995613ee8fbddc7" kindref="member">ENABLE_PERFORMANCE_TESTS</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Performance,<sp/>edge<sp/>cases,<sp/>power<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a8b919732af89f61759068ba91ecde65e" kindref="member">ENABLE_SPECIALIZED_TESTS</ref><sp/>=</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Async<sp/>operations,<sp/>mode<sp/>switching,<sp/>index<sp/>access,<sp/>probing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structTestResults" kindref="compound">TestResults</ref><sp/><ref refid="I2cComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>PROGRESSION<sp/>INDICATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>CONFIGURATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>configuration<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>i2c_port_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1aa8be7e5484e64f43efca3e6dd9916ca2" kindref="member">I2C_PORT_NUM</ref><sp/>=<sp/>I2C_NUM_0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/><ref refid="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" kindref="member">TEST_SDA_PIN</ref><sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/><ref refid="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" kindref="member">TEST_SCL_PIN</ref><sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref><sp/>=<sp/>0x48;<sp/></highlight><highlight class="comment">//<sp/>Common<sp/>I2C<sp/>device<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1a10cdf7c09d5bb1d75d28128967fda944" kindref="member">TEST_DEVICE_ADDR_2</ref><sp/>=<sp/>0x50;<sp/></highlight><highlight class="comment">//<sp/>EEPROM<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1aea1a58ed6eb8e3331e19a2cb9ed3619b" kindref="member">NONEXISTENT_ADDR</ref><sp/>=<sp/>0x7E;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlikely<sp/>to<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref><sp/>=<sp/>100000;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>100kHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1ab24807f3c51fd761d31353418fa649e5" kindref="member">FAST_FREQ</ref><sp/>=<sp/>400000;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>400kHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1aa78e15898e88f4e9b76a843bd61c1ac1" kindref="member">FAST_PLUS_FREQ</ref><sp/>=<sp/>1000000;<sp/><sp/></highlight><highlight class="comment">//<sp/>1MHz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Timeout<sp/>constants<sp/>for<sp/>easy<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" kindref="member">TIMEOUT_VERY_FAST_MS</ref><sp/>=<sp/>100;<sp/><sp/></highlight><highlight class="comment">//<sp/>100ms<sp/>-<sp/>Very<sp/>fast<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1a84c097e1bded3ed9c6986be98c286bfe" kindref="member">TIMEOUT_FAST_MS</ref><sp/>=<sp/>100;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>100ms<sp/>-<sp/>Fast<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref><sp/>=<sp/>100;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>100ms<sp/>-<sp/>Standard<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1a3b185b68c8beed8fdf9b0d0b21dbfcaa" kindref="member">TIMEOUT_MEDIUM_MS</ref><sp/>=<sp/>500;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>500ms<sp/>-<sp/>Medium<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1a32a10ee72327a671a5fec798c52e3b0e" kindref="member">TIMEOUT_LONG_MS</ref><sp/>=<sp/>1000;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1000ms<sp/>-<sp/>Long<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1a742faba1dc28913f83827cf9f832b0f8" kindref="member">TIMEOUT_VERY_LONG_MS</ref><sp/>=<sp/>2000;<sp/></highlight><highlight class="comment">//<sp/>2000ms<sp/>-<sp/>Very<sp/>long<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="I2cComprehensiveTest_8cpp_1a3ae7dcf112b2564560cd460ec23dfa7c" kindref="member">TIMEOUT_EXTENDED_MS</ref><sp/>=<sp/>10000;<sp/></highlight><highlight class="comment">//<sp/>10000ms<sp/>-<sp/>Extended<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>create<sp/>consistent<sp/>I2C<sp/>bus<sp/>configuration<sp/>(matches<sp/>replica<sp/>test<sp/>pattern)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref><sp/><ref refid="I2cComprehensiveTest_8cpp_1a7e1d0a77bdfa8c3243f86bda180c327b" kindref="member">create_test_bus_config</ref>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbb" kindref="member">hf_i2c_mode_t</ref><sp/>mode,<sp/>uint32_t<sp/>freq<sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eec" kindref="member">hf_i2c_clock_source_t</ref><sp/>clk_source<sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca25f98fdb9da6e93af206cac8a148cd65" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT</ref>,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896" kindref="member">hf_i2c_glitch_filter_t</ref><sp/>glitch_filter<sp/>=<sp/><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896a3e3f7d4ba736e80421353ee8ad59524c" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES</ref>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_power_down<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref><sp/>config<sp/>=<sp/>{};<sp/></highlight><highlight class="comment">//<sp/>Zero-init,<sp/>no<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1a716f6163484b87561aba84f289af450a" kindref="member">i2c_port</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1aa8be7e5484e64f43efca3e6dd9916ca2" kindref="member">I2C_PORT_NUM</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1a49a9dd202058114f460dc717b8628240" kindref="member">sda_io_num</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" kindref="member">TEST_SDA_PIN</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1a7bb7bf1b37dd8e03233fae19f0ca8dd3" kindref="member">scl_io_num</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" kindref="member">TEST_SCL_PIN</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1aabb20df37d5975254ef8cb0946fcd07d" kindref="member">mode</ref><sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1a645ea75d55581ef349963060db1ce03d" kindref="member">trans_queue_depth</ref><sp/>=<sp/>(mode<sp/>==<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)<sp/>?<sp/>32<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1ab051aa24c962c4cea2a3cfabc5d60681" kindref="member">clk_source</ref><sp/>=<sp/>clk_source;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1aefb3a9fa60b6135f4a5219531ba6c7d0" kindref="member">glitch_ignore_cnt</ref><sp/>=<sp/>glitch_filter;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1abc0be5bb2c7a52d8295de7fdd4e20d1f" kindref="member">intr_priority</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Match<sp/>replica<sp/>test<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1a5247921d68a6fa5cb8323f4d4c05ab47" kindref="member">flags</ref>.<ref refid="structhf__i2c__master__bus__config__t_1ae59d13c305b94ab55270bc9b7e48b4a8" kindref="member">enable_internal_pullup</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>config.<ref refid="structhf__i2c__master__bus__config__t_1a5247921d68a6fa5cb8323f4d4c05ab47" kindref="member">flags</ref>.<ref refid="structhf__i2c__master__bus__config__t_1a54a8fbac5ee4a38e1e454f86d02c0fe4" kindref="member">allow_pd</ref><sp/>=<sp/>allow_power_down;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>config;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macro<sp/>to<sp/>create<sp/>test<sp/>bus<sp/>configuration<sp/>and<sp/>bus<sp/>directly<sp/>inline<sp/>(matches<sp/>replica<sp/>test<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exactly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CREATE_TEST_BUS_INLINE(bus_var_name,<sp/>mode_val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/>hf_i2c_master_bus_config_t<sp/>bus_config<sp/>=<sp/>{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/>bus_config.i2c_port<sp/>=<sp/>I2C_PORT_NUM;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/>bus_config.sda_io_num<sp/>=<sp/>TEST_SDA_PIN;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/>bus_config.scl_io_num<sp/>=<sp/>TEST_SCL_PIN;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/>bus_config.mode<sp/>=<sp/>mode_val;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/>bus_config.trans_queue_depth<sp/>=<sp/>(mode_val<sp/>==<sp/>hf_i2c_mode_t::HF_I2C_MODE_ASYNC)<sp/>?<sp/>32<sp/>:<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/>bus_config.clk_source<sp/>=<sp/>hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>bus_config.glitch_ignore_cnt<sp/>=<sp/>hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/>bus_config.intr_priority<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/>bus_config.flags.enable_internal_pullup<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/>bus_config.flags.allow_pd<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/>auto<sp/>bus_var_name<sp/>=<sp/>std::make_unique&lt;EspI2cBus&gt;(bus_config);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/>if<sp/>(!bus_var_name-&gt;Initialize())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ESP_LOGE(TAG,<sp/>&quot;Failed<sp/>to<sp/>initialize<sp/>I2C<sp/>bus&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>FUNCTIONS<sp/>DECLARATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a789fd16b0147f2e9b5ec64337845b402" kindref="member">test_i2c_espidf_direct_api</ref>()<sp/>noexcept;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>Direct<sp/>API<sp/>Test<sp/>(FIRST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a34148e7911fe8d3fd4ed86859bbde872" kindref="member">test_i2c_espidf_wrapper_replica</ref>()<sp/>noexcept;<sp/></highlight><highlight class="comment">//<sp/>EspI2cBus<sp/>Wrapper<sp/>Replica<sp/>Test<sp/>(SECOND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a1f80f2ea7258698231471733c1c902f1" kindref="member">test_i2c_espidf_wrapper_replica_continuous</ref>()<sp/>noexcept;<sp/></highlight><highlight class="comment">//<sp/>Continuous<sp/>replica<sp/>test<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a760250b8e120244f577e386436400f65" kindref="member">test_i2c_bus_initialization</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ae9dcba1a12d5daf31d839c8e7f74473d" kindref="member">test_i2c_bus_deinitialization</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aaad203c4b98b681c0b82fc804f8c808a" kindref="member">test_i2c_configuration_validation</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a8c20a23f919cd3715d127e8bf6af6be3" kindref="member">test_i2c_device_creation</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ac9531bd30ff1d679f65a9b8e729c069f" kindref="member">test_i2c_device_management</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aacc3800ce0aae33688324dd33a4b932a" kindref="member">test_i2c_device_probing</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aae1be4afbdde5aeda93bb6d1afd668db" kindref="member">test_i2c_bus_scanning</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a03ee0d40b01270f57b52625700b72f76" kindref="member">test_i2c_write_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aec4b99645628f46541d2adffc6d7887d" kindref="member">test_i2c_read_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a0cd2107131d8f551f97e42eb9ea6891b" kindref="member">test_i2c_write_read_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ac5a59d7e374f7725742d87841ef5ef68" kindref="member">test_i2c_error_handling</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a9455f8ca6c09c6f5a489335b451bcaf2" kindref="member">test_i2c_timeout_handling</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ad3b98b1a54dc1a35623206c178f18790" kindref="member">test_i2c_multi_device_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a12fd885a0842058c1210cc7b1de3523f" kindref="member">test_i2c_clock_speeds</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a286364be1181eb6afc457dd0c224b79f" kindref="member">test_i2c_address_modes</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a14494a20d37fa7971dbb581ae4da0101" kindref="member">test_i2c_esp_specific_features</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a5c77a30ba09909178786f0008d9722af" kindref="member">test_i2c_thread_safety</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a7f8a5bb8e7f843262311cbd896763299" kindref="member">test_i2c_performance</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a81530af7f12a036b4370f6813e92e5bf" kindref="member">test_i2c_edge_cases</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aa06f88219fc5cd4a1f4f05913c351f9e" kindref="member">test_i2c_power_management</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>ASYNC<sp/>OPERATION<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a533e88112389466272691e086466bf0c" kindref="member">test_i2c_async_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a6f3a86582dcf68467cab5b1788728be1" kindref="member">test_i2c_async_timeout_handling</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a214f128cc749be5b85d9798fb95d5ef6" kindref="member">test_i2c_async_multiple_operations</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>INDEX-BASED<sp/>ACCESS<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a2cea341139816eb26374b5c0b066cb4b" kindref="member">test_i2c_index_based_access</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>MODE-AWARE<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a2f44ff787a2bd60a1c55e3be666ce15a" kindref="member">test_i2c_sync_mode</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1abfd742698bfae28ee20752c00d3cc114" kindref="member">test_i2c_async_mode</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a32902ab50a8fda7a5090fdfbb542665f" kindref="member">test_i2c_mode_switching</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ab3de99abef28beef615a55649f8c2acf" kindref="member">test_i2c_basic_functionality</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>PROBE<sp/>COMPARISON<sp/>TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a0eee833f9af41ffc27f229d71b38ab19" kindref="member">test_i2c_probe_methods_comparison</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ad412801adee7f6475dbc1dbce403b411" kindref="member">verify_device_functionality</ref>(<ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device)<sp/>noexcept;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST<sp/>FUNCTIONS<sp/>IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a760250b8e120244f577e386436400f65" kindref="member">test_i2c_bus_initialization</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>Basic<sp/>initialization<sp/>(using<sp/>replica<sp/>test<sp/>pattern)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>not<sp/>marked<sp/>as<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2:<sp/>Double<sp/>initialization<sp/>should<sp/>succeed<sp/>(idempotent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;Initialize())<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>initialization<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>3:<sp/>Verify<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>config<sp/>=<sp/>test_bus-&gt;GetConfig();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.sda_io_num<sp/>!=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" kindref="member">TEST_SDA_PIN</ref><sp/>||<sp/>config.scl_io_num<sp/>!=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" kindref="member">TEST_SCL_PIN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Configuration<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Bus<sp/>initialization<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ae9dcba1a12d5daf31d839c8e7f74473d" kindref="member">test_i2c_bus_deinitialization</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>deinitialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;Deinitialize())<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>deinitialize<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_bus-&gt;IsInitialized())<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>still<sp/>marked<sp/>as<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>double<sp/>deinitialization<sp/>should<sp/>succeed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;Deinitialize())<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>deinitialization<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Bus<sp/>deinitialization<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aaad203c4b98b681c0b82fc804f8c808a" kindref="member">test_i2c_configuration_validation</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>various<sp/>clock<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clk_src<sp/>:<sp/>{<ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca25f98fdb9da6e93af206cac8a148cd65" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT</ref>,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca169d87c44c6bfed6e95386179190e54c" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_RC_FAST</ref>,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca9118475498168851f3512a48a95b444f" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_XTAL</ref>})<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>with<sp/>clock<sp/>source<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(clk_src));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>test_bus-&gt;Deinitialize();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>glitch<sp/>filter<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filter<sp/>:<sp/>{<ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896ae5226d48524c1ed4cb899149c4937e9f" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_0_CYCLES</ref>,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896a4ac0b9ca019ffb2234a7522135470f94" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_3_CYCLES</ref>,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896a3e3f7d4ba736e80421353ee8ad59524c" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES</ref>})<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>test_bus-&gt;Deinitialize();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Configuration<sp/>validation<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a8c20a23f919cd3715d127e8bf6af6be3" kindref="member">test_i2c_device_creation</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>Create<sp/>device<sp/>with<sp/>7-bit<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>7-bit<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>created<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1a:<sp/>Device<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="classBaseI2c_1aa0015d0aff3de7f30f7444935a50c094" kindref="member">IsInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>should<sp/>not<sp/>be<sp/>initialized<sp/>after<sp/>creation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1b:<sp/>Initialize<sp/>the<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1c:<sp/>Device<sp/>should<sp/>now<sp/>be<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1aa0015d0aff3de7f30f7444935a50c094" kindref="member">IsInitialized</ref>())<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>should<sp/>be<sp/>initialized<sp/>after<sp/>Initialize()<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2:<sp/>Verify<sp/>device<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_bus-&gt;GetDeviceCount()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>count<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>3:<sp/>Create<sp/>device<sp/>with<sp/>10-bit<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config_10bit<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>device_config_10bit.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>0x200;<sp/></highlight><highlight class="comment">//<sp/>10-bit<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>device_config_10bit.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5a45df569b9197ddad13bf019e52a66cb5" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_10_BIT</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>device_config_10bit.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ab24807f3c51fd761d31353418fa649e5" kindref="member">FAST_FREQ</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index_10bit<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config_10bit);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index_10bit<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>10-bit<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device_10bit<sp/>=<sp/>test_bus-&gt;GetDevice(device_index_10bit);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device_10bit)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>10-bit<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>3a:<sp/>Initialize<sp/>the<sp/>10-bit<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device_10bit-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>10-bit<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4:<sp/>Verify<sp/>multiple<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_bus-&gt;GetDeviceCount()<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>count<sp/>after<sp/>second<sp/>device<sp/>incorrect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Device<sp/>creation<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ac9531bd30ff1d679f65a9b8e729c069f" kindref="member">test_i2c_device_management</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>multiple<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>device_indices;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>addr<sp/>=<sp/>0x10;<sp/>addr<sp/>&lt;=<sp/>0x13;<sp/>++addr)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>device<sp/>with<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>addr);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>device_indices.push_back(idx);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>all<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>:<sp/>device_indices)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(idx);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>device<sp/>at<sp/>index<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device<sp/>at<sp/>index<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>device<sp/>lookup<sp/>by<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>addr<sp/>=<sp/>0x10;<sp/>addr<sp/>&lt;=<sp/>0x13;<sp/>++addr)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDeviceByAddress(addr);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>device<sp/>with<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>addr);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>device<sp/>removal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>uint16_t<sp/>remove_addr<sp/>=<sp/>0x11;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;RemoveDeviceByAddress(remove_addr))<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>remove<sp/>device<sp/>with<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>remove_addr);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>device<sp/>is<sp/>gone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>removed_device<sp/>=<sp/>test_bus-&gt;GetDeviceByAddress(remove_addr);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(removed_device)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>with<sp/>address<sp/>0x%02X<sp/>still<sp/>exists<sp/>after<sp/>removal&quot;</highlight><highlight class="normal">,<sp/>remove_addr);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>remaining<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_bus-&gt;GetDeviceCount()<sp/>!=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>count<sp/>after<sp/>removal<sp/>incorrect:<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>test_bus-&gt;GetDeviceCount());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Device<sp/>management<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aacc3800ce0aae33688324dd33a4b932a" kindref="member">test_i2c_device_probing</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>probing<sp/>non-existent<sp/>device<sp/>with<sp/>fast<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exists<sp/>=<sp/>test_bus-&gt;ProbeDevice(<ref refid="I2cComprehensiveTest_8cpp_1aea1a58ed6eb8e3331e19a2cb9ed3619b" kindref="member">NONEXISTENT_ADDR</ref>,<sp/><ref refid="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" kindref="member">TIMEOUT_VERY_FAST_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Probe<sp/>result<sp/>for<sp/>address<sp/>0x%02X:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1aea1a58ed6eb8e3331e19a2cb9ed3619b" kindref="member">NONEXISTENT_ADDR</ref>,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exists<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;EXISTS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NOT<sp/>FOUND&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>We<sp/>can&apos;t<sp/>guarantee<sp/>specific<sp/>devices<sp/>are<sp/>connected,<sp/>so<sp/>we&apos;ll<sp/>just<sp/>verify<sp/>the<sp/>method<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>doesn&apos;t<sp/>crash.<sp/>In<sp/>a<sp/>real<sp/>test<sp/>environment,<sp/>you<sp/>would<sp/>connect<sp/>known<sp/>devices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Device<sp/>probing<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aae1be4afbdde5aeda93bb6d1afd668db" kindref="member">test_i2c_bus_scanning</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>the<sp/>bus<sp/>for<sp/>devices<sp/>with<sp/>fast<sp/>scanning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>std::vector&lt;hf_u16_t&gt;<sp/>found_devices;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>device_count<sp/>=</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_bus-&gt;ScanDevices(found_devices,<sp/>0x08,<sp/>0x77,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a84c097e1bded3ed9c6986be98c286bfe" kindref="member">TIMEOUT_FAST_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>scan<sp/>found<sp/>%zu<sp/>devices&quot;</highlight><highlight class="normal">,<sp/>device_count);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addr<sp/>:<sp/>found_devices)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-<sp/>Device<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>addr);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>custom<sp/>scan<sp/>range<sp/>with<sp/>fast<sp/>scanning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>std::vector&lt;hf_u16_t&gt;<sp/>limited_scan;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limited_count<sp/>=</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_bus-&gt;ScanDevices(limited_scan,<sp/>0x20,<sp/>0x30,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a84c097e1bded3ed9c6986be98c286bfe" kindref="member">TIMEOUT_FAST_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Limited<sp/>scan<sp/>(0x20-0x30)<sp/>found<sp/>%zu<sp/>devices&quot;</highlight><highlight class="normal">,<sp/>limited_count);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Bus<sp/>scanning<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a03ee0d40b01270f57b52625700b72f76" kindref="member">test_i2c_write_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>various<sp/>write<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>uint8_t<sp/>single_byte<sp/>=<sp/>0xAA;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(&amp;single_byte,<sp/>1);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Single<sp/>byte<sp/>write<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>uint8_t<sp/>multi_bytes[]<sp/>=<sp/>{0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(multi_bytes,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(multi_bytes));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Multi-byte<sp/>write<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(multi_bytes,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(multi_bytes),<sp/><ref refid="I2cComprehensiveTest_8cpp_1a3b185b68c8beed8fdf9b0d0b21dbfcaa" kindref="member">TIMEOUT_MEDIUM_MS</ref>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>with<sp/>timeout<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>zero-length<sp/>write<sp/>(should<sp/>fail)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Zero-length<sp/>write<sp/>unexpectedly<sp/>succeeded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Write<sp/>operations<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aec4b99645628f46541d2adffc6d7887d" kindref="member">test_i2c_read_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>various<sp/>read<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>uint8_t<sp/>single_byte;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(&amp;single_byte,<sp/>1);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Single<sp/>byte<sp/>read<sp/>result:<sp/>%s<sp/>(data:<sp/>0x%02X)&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data(),</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>single_byte);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>uint8_t<sp/>multi_bytes[8];</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(multi_bytes,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(multi_bytes));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Multi-byte<sp/>read<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(multi_bytes,<sp/>4,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a3b185b68c8beed8fdf9b0d0b21dbfcaa" kindref="member">TIMEOUT_MEDIUM_MS</ref>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>with<sp/>timeout<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Read<sp/>operations<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a0cd2107131d8f551f97e42eb9ea6891b" kindref="member">test_i2c_write_read_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>write-read<sp/>operation<sp/>(typical<sp/>register<sp/>read)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>uint8_t<sp/>reg_addr<sp/>=<sp/>0x10;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>uint8_t<sp/>read_data[4];</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1a58da16ee4e2762bed7b2541491b3147b" kindref="member">WriteRead</ref>(&amp;reg_addr,<sp/>1,<sp/>read_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_data));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write-read<sp/>operation<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1a58da16ee4e2762bed7b2541491b3147b" kindref="member">WriteRead</ref>(&amp;reg_addr,<sp/>1,<sp/>read_data,<sp/>2,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a3b185b68c8beed8fdf9b0d0b21dbfcaa" kindref="member">TIMEOUT_MEDIUM_MS</ref>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write-read<sp/>with<sp/>timeout<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Write-read<sp/>operations<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ac5a59d7e374f7725742d87841ef5ef68" kindref="member">test_i2c_error_handling</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>operations<sp/>on<sp/>non-existent<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1aea1a58ed6eb8e3331e19a2cb9ed3619b" kindref="member">NONEXISTENT_ADDR</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>operations<sp/>that<sp/>should<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>uint8_t<sp/>dummy_data<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(&amp;dummy_data,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>to<sp/>non-existent<sp/>device<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(&amp;dummy_data,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>from<sp/>non-existent<sp/>device<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>invalid<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>with<sp/>null<sp/>pointer<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>with<sp/>null<sp/>pointer<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Error<sp/>handling<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a9455f8ca6c09c6f5a489335b451bcaf2" kindref="member">test_i2c_timeout_handling</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>device<sp/>for<sp/>timeout<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1aea1a58ed6eb8e3331e19a2cb9ed3619b" kindref="member">NONEXISTENT_ADDR</ref>;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>various<sp/>timeout<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>uint8_t<sp/>dummy_data<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>uint64_t<sp/>start_time,<sp/>end_time;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Short<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(&amp;dummy_data,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>uint64_t<sp/>duration_ms<sp/>=<sp/>(end_time<sp/>-<sp/>start_time)<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Short<sp/>timeout<sp/>test:<sp/>%s<sp/>(took<sp/>%llu<sp/>ms)&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data(),</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration_ms);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Very<sp/>short<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(&amp;dummy_data,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" kindref="member">TIMEOUT_VERY_FAST_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Very<sp/>fast<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>duration_ms<sp/>=<sp/>(end_time<sp/>-<sp/>start_time)<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Very<sp/>short<sp/>timeout<sp/>test:<sp/>%s<sp/>(took<sp/>%llu<sp/>ms)&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data(),</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration_ms);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Timeout<sp/>handling<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ad3b98b1a54dc1a35623206c178f18790" kindref="member">test_i2c_multi_device_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>multiple<sp/>devices<sp/>with<sp/>different<sp/>configurations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>std::vector&lt;BaseI2c*&gt;<sp/>devices;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>std::vector&lt;uint16_t&gt;<sp/>addresses<sp/>=<sp/>{0x48,<sp/>0x50,<sp/>0x68,<sp/>0x76};</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>speeds<sp/>=<sp/>{<ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>,<sp/><ref refid="I2cComprehensiveTest_8cpp_1ab24807f3c51fd761d31353418fa649e5" kindref="member">FAST_FREQ</ref>,<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>,<sp/><ref refid="I2cComprehensiveTest_8cpp_1ab24807f3c51fd761d31353418fa649e5" kindref="member">FAST_FREQ</ref>};</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>addresses.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>addresses[i];</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/>speeds[i];</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>device<sp/>%zu<sp/>(addr<sp/>0x%02X)&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>addresses[i]);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device<sp/>%zu<sp/>(addr<sp/>0x%02X)&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>addresses[i]);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>devices.push_back(device);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>%zu<sp/>devices<sp/>on<sp/>the<sp/>bus&quot;</highlight><highlight class="normal">,<sp/>devices.size());</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>concurrent<sp/>operations<sp/>(simulate<sp/>real-world<sp/>usage)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>device<sp/>:<sp/>devices)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>test_data<sp/>=<sp/>0xAA;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(&amp;test_data,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Multi-device<sp/>write<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>between<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" kindref="member">TIMEOUT_VERY_FAST_MS</ref>));</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Multi-device<sp/>operations<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a12fd885a0842058c1210cc7b1de3523f" kindref="member">test_i2c_clock_speeds</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>test_speeds<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>100000,<sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>400000,<sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1000000<sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>mode<sp/>plus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>speed<sp/>:<sp/>test_speeds)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>device<sp/>with<sp/>this<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/>speed;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>device<sp/>with<sp/>speed<sp/>%lu<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>speed);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>*<sp/>esp_device<sp/>=<sp/>test_bus-&gt;GetEspDevice(device_index);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_device)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device-&gt;<ref refid="classEspI2cDevice_1a6b441d54a4f47e124dd6e5f48a23c7f9" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device<sp/>with<sp/>speed<sp/>%lu<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>speed);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>actual_freq;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>esp_device-&gt;<ref refid="classEspI2cDevice_1ae6b946adfab6d0a38cac6e5543bf8d26" kindref="member">GetActualClockFrequency</ref>(actual_freq);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Speed<sp/>%lu<sp/>Hz:<sp/>actual<sp/>frequency<sp/>%lu<sp/>Hz<sp/>(result:<sp/>%s)&quot;</highlight><highlight class="normal">,<sp/>speed,<sp/>actual_freq,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>tested<sp/>clock<sp/>speed:<sp/>%lu<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>speed);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Clock<sp/>speed<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a286364be1181eb6afc457dd0c224b79f" kindref="member">test_i2c_address_modes</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>7-bit<sp/>addressing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config_7bit<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>device_config_7bit.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>0x48;<sp/></highlight><highlight class="comment">//<sp/>7-bit<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>device_config_7bit.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>device_config_7bit.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index_7bit<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config_7bit);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index_7bit<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>7-bit<sp/>address<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>10-bit<sp/>addressing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config_10bit<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>device_config_10bit.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>0x200;<sp/></highlight><highlight class="comment">//<sp/>10-bit<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>device_config_10bit.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5a45df569b9197ddad13bf019e52a66cb5" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_10_BIT</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>device_config_10bit.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index_10bit<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config_10bit);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index_10bit<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>10-bit<sp/>address<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>both<sp/>devices<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device_7bit<sp/>=<sp/>test_bus-&gt;GetDevice(device_index_7bit);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device_10bit<sp/>=<sp/>test_bus-&gt;GetDevice(device_index_10bit);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device_7bit<sp/>||<sp/>!device_10bit)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>retrieve<sp/>created<sp/>devices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>created<sp/>devices<sp/>with<sp/>7-bit<sp/>and<sp/>10-bit<sp/>addressing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Address<sp/>mode<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a14494a20d37fa7971dbb581ae4da0101" kindref="member">test_i2c_esp_specific_features</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>different<sp/>clock<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clk_src<sp/>:<sp/>{<ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca25f98fdb9da6e93af206cac8a148cd65" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT</ref>,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca9118475498168851f3512a48a95b444f" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_XTAL</ref>})<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>with<sp/>clock<sp/>source<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(clk_src));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>initialized<sp/>with<sp/>clock<sp/>source<sp/>%d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(clk_src));</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>test_bus-&gt;Deinitialize();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>power<sp/>management<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>initialized<sp/>with<sp/>power<sp/>management<sp/>features&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>ESP-specific<sp/>feature<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a5c77a30ba09909178786f0008d9722af" kindref="member">test_i2c_thread_safety</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>would<sp/>require<sp/>multiple<sp/>tasks<sp/>in<sp/>a<sp/>real<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now,<sp/>we&apos;ll<sp/>just<sp/>verify<sp/>the<sp/>mutex<sp/>protection<sp/>doesn&apos;t<sp/>break<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>device<sp/>for<sp/>thread<sp/>safety<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>device<sp/>for<sp/>thread<sp/>safety<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device<sp/>for<sp/>thread<sp/>safety<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>multiple<sp/>operations<sp/>with<sp/>proper<sp/>delays<sp/>to<sp/>prevent<sp/>bus<sp/>hanging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>thread<sp/>safety<sp/>with<sp/>%d<sp/>operation<sp/>pairs&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>overall<sp/>timeout<sp/>protection<sp/>to<sp/>prevent<sp/>infinite<sp/>hanging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>uint64_t<sp/>test_start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>max_test_duration_us<sp/>=<sp/>30000000;<sp/></highlight><highlight class="comment">//<sp/>30<sp/>seconds<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>overall<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((esp_timer_get_time()<sp/>-<sp/>test_start_time)<sp/>&gt;<sp/>max_test_duration_us)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>safety<sp/>test<sp/>timeout<sp/>-<sp/>stopping<sp/>after<sp/>%d<sp/>operations&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>operation<sp/>with<sp/>reasonable<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>write_result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(&amp;data,<sp/>1,<sp/>200);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_result<sp/>!=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>operation<sp/>%d<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>i,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(write_result).data());</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>testing<sp/>other<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>to<sp/>allow<sp/>bus<sp/>to<sp/>stabilize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(10));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>operation<sp/>with<sp/>reasonable<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>read_data;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>read_result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(&amp;read_data,<sp/>1,<sp/>200);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>!=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>operation<sp/>%d<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>i,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(read_result).data());</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>testing<sp/>other<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Additional<sp/>delay<sp/>between<sp/>operation<sp/>pairs<sp/>to<sp/>prevent<sp/>bus<sp/>congestion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(20));</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGD(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Operation<sp/>pair<sp/>%d<sp/>completed:<sp/>write=%s,<sp/>read=%s&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(write_result).data(),<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(read_result).data());</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>uint64_t<sp/>test_duration_us<sp/>=<sp/>esp_timer_get_time()<sp/>-<sp/>test_start_time;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>safety<sp/>test<sp/>completed<sp/>in<sp/>%llu<sp/>μs&quot;</highlight><highlight class="normal">,<sp/>test_duration_us);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Thread<sp/>safety<sp/>tests<sp/>passed<sp/>(basic<sp/>verification)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a7f8a5bb8e7f843262311cbd896763299" kindref="member">test_i2c_performance</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>sync<sp/>mode<sp/>for<sp/>performance<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ab24807f3c51fd761d31353418fa649e5" kindref="member">FAST_FREQ</ref>;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>device<sp/>for<sp/>performance<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>device<sp/>for<sp/>performance<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device<sp/>for<sp/>performance<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performance<sp/>test:<sp/>multiple<sp/>write<sp/>operations<sp/>with<sp/>proper<sp/>delays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_operations<sp/>=<sp/>50;<sp/></highlight><highlight class="comment">//<sp/>Reduced<sp/>from<sp/>100<sp/>to<sp/>prevent<sp/>overwhelming<sp/>the<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data[16];</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>std::fill(test_data,<sp/>test_data<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data),<sp/>0xAA);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>performance<sp/>test<sp/>with<sp/>%d<sp/>operations<sp/>at<sp/>%lu<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>num_operations,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1ab24807f3c51fd761d31353418fa649e5" kindref="member">FAST_FREQ</ref>);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>uint64_t<sp/>start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>overall<sp/>timeout<sp/>protection<sp/>to<sp/>prevent<sp/>infinite<sp/>hanging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>max_test_duration_us<sp/>=<sp/>60000000;<sp/></highlight><highlight class="comment">//<sp/>60<sp/>seconds<sp/>max<sp/>for<sp/>performance<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_operations;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>overall<sp/>timeout<sp/>to<sp/>prevent<sp/>infinite<sp/>hanging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((esp_timer_get_time()<sp/>-<sp/>start_time)<sp/>&gt;<sp/>max_test_duration_us)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance<sp/>test<sp/>timeout<sp/>-<sp/>stopping<sp/>after<sp/>%d<sp/>operations&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>small<sp/>delay<sp/>between<sp/>operations<sp/>to<sp/>prevent<sp/>bus<sp/>contention</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(2));<sp/></highlight><highlight class="comment">//<sp/>2ms<sp/>delay<sp/>between<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(test_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data),<sp/><ref refid="I2cComprehensiveTest_8cpp_1a3b185b68c8beed8fdf9b0d0b21dbfcaa" kindref="member">TIMEOUT_MEDIUM_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Medium<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations++;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations++;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance<sp/>test<sp/>operation<sp/>%d<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>i,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>too<sp/>many<sp/>failures,<sp/>add<sp/>extra<sp/>delay<sp/>to<sp/>let<sp/>bus<sp/>recover</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failed_operations<sp/>&gt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>failures,<sp/>adding<sp/>recovery<sp/>delay&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1a84c097e1bded3ed9c6986be98c286bfe" kindref="member">TIMEOUT_FAST_MS</ref>));</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Progress<sp/>indicator<sp/>every<sp/>10<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>+<sp/>1)<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance<sp/>test<sp/>progress:<sp/>%d/%d<sp/>operations<sp/>completed&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1,<sp/>num_operations);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" kindref="member">TIMEOUT_VERY_FAST_MS</ref>));<sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>delay<sp/>every<sp/>10<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>uint64_t<sp/>end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>uint64_t<sp/>total_time_us<sp/>=<sp/>end_time<sp/>-<sp/>start_time;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>actual<sp/>operations<sp/>completed<sp/>(may<sp/>be<sp/>less<sp/>than<sp/>num_operations<sp/>due<sp/>to<sp/>timeout)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_operations<sp/>=<sp/>successful_operations<sp/>+<sp/>failed_operations;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg_time_ms<sp/>=</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(actual_operations<sp/>&gt;<sp/>0)<sp/>?<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)total_time_us<sp/>/<sp/>(actual_operations<sp/>*<sp/>1000.0)<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Performance<sp/>test<sp/>completed:<sp/>%d/%d<sp/>operations<sp/>in<sp/>%llu<sp/>μs&quot;</highlight><highlight class="normal">,<sp/>actual_operations,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_operations,<sp/>total_time_us);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Successful:<sp/>%d,<sp/>Failed:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>successful_operations,<sp/>failed_operations);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Average<sp/>time<sp/>per<sp/>operation:<sp/>%.2f<sp/>ms&quot;</highlight><highlight class="normal">,<sp/>avg_time_ms);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Performance<sp/>tests<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a81530af7f12a036b4370f6813e92e5bf" kindref="member">test_i2c_edge_cases</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>maximum<sp/>number<sp/>of<sp/>devices<sp/>(implementation<sp/>dependent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>device_indices;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>addr<sp/>=<sp/>0x08;<sp/>addr<sp/>&lt;<sp/>0x78;<sp/>++addr)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>device_indices.push_back(idx);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Reached<sp/>limit<sp/>or<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>maximum<sp/>of<sp/>%zu<sp/>devices&quot;</highlight><highlight class="normal">,<sp/>device_indices.size());</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>bus<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;ResetBus())<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>reset<sp/>failed<sp/>or<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>reset<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Edge<sp/>case<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1aa06f88219fc5cd4a1f4f05913c351f9e" kindref="member">test_i2c_power_management</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>with<sp/>power<sp/>down<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>bus<sp/>with<sp/>power<sp/>management&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successfully<sp/>tested<sp/>power<sp/>management<sp/>configuration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Power<sp/>management<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>ASYNC<sp/>OPERATION<sp/>TESTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a533e88112389466272691e086466bf0c" kindref="member">test_i2c_async_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>*<sp/>esp_device<sp/>=<sp/>test_bus-&gt;GetEspDevice(device_index);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>ESP<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device-&gt;<ref refid="classEspI2cDevice_1a6b441d54a4f47e124dd6e5f48a23c7f9" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>async<sp/>mode<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device-&gt;<ref refid="classEspI2cDevice_1acb1a17d5c492b23e89b95dc0c8b65805" kindref="member">IsAsyncModeSupported</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Async<sp/>mode<sp/>not<sp/>supported<sp/>on<sp/>this<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>a<sp/>failure,<sp/>just<sp/>not<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>async<sp/>write<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data[]<sp/>=<sp/>{0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04};</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>async_completed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>async_result<sp/>=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9a454c356771a52059e3ef0ba112ddd4b0" kindref="member">hf_i2c_err_t::I2C_ERR_FAILURE</ref>;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>async_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>async_callback<sp/>=<sp/>[&amp;async_completed,<sp/>&amp;async_result,<sp/>&amp;async_bytes](</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>async_completed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>async_result<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>async_bytes<sp/>=<sp/>bytes;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>async<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>esp_device-&gt;<ref refid="classEspI2cDevice_1aec34c1a94944595c127ff91e51e8f134" kindref="member">WriteAsync</ref>(test_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data),<sp/>async_callback,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a32a10ee72327a671a5fec798c52e3b0e" kindref="member">TIMEOUT_LONG_MS</ref>);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Async<sp/>write<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>completion<sp/>or<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>uint32_t<sp/>wait_timeout<sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1a742faba1dc28913f83827cf9f832b0f8" kindref="member">TIMEOUT_VERY_LONG_MS</ref>;<sp/></highlight><highlight class="comment">//<sp/>2<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>uint32_t<sp/>start_time<sp/>=<sp/>esp_timer_get_time()<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!async_completed<sp/>&amp;&amp;<sp/>((esp_timer_get_time()<sp/>/<sp/>1000)<sp/>-<sp/>start_time<sp/>&lt;<sp/>wait_timeout))<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" kindref="member">TIMEOUT_VERY_FAST_MS</ref>));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(async_completed)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Async<sp/>operation<sp/>completed<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Async<sp/>operation<sp/>did<sp/>not<sp/>complete<sp/>(expected<sp/>for<sp/>non-existent<sp/>device)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Async<sp/>operations<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a6f3a86582dcf68467cab5b1788728be1" kindref="member">test_i2c_async_timeout_handling</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>*<sp/>esp_device<sp/>=<sp/>test_bus-&gt;GetEspDevice(device_index);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>ESP<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device-&gt;<ref refid="classEspI2cDevice_1a6b441d54a4f47e124dd6e5f48a23c7f9" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>timeout<sp/>when<sp/>trying<sp/>to<sp/>start<sp/>async<sp/>operation<sp/>while<sp/>another<sp/>is<sp/>in<sp/>progress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_completed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_callback<sp/>=<sp/>[&amp;first_completed](<ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>));<sp/></highlight><highlight class="comment">//<sp/>Simulate<sp/>slow<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>first_completed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>second_callback<sp/>=<sp/>[](<ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{};</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data[]<sp/>=<sp/>{0xAA,<sp/>0xBB};</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>first<sp/>async<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result1<sp/>=<sp/>esp_device-&gt;<ref refid="classEspI2cDevice_1aec34c1a94944595c127ff91e51e8f134" kindref="member">WriteAsync</ref>(test_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data),<sp/>first_callback,</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a32a10ee72327a671a5fec798c52e3b0e" kindref="member">TIMEOUT_LONG_MS</ref>);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result1<sp/>==<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>second<sp/>async<sp/>operation<sp/>with<sp/>short<sp/>timeout<sp/>(should<sp/>timeout)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result2<sp/>=<sp/>esp_device-&gt;<ref refid="classEspI2cDevice_1aec34c1a94944595c127ff91e51e8f134" kindref="member">WriteAsync</ref>(test_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data),<sp/>second_callback,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1af4e3e60f181b8478eab878d5073ee6cc" kindref="member">TIMEOUT_VERY_FAST_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result2<sp/>==<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9a52c5fe3d8cd0c25f3dd036b17580f947" kindref="member">hf_i2c_err_t::I2C_ERR_BUS_BUSY</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>async<sp/>operation<sp/>correctly<sp/>timed<sp/>out&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Second<sp/>async<sp/>operation<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result2).data());</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Async<sp/>timeout<sp/>handling<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a214f128cc749be5b85d9798fb95d5ef6" kindref="member">test_i2c_async_multiple_operations</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>test<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>*<sp/>esp_device<sp/>=<sp/>test_bus-&gt;GetEspDevice(device_index);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>ESP<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!esp_device-&gt;<ref refid="classEspI2cDevice_1a6b441d54a4f47e124dd6e5f48a23c7f9" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>sequential<sp/>async<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>completed_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>completion_callback<sp/>=<sp/>[&amp;completed_operations](<ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes,</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>completed_operations++;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operation_id<sp/>=<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(user_data);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data[]<sp/>=<sp/>{0x10,<sp/>0x20,<sp/>0x30};</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>multiple<sp/>async<sp/>operations<sp/>sequentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>operation_id<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>int(i);<sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>In<sp/>real<sp/>code,<sp/>manage<sp/>memory<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>esp_device-&gt;<ref refid="classEspI2cDevice_1aec34c1a94944595c127ff91e51e8f134" kindref="member">WriteAsync</ref>(test_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data),<sp/>completion_callback,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_id,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a742faba1dc28913f83827cf9f832b0f8" kindref="member">TIMEOUT_VERY_LONG_MS</ref>);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Async<sp/>operation<sp/>%d<sp/>start<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>i,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>this<sp/>operation<sp/>to<sp/>complete<sp/>before<sp/>starting<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_device-&gt;<ref refid="classEspI2cDevice_1a0ab62985e51dd5aeca053f45d1ffafed" kindref="member">WaitAsyncOperationComplete</ref>(<ref refid="I2cComprehensiveTest_8cpp_1a32a10ee72327a671a5fec798c52e3b0e" kindref="member">TIMEOUT_LONG_MS</ref>);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>operation_id;<sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Async<sp/>multiple<sp/>operations<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a2cea341139816eb26374b5c0b066cb4b" kindref="member">test_i2c_index_based_access</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>test<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus<sp/>for<sp/>index<sp/>access<sp/>tests&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>multiple<sp/>device<sp/>configurations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>std::vector&lt;hf_i2c_device_config_t&gt;<sp/>device_configs;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>configs<sp/>using<sp/>the<sp/>default<sp/>constructor<sp/>and<sp/>then<sp/>set<sp/>fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>config1;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>config1.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>config1.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>config1.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>config2;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>config2.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1a10cdf7c09d5bb1d75d28128967fda944" kindref="member">TEST_DEVICE_ADDR_2</ref>;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>config2.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>config2.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>config3;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>config3.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>0x4A;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>config3.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>config3.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>config4;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>config4.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/>0x4B;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>config4.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>config4.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>device_configs.push_back(config1);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>device_configs.push_back(config2);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>device_configs.push_back(config3);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>device_configs.push_back(config4);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>devices<sp/>and<sp/>store<sp/>their<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>device_indices;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>config<sp/>:<sp/>device_configs)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>test_bus-&gt;CreateDevice(config);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>device_indices.push_back(index);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>device<sp/>at<sp/>address<sp/>0x%02X<sp/>with<sp/>index<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>config.device_address,<sp/>index);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>device<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>config.device_address);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>%zu<sp/>devices<sp/>for<sp/>index<sp/>access<sp/>testing&quot;</highlight><highlight class="normal">,<sp/>device_indices.size());</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>1:<sp/>Basic<sp/>index-based<sp/>access<sp/>using<sp/>operator[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>1:<sp/>Basic<sp/>Index-Based<sp/>Access<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>:<sp/>device_indices)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>(*test_bus)[index];</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device[%d]<sp/>=<sp/>BaseI2c*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>index,<sp/>device-&gt;<ref refid="classBaseI2c_1a99b912de8282d2d24bea723f841756db" kindref="member">GetDeviceAddress</ref>());</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device[%d]<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">,<sp/>index);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>2:<sp/>ESP-specific<sp/>device<sp/>access<sp/>using<sp/>At()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>2:<sp/>ESP-Specific<sp/>Device<sp/>Access<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>:<sp/>device_indices)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>*<sp/>esp_device<sp/>=<sp/>test_bus-&gt;At(index);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esp_device)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;At(%d)<sp/>=<sp/>EspI2cDevice*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>index,</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_device-&gt;<ref refid="classEspI2cDevice_1aab6bbd8d809f7723174dcbe3d94c660a" kindref="member">GetDeviceAddress</ref>());</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;At(%d)<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">,<sp/>index);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>3:<sp/>First<sp/>and<sp/>Last<sp/>device<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>3:<sp/>First<sp/>and<sp/>Last<sp/>Device<sp/>Access<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>first_device<sp/>=<sp/>test_bus-&gt;GetFirstDevice();</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>last_device<sp/>=<sp/>test_bus-&gt;GetLastDevice();</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_device)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>device:<sp/>BaseI2c*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>first_device-&gt;<ref refid="classBaseI2c_1a99b912de8282d2d24bea723f841756db" kindref="member">GetDeviceAddress</ref>());</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;GetFirstDevice()<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_device)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Last<sp/>device:<sp/>BaseI2c*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>last_device-&gt;<ref refid="classBaseI2c_1a99b912de8282d2d24bea723f841756db" kindref="member">GetDeviceAddress</ref>());</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;GetLastDevice()<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4:<sp/>Index<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>4:<sp/>Index<sp/>Validation<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IsValidIndex(-1):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_bus-&gt;IsValidIndex(-1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IsValidIndex(0):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_bus-&gt;IsValidIndex(0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IsValidIndex(%zu):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>device_indices.size(),</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_bus-&gt;IsValidIndex(device_indices.size())<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IsValidIndex(%zu):<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>device_indices.size()<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_bus-&gt;IsValidIndex(device_indices.size()<sp/>-<sp/>1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>5:<sp/>Get<sp/>all<sp/>devices<sp/>as<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>5:<sp/>Get<sp/>All<sp/>Devices<sp/>as<sp/>Vectors<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>std::vector&lt;BaseI2c*&gt;<sp/>all_devices<sp/>=<sp/>test_bus-&gt;GetAllDevices();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;GetAllDevices()<sp/>returned<sp/>%zu<sp/>devices&quot;</highlight><highlight class="normal">,<sp/>all_devices.size());</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_devices.size()<sp/>!=<sp/>device_indices.size())<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>count<sp/>mismatch:<sp/>expected<sp/>%zu,<sp/>got<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>device_indices.size(),</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_devices.size());</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>std::vector&lt;EspI2cDevice*&gt;<sp/>all_esp_devices<sp/>=<sp/>test_bus-&gt;GetAllEspDevices();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;GetAllEspDevices()<sp/>returned<sp/>%zu<sp/>devices&quot;</highlight><highlight class="normal">,<sp/>all_esp_devices.size());</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_esp_devices.size()<sp/>!=<sp/>device_indices.size())<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP<sp/>device<sp/>count<sp/>mismatch:<sp/>expected<sp/>%zu,<sp/>got<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>device_indices.size(),</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_esp_devices.size());</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>6:<sp/>Get<sp/>device<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>6:<sp/>Get<sp/>Device<sp/>Addresses<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>std::vector&lt;hf_u16_t&gt;<sp/>addresses<sp/>=<sp/>test_bus-&gt;GetDeviceAddresses();</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>addresses:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>addresses.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>[%zu]:<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>addresses[i]);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addresses.size()<sp/>!=<sp/>device_indices.size())<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Address<sp/>count<sp/>mismatch:<sp/>expected<sp/>%zu,<sp/>got<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>device_indices.size(),</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addresses.size());</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>7:<sp/>Bus<sp/>state<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>7:<sp/>Bus<sp/>State<sp/>Queries<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;HasDevices():<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_bus-&gt;HasDevices()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IsEmpty():<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>test_bus-&gt;IsEmpty()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;GetDeviceCount():<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>test_bus-&gt;GetDeviceCount());</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;HasDevices())<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;HasDevices()<sp/>returned<sp/>false<sp/>when<sp/>devices<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_bus-&gt;IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;IsEmpty()<sp/>returned<sp/>true<sp/>when<sp/>devices<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_bus-&gt;GetDeviceCount()<sp/>!=<sp/>device_indices.size())<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;GetDeviceCount()<sp/>mismatch:<sp/>expected<sp/>%zu,<sp/>got<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>device_indices.size(),</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_bus-&gt;GetDeviceCount());</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>8:<sp/>Find<sp/>device<sp/>by<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>8:<sp/>Find<sp/>Device<sp/>by<sp/>Address<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="HardwareTypes_8h_1acf5c4ff165be8c4d15943c1d65daa1c0" kindref="member">hf_u16_t</ref><sp/>addr<sp/>:<sp/>addresses)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found_index<sp/>=<sp/>test_bus-&gt;FindDeviceIndex(addr);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;FindDeviceIndex(0x%02X)<sp/>=<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>found_index);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>device<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>addr);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>9:<sp/>Out-of-bounds<sp/>access<sp/>(should<sp/>return<sp/>nullptr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>9:<sp/>Out-of-Bounds<sp/>Access<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>out_of_bounds<sp/>=<sp/>(*test_bus)[1000];</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device[1000]<sp/>=<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>out_of_bounds<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;valid<sp/>pointer&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;nullptr<sp/>(expected)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_of_bounds<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Out-of-bounds<sp/>access<sp/>should<sp/>return<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>10:<sp/>Const<sp/>access<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>10:<sp/>Const<sp/>Access<sp/>Methods<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classEspI2cBus" kindref="compound">EspI2cBus</ref>&amp;<sp/>const_bus<sp/>=<sp/>*test_bus;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>const_device<sp/>=<sp/>const_bus[0];</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_device)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;const_bus[0]<sp/>=<sp/>const<sp/>BaseI2c*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_device-&gt;<ref refid="classBaseI2c_1a99b912de8282d2d24bea723f841756db" kindref="member">GetDeviceAddress</ref>());</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;const_bus[0]<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classEspI2cDevice" kindref="compound">EspI2cDevice</ref>*<sp/>const_esp_device<sp/>=<sp/>const_bus.<ref refid="classEspI2cBus_1a978c7722c8d5b224c3423f8acf542620" kindref="member">At</ref>(0);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_esp_device)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;const_bus.At(0)<sp/>=<sp/>const<sp/>EspI2cDevice*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_esp_device-&gt;<ref refid="classEspI2cDevice_1aab6bbd8d809f7723174dcbe3d94c660a" kindref="member">GetDeviceAddress</ref>());</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;const_bus.At(0)<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>BaseI2c*&gt;<sp/>const_all_devices<sp/>=<sp/>const_bus.<ref refid="classEspI2cBus_1ae3d92db5473c43f90534fb2dfebc6036" kindref="member">GetAllDevices</ref>();</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;const_bus.GetAllDevices()<sp/>returned<sp/>%zu<sp/>devices&quot;</highlight><highlight class="normal">,<sp/>const_all_devices.size());</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_all_devices.size()<sp/>!=<sp/>device_indices.size())<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Const<sp/>device<sp/>count<sp/>mismatch:<sp/>expected<sp/>%zu,<sp/>got<sp/>%zu&quot;</highlight><highlight class="normal">,<sp/>device_indices.size(),</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_all_devices.size());</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>11:<sp/>Iteration<sp/>over<sp/>devices<sp/>using<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>11:<sp/>Iteration<sp/>Using<sp/>Indices<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iterating<sp/>over<sp/>devices<sp/>using<sp/>indices:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_bus-&gt;GetDeviceCount();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>(*test_bus)[i];</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device)<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>[%zu]:<sp/>BaseI2c*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>device-&gt;<ref refid="classBaseI2c_1a99b912de8282d2d24bea723f841756db" kindref="member">GetDeviceAddress</ref>());</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device[%zu]<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>12:<sp/>Iteration<sp/>using<sp/>GetAllDevices()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Test<sp/>12:<sp/>Iteration<sp/>Using<sp/>GetAllDevices()<sp/>---&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iterating<sp/>over<sp/>devices<sp/>using<sp/>GetAllDevices():&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>devices<sp/>=<sp/>test_bus-&gt;GetAllDevices();</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>devices.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(devices[i])<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device[%zu]:<sp/>BaseI2c*<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>devices[i]-&gt;GetDeviceAddress());</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device[%zu]<sp/>returned<sp/>nullptr&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>i);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Index-based<sp/>access<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>MODE-AWARE<sp/>TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a2f44ff787a2bd60a1c55e3be666ce15a" kindref="member">test_i2c_sync_mode</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus<sp/>for<sp/>sync<sp/>mode<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>sync<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;IsSyncMode())<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>should<sp/>be<sp/>in<sp/>sync<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Bus<sp/>correctly<sp/>configured<sp/>for<sp/>sync<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>device<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device<sp/>for<sp/>sync<sp/>mode<sp/>test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>sync<sp/>operations<sp/>(should<sp/>work)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data[]<sp/>=<sp/>{0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04};</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(test_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data));</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sync<sp/>write<sp/>result:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Sync<sp/>mode<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1abfd742698bfae28ee20752c00d3cc114" kindref="member">test_i2c_async_mode</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>async<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;IsAsyncMode())<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>should<sp/>be<sp/>in<sp/>async<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Bus<sp/>correctly<sp/>configured<sp/>for<sp/>async<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>device<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>sync<sp/>operations<sp/>fail<sp/>(should<sp/>fail)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data[]<sp/>=<sp/>{0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04};</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(test_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test_data));</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9a7f2f0cba42ed6725b8bd1d4f3e15018b" kindref="member">hf_i2c_err_t::I2C_ERR_INVALID_STATE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Sync<sp/>operation<sp/>should<sp/>fail<sp/>in<sp/>async<sp/>mode,<sp/>got:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(result).data());</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Async<sp/>mode<sp/>correctly<sp/>blocks<sp/>sync<sp/>operations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Async<sp/>mode<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a32902ab50a8fda7a5090fdfbb542665f" kindref="member">test_i2c_mode_switching</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>with<sp/>sync<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bus-&gt;IsSyncMode())<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>should<sp/>start<sp/>in<sp/>sync<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Bus<sp/>started<sp/>in<sp/>sync<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>to<sp/>async<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bus-&gt;SwitchMode(<ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>,<sp/>5))<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>switch<sp/>to<sp/>async<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bus-&gt;IsAsyncMode())<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>should<sp/>now<sp/>be<sp/>in<sp/>async<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Successfully<sp/>switched<sp/>to<sp/>async<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>back<sp/>to<sp/>sync<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bus-&gt;SwitchMode(<ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>switch<sp/>back<sp/>to<sp/>sync<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bus-&gt;IsSyncMode())<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Bus<sp/>should<sp/>be<sp/>back<sp/>in<sp/>sync<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Successfully<sp/>switched<sp/>back<sp/>to<sp/>sync<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Mode<sp/>switching<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ab3de99abef28beef615a55649f8c2acf" kindref="member">test_i2c_basic_functionality</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>both<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mode<sp/>:<sp/>{<ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>})<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>%s<sp/>mode&quot;</highlight><highlight class="normal">,<sp/>(mode<sp/>==<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ASYNC&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;SYNC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(bus,<sp/>mode)</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>device<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1af91bb33fefde91ab6c784b3aae8191dd" kindref="member">STANDARD_FREQ</ref>;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>device<sp/>in<sp/>%s<sp/>mode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mode<sp/>==<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;async&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sync&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>device<sp/>in<sp/>%s<sp/>mode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mode<sp/>==<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;async&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sync&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>device<sp/>in<sp/>%s<sp/>mode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mode<sp/>==<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;async&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sync&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>device<sp/>probing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device-&gt;<ref refid="classBaseI2c_1a1cf1876ffa812b77cbd56d7e714df1e5" kindref="member">ProbeDevice</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Device<sp/>responds<sp/>in<sp/>%s<sp/>mode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mode<sp/>==<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;async&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sync&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>does<sp/>not<sp/>respond<sp/>in<sp/>%s<sp/>mode<sp/>(may<sp/>be<sp/>expected)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mode<sp/>==<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbbae6ff80d90aa0fbb908f1c8284ee704eb" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_ASYNC</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;async&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sync&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;✓<sp/>Basic<sp/>functionality<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NEW<sp/>PROBE<sp/>COMPARISON<sp/>TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a0eee833f9af41ffc27f229d71b38ab19" kindref="member">test_i2c_probe_methods_comparison</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>test<sp/>compares<sp/>ESP-IDF<sp/>probe<sp/>vs<sp/>Custom<sp/>Fast<sp/>Probe<sp/>timing<sp/>and<sp/>reliability&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>USE_CUSTOM_FAST_PROBE<sp/>in<sp/>EspI2c.cpp<sp/>to<sp/>switch<sp/>between<sp/>methods&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1adc5e463baf39503247dda22dfc87e095" kindref="member">CREATE_TEST_BUS_INLINE</ref>(test_bus,<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>)</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>test<sp/>bus<sp/>for<sp/>probe<sp/>comparison&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>addresses<sp/>that<sp/>are<sp/>commonly<sp/>used<sp/>by<sp/>I2C<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>std::vector&lt;uint16_t&gt;<sp/>test_addresses<sp/>=<sp/>{0x48,<sp/>0x50,<sp/>0x68,<sp/>0x76,<sp/>0x3C,<sp/>0x27,<sp/>0x23,<sp/>0x5A};</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>probe<sp/>methods<sp/>on<sp/>%zu<sp/>addresses:&quot;</highlight><highlight class="normal">,<sp/>test_addresses.size());</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addr<sp/>:<sp/>test_addresses)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>-<sp/>Address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>addr);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>each<sp/>address<sp/>with<sp/>timing<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addr<sp/>:<sp/>test_addresses)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;---<sp/>Probing<sp/>address<sp/>0x%02X<sp/>---&quot;</highlight><highlight class="normal">,<sp/>addr);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Measure<sp/>total<sp/>probe<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>probe_start_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>device_found<sp/>=<sp/>test_bus-&gt;ProbeDevice(addr,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>timeout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>probe_end_time<sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>total_probe_time_us<sp/>=<sp/>probe_end_time<sp/>-<sp/>probe_start_time;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Address<sp/>0x%02X:<sp/>%s<sp/>in<sp/>%llu<sp/>μs&quot;</highlight><highlight class="normal">,<sp/>addr,<sp/>device_found<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;FOUND&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NOT<sp/>FOUND&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_probe_time_us);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>between<sp/>probes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1a84c097e1bded3ed9c6986be98c286bfe" kindref="member">TIMEOUT_FAST_MS</ref>));</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Probe<sp/>comparison<sp/>test<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>logs<sp/>above<sp/>for<sp/>timing<sp/>differences<sp/>between<sp/>probe<sp/>methods&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[SUCCESS]<sp/>Probe<sp/>methods<sp/>comparison<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1ad412801adee7f6475dbc1dbce403b411" kindref="member">verify_device_functionality</ref>(<ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>uint8_t<sp/>test_data<sp/>=<sp/>0xAA;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(&amp;test_data,<sp/>1,<sp/><ref refid="I2cComprehensiveTest_8cpp_1addfd1783a657d72fba59e3438a4b5ff6" kindref="member">TIMEOUT_STANDARD_MS</ref>);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>!=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9a454c356771a52059e3ef0ba112ddd4b0" kindref="member">hf_i2c_err_t::I2C_ERR_FAILURE</ref>;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>DIRECT<sp/>API<sp/>TEST<sp/>-<sp/>VERIFICATION<sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a789fd16b0147f2e9b5ec64337845b402" kindref="member">test_i2c_espidf_direct_api</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>I2C<sp/>using<sp/>ESP-IDF<sp/>API<sp/>directly<sp/>(bypassing<sp/>our<sp/>wrapper)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>test<sp/>runs<sp/>FIRST<sp/>to<sp/>verify<sp/>ESP-IDF<sp/>I2C<sp/>driver<sp/>functionality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>this<sp/>test<sp/>fails,<sp/>the<sp/>issue<sp/>is<sp/>with<sp/>ESP-IDF<sp/>itself,<sp/>not<sp/>our<sp/>wrapper&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>I2C<sp/>configuration<sp/>constants<sp/>(matching<sp/>the<sp/>working<sp/>example)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>gpio_num_t<sp/>I2C_MASTER_SCL_IO<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">gpio_num_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" kindref="member">TEST_SCL_PIN</ref>);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>gpio_num_t<sp/>I2C_MASTER_SDA_IO<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">gpio_num_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" kindref="member">TEST_SDA_PIN</ref>);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>i2c_port_t<sp/>I2C_MASTER_NUM<sp/>=<sp/>I2C_NUM_0;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>I2C_MASTER_FREQ_HZ<sp/>=<sp/>100000;<sp/></highlight><highlight class="comment">//<sp/>100kHz<sp/>for<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>I2C_MASTER_TIMEOUT_MS<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF<sp/>Config:<sp/>SCL=GPIO%d,<sp/>SDA=GPIO%d,<sp/>Port=%d,<sp/>Freq=%lu<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>I2C_MASTER_SCL_IO,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_MASTER_SDA_IO,<sp/>I2C_MASTER_NUM,<sp/>I2C_MASTER_FREQ_HZ);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>1:<sp/>Initialize<sp/>I2C<sp/>master<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>1:<sp/>Initializing<sp/>I2C<sp/>master<sp/>bus...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/>i2c_master_bus_config_t<sp/>bus_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.i2c_port<sp/>=<sp/>I2C_MASTER_NUM,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.sda_io_num<sp/>=<sp/>I2C_MASTER_SDA_IO,</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.scl_io_num<sp/>=<sp/>I2C_MASTER_SCL_IO,</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.clk_source<sp/>=<sp/>I2C_CLK_SRC_DEFAULT,</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.glitch_ignore_cnt<sp/>=<sp/>7,<sp/></highlight><highlight class="comment">//<sp/>Critical<sp/>for<sp/>ESP32-C6<sp/>stability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.intr_priority<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.trans_queue_depth<sp/>=<sp/>0,<sp/></highlight><highlight class="comment">//<sp/>Sync<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enable_internal_pullup<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.allow_pd<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>i2c_master_bus_handle_t<sp/>bus_handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>esp_err_t<sp/>err<sp/>=<sp/>i2c_new_master_bus(&amp;bus_config,<sp/>&amp;bus_handle);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Failed<sp/>to<sp/>create<sp/>I2C<sp/>master<sp/>bus:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>I2C<sp/>master<sp/>bus<sp/>created<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>2:<sp/>Wait<sp/>for<sp/>bus<sp/>to<sp/>be<sp/>ready<sp/>(CRITICAL<sp/>for<sp/>ESP32-C6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>2:<sp/>Waiting<sp/>for<sp/>I2C<sp/>bus<sp/>readiness...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>err<sp/>=<sp/>i2c_master_bus_wait_all_done(bus_handle,<sp/>100);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Failed<sp/>to<sp/>wait<sp/>for<sp/>I2C<sp/>bus<sp/>readiness:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_del_master_bus(bus_handle);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>I2C<sp/>bus<sp/>is<sp/>ready<sp/>and<sp/>waiting<sp/>for<sp/>operations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>3:<sp/>Create<sp/>I2C<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>3:<sp/>Creating<sp/>I2C<sp/>device...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/>i2c_device_config_t<sp/>dev_config<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.dev_addr_length<sp/>=<sp/>I2C_ADDR_BIT_LEN_7,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.device_address<sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>,<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>our<sp/>test<sp/>device<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.scl_speed_hz<sp/>=<sp/>I2C_MASTER_FREQ_HZ,</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.scl_wait_us<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>{0},</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>i2c_master_dev_handle_t<sp/>dev_handle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/>err<sp/>=<sp/>i2c_master_bus_add_device(bus_handle,<sp/>&amp;dev_config,<sp/>&amp;dev_handle);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Failed<sp/>to<sp/>add<sp/>I2C<sp/>device:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_del_master_bus(bus_handle);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>I2C<sp/>device<sp/>created<sp/>successfully<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>4:<sp/>Extended<sp/>I2C<sp/>testing<sp/>loop<sp/>with<sp/>sufficient<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>4:<sp/>Starting<sp/>extended<sp/>I2C<sp/>testing<sp/>loop<sp/>(10<sp/>seconds)...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>test_duration<sp/>=<sp/>pdMS_TO_TICKS(10000);<sp/></highlight><highlight class="comment">//<sp/>10<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>loop_delay<sp/>=<sp/>pdMS_TO_TICKS(500);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>500ms<sp/>between<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>TickType_t<sp/>start_time<sp/>=<sp/>xTaskGetTickCount();</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>uint32_t<sp/>operation_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>uint32_t<sp/>successful_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>uint32_t<sp/>failed_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Test<sp/>loop<sp/>will<sp/>run<sp/>for<sp/>10<sp/>seconds<sp/>with<sp/>500ms<sp/>delays<sp/>between<sp/>operations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>This<sp/>provides<sp/>sufficient<sp/>time<sp/>to<sp/>thoroughly<sp/>test<sp/>I2C<sp/>functionality&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((xTaskGetTickCount()<sp/>-<sp/>start_time)<sp/>&lt;<sp/>test_duration)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/>operation_count++;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Operation<sp/>%u<sp/>-<sp/>Testing<sp/>I2C<sp/>operations...&quot;</highlight><highlight class="normal">,<sp/>operation_count);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4a:<sp/>Write<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>write_data[]<sp/>=<sp/>{0x00,<sp/>0xAA,<sp/>0x55};<sp/></highlight><highlight class="comment">//<sp/>Register<sp/>address<sp/>+<sp/>test<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>i2c_master_transmit(dev_handle,<sp/>write_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(write_data),<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Write<sp/>operation<sp/>%u<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>device)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations++;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Write<sp/>operation<sp/>%u<sp/>successful:<sp/>%zu<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(write_data));</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations++;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4b:<sp/>Read<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>read_data[2]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>i2c_master_receive(dev_handle,<sp/>read_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_data),<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Read<sp/>operation<sp/>%u<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>device)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations++;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Read<sp/>operation<sp/>%u<sp/>successful:<sp/>%zu<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_data));</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Read<sp/>data:<sp/>0x%02X<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>read_data[0],<sp/>read_data[1]);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations++;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4c:<sp/>Write-then-read<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reg_addr<sp/>=<sp/>0x00;<sp/></highlight><highlight class="comment">//<sp/>Register<sp/>address<sp/>to<sp/>read<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_transmit_receive(dev_handle,<sp/>&amp;reg_addr,<sp/>1,<sp/>read_data,<sp/>2,<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Write-then-read<sp/>operation<sp/>%u<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;device)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations++;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Write-then-read<sp/>operation<sp/>%u<sp/>successful&quot;</highlight><highlight class="normal">,<sp/>operation_count);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Read<sp/>data:<sp/>0x%02X<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>read_data[0],<sp/>read_data[1]);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations++;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4d:<sp/>Device<sp/>probing<sp/>(every<sp/>5<sp/>operations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation_count<sp/>%<sp/>5<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Probing<sp/>device<sp/>at<sp/>address<sp/>0x%02X<sp/>(operation<sp/>%u)&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>,</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>i2c_master_probe(bus_handle,<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>,<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Device<sp/>probe<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>device)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Device<sp/>probe<sp/>successful<sp/>-<sp/>device<sp/>found<sp/>at<sp/>0x%02X&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>4e:<sp/>Bus<sp/>reset<sp/>(every<sp/>10<sp/>operations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation_count<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Testing<sp/>bus<sp/>reset<sp/>(operation<sp/>%u)&quot;</highlight><highlight class="normal">,<sp/>operation_count);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>i2c_master_bus_reset(bus_handle);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Bus<sp/>reset<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>devices)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Bus<sp/>reset<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Operation<sp/>%u<sp/>completed.<sp/>Success:<sp/>%u,<sp/>Failed:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations,<sp/>failed_operations);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delay<sp/>between<sp/>operations<sp/>to<sp/>prevent<sp/>overwhelming<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(loop_delay);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Extended<sp/>testing<sp/>loop<sp/>completed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Total<sp/>operations:<sp/>%u,<sp/>Successful:<sp/>%u,<sp/>Failed:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations,<sp/>failed_operations);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Success<sp/>rate:<sp/>%.1f%%&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)successful_operations<sp/>/<sp/>operation_count<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>5:<sp/>Cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>5:<sp/>Cleaning<sp/>up<sp/>ESP-IDF<sp/>I2C<sp/>resources...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/>err<sp/>=<sp/>i2c_master_bus_rm_device(dev_handle);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Failed<sp/>to<sp/>remove<sp/>I2C<sp/>device:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>I2C<sp/>device<sp/>removed<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>err<sp/>=<sp/>i2c_del_master_bus(bus_handle);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>!=<sp/>ESP_OK)<sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>Failed<sp/>to<sp/>delete<sp/>I2C<sp/>master<sp/>bus:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>esp_err_to_name(err));</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF:<sp/>I2C<sp/>master<sp/>bus<sp/>deleted<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ESP-IDF<sp/>Direct<sp/>I2C<sp/>API<sp/>test<sp/>completed<sp/>successfully!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>confirms<sp/>that<sp/>the<sp/>ESP-IDF<sp/>I2C<sp/>driver<sp/>is<sp/>working<sp/>correctly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Any<sp/>issues<sp/>in<sp/>our<sp/>wrapper<sp/>are<sp/>not<sp/>related<sp/>to<sp/>ESP-IDF<sp/>itself&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>test<sp/>ran<sp/>for<sp/>10<sp/>seconds<sp/>with<sp/>%u<sp/>operations,<sp/>proving<sp/>I2C<sp/>stability&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>WRAPPER<sp/>REPLICA<sp/>TEST<sp/>-<sp/>COMPARISON<sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a34148e7911fe8d3fd4ed86859bbde872" kindref="member">test_i2c_espidf_wrapper_replica</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>I2C<sp/>using<sp/>EspI2cBus<sp/>wrapper<sp/>(replicating<sp/>ESP-IDF<sp/>direct<sp/>test)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>test<sp/>runs<sp/>SECOND<sp/>to<sp/>compare<sp/>wrapper<sp/>implementation<sp/>with<sp/>ESP-IDF<sp/>direct<sp/>API&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;If<sp/>this<sp/>test<sp/>fails,<sp/>the<sp/>issue<sp/>is<sp/>with<sp/>our<sp/>wrapper<sp/>implementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>identical<sp/>configuration<sp/>as<sp/>ESP-IDF<sp/>direct<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/>I2C_MASTER_SCL_IO<sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" kindref="member">TEST_SCL_PIN</ref>;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="HardwareTypes_8h_1a60a0d0e5d76ed481be9bf64c307520f9" kindref="member">hf_pin_num_t</ref><sp/>I2C_MASTER_SDA_IO<sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" kindref="member">TEST_SDA_PIN</ref>;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>i2c_port_t<sp/>I2C_MASTER_NUM<sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1aa8be7e5484e64f43efca3e6dd9916ca2" kindref="member">I2C_PORT_NUM</ref>;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>I2C_MASTER_FREQ_HZ<sp/>=<sp/>100000;<sp/></highlight><highlight class="comment">//<sp/>100kHz<sp/>for<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>I2C_MASTER_TIMEOUT_MS<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus<sp/>Config:<sp/>SCL=GPIO%d,<sp/>SDA=GPIO%d,<sp/>Port=%d,<sp/>Freq=%lu<sp/>Hz&quot;</highlight><highlight class="normal">,<sp/>I2C_MASTER_SCL_IO,</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_MASTER_SDA_IO,<sp/>I2C_MASTER_NUM,<sp/>I2C_MASTER_FREQ_HZ);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>1:<sp/>Create<sp/>EspI2cBus<sp/>configuration<sp/>(matching<sp/>ESP-IDF<sp/>direct<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>1:<sp/>Creating<sp/>EspI2cBus<sp/>configuration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref><sp/>bus_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a716f6163484b87561aba84f289af450a" kindref="member">i2c_port</ref><sp/>=<sp/>I2C_MASTER_NUM;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a49a9dd202058114f460dc717b8628240" kindref="member">sda_io_num</ref><sp/>=<sp/>I2C_MASTER_SDA_IO;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a7bb7bf1b37dd8e03233fae19f0ca8dd3" kindref="member">scl_io_num</ref><sp/>=<sp/>I2C_MASTER_SCL_IO;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1aabb20df37d5975254ef8cb0946fcd07d" kindref="member">mode</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>;<sp/></highlight><highlight class="comment">//<sp/>Sync<sp/>mode<sp/>(matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a645ea75d55581ef349963060db1ce03d" kindref="member">trans_queue_depth</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sync<sp/>mode<sp/>(no<sp/>queue)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1ab051aa24c962c4cea2a3cfabc5d60681" kindref="member">clk_source</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca25f98fdb9da6e93af206cac8a148cd65" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1aefb3a9fa60b6135f4a5219531ba6c7d0" kindref="member">glitch_ignore_cnt</ref><sp/>=</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896a3e3f7d4ba736e80421353ee8ad59524c" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES</ref>;<sp/></highlight><highlight class="comment">//<sp/>Critical<sp/>for<sp/>ESP32-C6<sp/>stability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1abc0be5bb2c7a52d8295de7fdd4e20d1f" kindref="member">intr_priority</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a5247921d68a6fa5cb8323f4d4c05ab47" kindref="member">flags</ref>.<ref refid="structhf__i2c__master__bus__config__t_1ae59d13c305b94ab55270bc9b7e48b4a8" kindref="member">enable_internal_pullup</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a5247921d68a6fa5cb8323f4d4c05ab47" kindref="member">flags</ref>.<ref refid="structhf__i2c__master__bus__config__t_1a54a8fbac5ee4a38e1e454f86d02c0fe4" kindref="member">allow_pd</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>2:<sp/>Create<sp/>and<sp/>initialize<sp/>EspI2cBus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>2:<sp/>Creating<sp/>and<sp/>initializing<sp/>EspI2cBus...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_bus<sp/>=<sp/>std::make_unique&lt;EspI2cBus&gt;(bus_config);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Failed<sp/>to<sp/>create<sp/>I2C<sp/>bus<sp/>instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;Initialize())<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Failed<sp/>to<sp/>initialize<sp/>I2C<sp/>bus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>I2C<sp/>bus<sp/>initialized<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>3:<sp/>Create<sp/>I2C<sp/>device<sp/>configuration<sp/>(matching<sp/>ESP-IDF<sp/>direct<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>3:<sp/>Creating<sp/>I2C<sp/>device<sp/>configuration...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>our<sp/>test<sp/>device<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/>I2C_MASTER_FREQ_HZ;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1ad77fa8ec7a23b21a95cc54b49d9f646c" kindref="member">scl_wait_us</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a8ab82a6247382e45f57c1bb0ad703c55" kindref="member">disable_ack_check</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>4:<sp/>Add<sp/>device<sp/>to<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>4:<sp/>Adding<sp/>I2C<sp/>device<sp/>to<sp/>bus...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Failed<sp/>to<sp/>add<sp/>I2C<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>I2C<sp/>device<sp/>created<sp/>successfully<sp/>at<sp/>address<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Failed<sp/>to<sp/>get<sp/>I2C<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Failed<sp/>to<sp/>initialize<sp/>I2C<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>5:<sp/>Extended<sp/>I2C<sp/>testing<sp/>loop<sp/>(matching<sp/>ESP-IDF<sp/>direct<sp/>test<sp/>exactly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>5:<sp/>Starting<sp/>extended<sp/>I2C<sp/>testing<sp/>loop<sp/>(10<sp/>seconds)...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>test_duration<sp/>=<sp/>pdMS_TO_TICKS(10000);<sp/></highlight><highlight class="comment">//<sp/>10<sp/>seconds<sp/>(matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TickType_t<sp/>loop_delay<sp/>=</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pdMS_TO_TICKS(500);<sp/></highlight><highlight class="comment">//<sp/>500ms<sp/>between<sp/>operations<sp/>(matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/>TickType_t<sp/>start_time<sp/>=<sp/>xTaskGetTickCount();</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>uint32_t<sp/>operation_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/>uint32_t<sp/>successful_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>uint32_t<sp/>failed_operations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Test<sp/>loop<sp/>will<sp/>run<sp/>for<sp/>10<sp/>seconds<sp/>with<sp/>500ms<sp/>delays<sp/>between<sp/>operations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>This<sp/>provides<sp/>identical<sp/>timing<sp/>to<sp/>ESP-IDF<sp/>direct<sp/>test<sp/>for<sp/>comparison&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((xTaskGetTickCount()<sp/>-<sp/>start_time)<sp/>&lt;<sp/>test_duration)<sp/>{</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/>operation_count++;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Operation<sp/>%u<sp/>-<sp/>Testing<sp/>I2C<sp/>operations...&quot;</highlight><highlight class="normal">,<sp/>operation_count);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>5a:<sp/>Write<sp/>operation<sp/>(matching<sp/>ESP-IDF<sp/>test<sp/>exactly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>write_data[]<sp/>=<sp/>{0x00,<sp/>0xAA,</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x55};<sp/></highlight><highlight class="comment">//<sp/>Register<sp/>address<sp/>+<sp/>test<sp/>data<sp/>(matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>write_result<sp/>=</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(write_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(write_data),<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_result<sp/>!=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Write<sp/>operation<sp/>%u<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>device)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(write_result).data());</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations++;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Write<sp/>operation<sp/>%u<sp/>successful:<sp/>%zu<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(write_data));</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations++;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>5b:<sp/>Read<sp/>operation<sp/>(matching<sp/>ESP-IDF<sp/>test<sp/>exactly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>read_data[2]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>read_result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(read_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_data),<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read_result<sp/>!=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Read<sp/>operation<sp/>%u<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>device)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(read_result).data());</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations++;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Read<sp/>operation<sp/>%u<sp/>successful:<sp/>%zu<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_data));</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Read<sp/>data:<sp/>0x%02X<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>read_data[0],<sp/>read_data[1]);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations++;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>5c:<sp/>Write-then-read<sp/>operation<sp/>(matching<sp/>ESP-IDF<sp/>test<sp/>exactly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reg_addr<sp/>=<sp/>0x00;<sp/></highlight><highlight class="comment">//<sp/>Register<sp/>address<sp/>to<sp/>read<sp/>from<sp/>(matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>write_read_result<sp/>=</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;<ref refid="classBaseI2c_1a58da16ee4e2762bed7b2541491b3147b" kindref="member">WriteRead</ref>(&amp;reg_addr,<sp/>1,<sp/>read_data,<sp/>2,<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(write_read_result<sp/>!=<sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9ad01e55dfdc0e04d20b9ad332589e9553" kindref="member">hf_i2c_err_t::I2C_SUCCESS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Write-then-read<sp/>operation<sp/>%u<sp/>failed:<sp/>%s<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;physical<sp/>device)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count,<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(write_read_result).data());</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_operations++;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Write-then-read<sp/>operation<sp/>%u<sp/>successful&quot;</highlight><highlight class="normal">,<sp/>operation_count);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Read<sp/>data:<sp/>0x%02X<sp/>0x%02X&quot;</highlight><highlight class="normal">,<sp/>read_data[0],<sp/>read_data[1]);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations++;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>5d:<sp/>Device<sp/>probing<sp/>(every<sp/>5<sp/>operations,<sp/>matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation_count<sp/>%<sp/>5<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Probing<sp/>device<sp/>at<sp/>address<sp/>0x%02X<sp/>(operation<sp/>%u)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>,<sp/>operation_count);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>device_found<sp/>=<sp/>test_bus-&gt;ProbeDevice(<ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>,<sp/>I2C_MASTER_TIMEOUT_MS);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device_found)<sp/>{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Device<sp/>probe<sp/>failed<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>device)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Device<sp/>probe<sp/>successful<sp/>-<sp/>device<sp/>found<sp/>at<sp/>0x%02X&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>5e:<sp/>Bus<sp/>reset<sp/>(every<sp/>10<sp/>operations,<sp/>matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation_count<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Testing<sp/>bus<sp/>reset<sp/>(operation<sp/>%u)&quot;</highlight><highlight class="normal">,<sp/>operation_count);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reset_success<sp/>=<sp/>test_bus-&gt;ResetBus();</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reset_success)<sp/>{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Bus<sp/>reset<sp/>failed<sp/>(this<sp/>is<sp/>normal<sp/>without<sp/>physical<sp/>devices)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Bus<sp/>reset<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Operation<sp/>%u<sp/>completed.<sp/>Success:<sp/>%u,<sp/>Failed:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations,<sp/>failed_operations);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delay<sp/>between<sp/>operations<sp/>to<sp/>prevent<sp/>overwhelming<sp/>the<sp/>system<sp/>(matching<sp/>ESP-IDF<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(loop_delay);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Extended<sp/>testing<sp/>loop<sp/>completed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Total<sp/>operations:<sp/>%u,<sp/>Successful:<sp/>%u,<sp/>Failed:<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>operation_count,</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successful_operations,<sp/>failed_operations);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus:<sp/>Success<sp/>rate:<sp/>%.1f%%&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)successful_operations<sp/>/<sp/>operation_count<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>6:<sp/>Cleanup<sp/>(automatic<sp/>via<sp/>RAII)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>6:<sp/>Cleaning<sp/>up<sp/>EspI2cBus<sp/>resources...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>No<sp/>manual<sp/>cleanup<sp/>needed<sp/>-<sp/>EspI2cBus<sp/>destructor<sp/>handles<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>demonstrates<sp/>the<sp/>advantage<sp/>of<sp/>RAII<sp/>over<sp/>manual<sp/>ESP-IDF<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus<sp/>Wrapper<sp/>Replica<sp/>test<sp/>completed<sp/>successfully!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>confirms<sp/>that<sp/>our<sp/>EspI2cBus<sp/>wrapper<sp/>works<sp/>identically<sp/>to<sp/>ESP-IDF<sp/>direct<sp/>API&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>test<sp/>ran<sp/>for<sp/>10<sp/>seconds<sp/>with<sp/>%u<sp/>operations,<sp/>proving<sp/>wrapper<sp/>stability&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation_count);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Key<sp/>advantages<sp/>of<sp/>wrapper:<sp/>RAII<sp/>cleanup,<sp/>better<sp/>error<sp/>handling,<sp/>thread<sp/>safety&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>WRAPPER<sp/>CONTINUOUS<sp/>TEST<sp/>-<sp/>STABILITY<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="comment">//==============================================//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a1f80f2ea7258698231471733c1c902f1" kindref="member">test_i2c_espidf_wrapper_replica_continuous</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Testing<sp/>I2C<sp/>using<sp/>EspI2cBus<sp/>wrapper<sp/>continuously<sp/>for<sp/>stability&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>test<sp/>runs<sp/>the<sp/>replica<sp/>test<sp/>pattern<sp/>in<sp/>a<sp/>loop<sp/>to<sp/>identify<sp/>issues&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_iterations<sp/>=<sp/>10;<sp/></highlight><highlight class="comment">//<sp/>Test<sp/>10<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>successful_iterations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failed_iterations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration<sp/>=<sp/>1;<sp/>iteration<sp/>&lt;=<sp/>num_iterations;<sp/>iteration++)<sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n===<sp/>ITERATION<sp/>%d/%d<sp/>===&quot;</highlight><highlight class="normal">,<sp/>iteration,<sp/>num_iterations);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>identical<sp/>configuration<sp/>as<sp/>replica<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__i2c__master__bus__config__t" kindref="compound">hf_i2c_master_bus_config_t</ref><sp/>bus_config<sp/>=<sp/>{};<sp/></highlight><highlight class="comment">//<sp/>Zero-init,<sp/>no<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a716f6163484b87561aba84f289af450a" kindref="member">i2c_port</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1aa8be7e5484e64f43efca3e6dd9916ca2" kindref="member">I2C_PORT_NUM</ref>;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a49a9dd202058114f460dc717b8628240" kindref="member">sda_io_num</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ae43c39966503f14ff6eeefae950270b4" kindref="member">TEST_SDA_PIN</ref>;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a7bb7bf1b37dd8e03233fae19f0ca8dd3" kindref="member">scl_io_num</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1ad5cc7e56ce3191755bf9405e323137f9" kindref="member">TEST_SCL_PIN</ref>;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1aabb20df37d5975254ef8cb0946fcd07d" kindref="member">mode</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1acc25f7d1ca11777e327c8512d4137bbba6463b28dbace94d94503d1dd60bf07cf" kindref="member">hf_i2c_mode_t::HF_I2C_MODE_SYNC</ref>;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a645ea75d55581ef349963060db1ce03d" kindref="member">trans_queue_depth</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1ab051aa24c962c4cea2a3cfabc5d60681" kindref="member">clk_source</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ad7608886f1256b486962da79dab16eeca25f98fdb9da6e93af206cac8a148cd65" kindref="member">hf_i2c_clock_source_t::HF_I2C_CLK_SRC_DEFAULT</ref>;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1aefb3a9fa60b6135f4a5219531ba6c7d0" kindref="member">glitch_ignore_cnt</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1a1bca585ef574f1ff6a207499044e1896a3e3f7d4ba736e80421353ee8ad59524c" kindref="member">hf_i2c_glitch_filter_t::HF_I2C_GLITCH_FILTER_7_CYCLES</ref>;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1abc0be5bb2c7a52d8295de7fdd4e20d1f" kindref="member">intr_priority</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a5247921d68a6fa5cb8323f4d4c05ab47" kindref="member">flags</ref>.<ref refid="structhf__i2c__master__bus__config__t_1ae59d13c305b94ab55270bc9b7e48b4a8" kindref="member">enable_internal_pullup</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>bus_config.<ref refid="structhf__i2c__master__bus__config__t_1a5247921d68a6fa5cb8323f4d4c05ab47" kindref="member">flags</ref>.<ref refid="structhf__i2c__master__bus__config__t_1a54a8fbac5ee4a38e1e454f86d02c0fe4" kindref="member">allow_pd</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>initialize<sp/>EspI2cBus<sp/>(identical<sp/>to<sp/>replica<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_bus<sp/>=<sp/>std::make_unique&lt;EspI2cBus&gt;(bus_config);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d:<sp/>Failed<sp/>to<sp/>create<sp/>I2C<sp/>bus<sp/>instance&quot;</highlight><highlight class="normal">,<sp/>iteration);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_iterations++;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test_bus-&gt;Initialize())<sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d:<sp/>Failed<sp/>to<sp/>initialize<sp/>I2C<sp/>bus&quot;</highlight><highlight class="normal">,<sp/>iteration);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_iterations++;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>I2C<sp/>device<sp/>(identical<sp/>to<sp/>replica<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhf__i2c__device__config__t" kindref="compound">hf_i2c_device_config_t</ref><sp/>device_config<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a2043147468665929ffd3b65333a27b19" kindref="member">device_address</ref><sp/>=<sp/><ref refid="I2cComprehensiveTest_8cpp_1acc8791cc89abc27a0ce83f340a41ca72" kindref="member">TEST_DEVICE_ADDR_1</ref>;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a30e9a6a1ffbe59f64c84486fa4e4605f" kindref="member">dev_addr_length</ref><sp/>=<sp/><ref refid="EspTypes__I2C_8h_1ada5c1c4b9978d9458ddf062c6c07c7c5aa828ccf42a365ffba5559eefcdd37f01" kindref="member">hf_i2c_address_bits_t::HF_I2C_ADDR_7_BIT</ref>;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a770633f438e5e923370732a6275189d5" kindref="member">scl_speed_hz</ref><sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1ad77fa8ec7a23b21a95cc54b49d9f646c" kindref="member">scl_wait_us</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>device_config.<ref refid="structhf__i2c__device__config__t_1a8ab82a6247382e45f57c1bb0ad703c55" kindref="member">disable_ack_check</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>test_bus-&gt;CreateDevice(device_config);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d:<sp/>Failed<sp/>to<sp/>add<sp/>I2C<sp/>device&quot;</highlight><highlight class="normal">,<sp/>iteration);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_iterations++;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBaseI2c" kindref="compound">BaseI2c</ref>*<sp/>device<sp/>=<sp/>test_bus-&gt;GetDevice(device_index);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device)<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d:<sp/>Failed<sp/>to<sp/>get<sp/>I2C<sp/>device&quot;</highlight><highlight class="normal">,<sp/>iteration);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_iterations++;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>device<sp/>before<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!device-&gt;<ref refid="classBaseI2c_1adcdc753cf18e47cbc651cc608759bf32" kindref="member">Initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGE(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>test<sp/>device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>a<sp/>few<sp/>I2C<sp/>operations<sp/>(simplified<sp/>version<sp/>of<sp/>replica<sp/>test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>iteration_success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>op<sp/>=<sp/>1;<sp/>op<sp/>&lt;=<sp/>3;<sp/>op++)<sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>write_data[]<sp/>=<sp/>{0x00,<sp/>0xAA,<sp/>0x55};</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>write_result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1abdfc7c1890423f993f1c9ca261e8a15d" kindref="member">Write</ref>(write_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(write_data),<sp/>1000);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>read_data[2]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>read_result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1ab28b2ede90a847b68eb14c4b7bad6bb0" kindref="member">Read</ref>(read_data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(read_data),<sp/>1000);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write-then-read<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>reg_addr<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1a24a50f7ee1f8c547cfa287c285fe7fb9" kindref="member">hf_i2c_err_t</ref><sp/>write_read_result<sp/>=<sp/>device-&gt;<ref refid="classBaseI2c_1a58da16ee4e2762bed7b2541491b3147b" kindref="member">WriteRead</ref>(&amp;reg_addr,<sp/>1,<sp/>read_data,<sp/>2,<sp/>1000);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d,<sp/>Op<sp/>%d:<sp/>Write=%s,<sp/>Read=%s,<sp/>WriteRead=%s&quot;</highlight><highlight class="normal">,<sp/>iteration,<sp/>op,</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(write_result).data(),<sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(read_result).data(),</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="BaseI2c_8h_1ae4be4e01b5da56ce5ceffa7e4bf98fc9" kindref="member">HfI2CErrToString</ref>(write_read_result).data());</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>between<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iteration_success)<sp/>{</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_iterations++;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d:<sp/>SUCCESS&quot;</highlight><highlight class="normal">,<sp/>iteration);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failed_iterations++;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d:<sp/>FAILED&quot;</highlight><highlight class="normal">,<sp/>iteration);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>happens<sp/>automatically<sp/>via<sp/>RAII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>delay<sp/>between<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(500));</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n===<sp/>CONTINUOUS<sp/>TEST<sp/>RESULTS<sp/>===&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>iterations:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>num_iterations);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Successful:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>successful_iterations);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>failed_iterations);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Success<sp/>rate:<sp/>%.1f%%&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)successful_iterations<sp/>/<sp/>num_iterations<sp/>*<sp/>100.0f);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(successful_iterations<sp/>==<sp/>num_iterations)<sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus<sp/>Wrapper<sp/>Continuous<sp/>test<sp/>completed<sp/>successfully!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>%d<sp/>iterations<sp/>passed<sp/>-<sp/>wrapper<sp/>is<sp/>stable&quot;</highlight><highlight class="normal">,<sp/>num_iterations);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGW(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;EspI2cBus<sp/>Wrapper<sp/>Continuous<sp/>test<sp/>had<sp/>%d<sp/>failures&quot;</highlight><highlight class="normal">,<sp/>failed_iterations);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="I2cComprehensiveTest_8cpp_1a630544a7f0a2cc40d8a7fefab7e2fe70" kindref="member">app_main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╔══════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>I2C<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Target:<sp/>ESP32-C6<sp/>DevKit-M-1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>ESP-IDF:<sp/>v5.5+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Features:<sp/>I2C,<sp/>Bus<sp/>Initialization,<sp/>Device<sp/>Management,<sp/>Probing,<sp/>Scanning,<sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Write/Read,<sp/>Error<sp/>Handling,<sp/>Timeout<sp/>Handling,<sp/>Multi-Device<sp/>Operations,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Clock<sp/>Speeds,<sp/>Address<sp/>Modes,<sp/>ESP-Specific<sp/>Features,<sp/>Thread<sp/>Safety,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Performance,<sp/>Edge<sp/>Cases,<sp/>Power<sp/>Management,<sp/>Async<sp/>Operations,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Timeout<sp/>Handling,<sp/>Multiple<sp/>Operations,<sp/>Index-Based<sp/>Access,<sp/>Cleanup<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/>Architecture:<sp/>noexcept<sp/>(no<sp/>exception<sp/>handling)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1a32a10ee72327a671a5fec798c52e3b0e" kindref="member">TIMEOUT_LONG_MS</ref>));</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>progression<sp/>indicator<sp/>is<sp/>automatically<sp/>initialized<sp/>by<sp/>the<sp/>test<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>test<sp/>section<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a200bb35a3a48c625b9cb8d2511d6bd87" kindref="member">print_test_section_status</ref>(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>all<sp/>I2C<sp/>tests<sp/>based<sp/>on<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1a3fe506307d4787f60c81114b2665e6e7" kindref="member">ENABLE_CORE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>CORE<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-IDF<sp/>verification<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>ESP-IDF<sp/>verification<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;espidf_direct_api&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a789fd16b0147f2e9b5ec64337845b402" kindref="member">test_i2c_espidf_direct_api</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;espidf_wrapper_replica&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a34148e7911fe8d3fd4ed86859bbde872" kindref="member">test_i2c_espidf_wrapper_replica</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;espidf_wrapper_continuous&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a1f80f2ea7258698231471733c1c902f1" kindref="member">test_i2c_espidf_wrapper_replica_continuous</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bus<sp/>and<sp/>device<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>bus<sp/>and<sp/>device<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;bus_initialization&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a760250b8e120244f577e386436400f65" kindref="member">test_i2c_bus_initialization</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;bus_deinitialization&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1ae9dcba1a12d5daf31d839c8e7f74473d" kindref="member">test_i2c_bus_deinitialization</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;configuration_validation&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1aaad203c4b98b681c0b82fc804f8c808a" kindref="member">test_i2c_configuration_validation</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;device_creation&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a8c20a23f919cd3715d127e8bf6af6be3" kindref="member">test_i2c_device_creation</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;device_management&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1ac9531bd30ff1d679f65a9b8e729c069f" kindref="member">test_i2c_device_management</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;device_probing&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1aacc3800ce0aae33688324dd33a4b932a" kindref="member">test_i2c_device_probing</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;bus_scanning&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1aae1be4afbdde5aeda93bb6d1afd668db" kindref="member">test_i2c_bus_scanning</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1ac1e53fc92221c5c68c94ad69e2fc0aab" kindref="member">ENABLE_OPERATION_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>OPERATION<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read/write<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>read/write<sp/>operation<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;write_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a03ee0d40b01270f57b52625700b72f76" kindref="member">test_i2c_write_operations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;read_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1aec4b99645628f46541d2adffc6d7887d" kindref="member">test_i2c_read_operations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;write_read_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a0cd2107131d8f551f97e42eb9ea6891b" kindref="member">test_i2c_write_read_operations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>handling<sp/>and<sp/>timeouts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>error<sp/>handling<sp/>and<sp/>timeout<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;error_handling&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1ac5a59d7e374f7725742d87841ef5ef68" kindref="member">test_i2c_error_handling</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;timeout_handling&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a9455f8ca6c09c6f5a489335b451bcaf2" kindref="member">test_i2c_timeout_handling</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;multi_device_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1ad3b98b1a54dc1a35623206c178f18790" kindref="member">test_i2c_multi_device_operations</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1abfa5952b4fe92644c9d6cf38c362f1a6" kindref="member">ENABLE_ADVANCED_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>ADVANCED<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ESP-specific<sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>ESP-specific<sp/>feature<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;esp_specific_features&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a14494a20d37fa7971dbb581ae4da0101" kindref="member">test_i2c_esp_specific_features</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;thread_safety&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a5c77a30ba09909178786f0008d9722af" kindref="member">test_i2c_thread_safety</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clock<sp/>speeds<sp/>and<sp/>address<sp/>modes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>clock<sp/>speed<sp/>and<sp/>address<sp/>mode<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;clock_speeds&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a12fd885a0842058c1210cc7b1de3523f" kindref="member">test_i2c_clock_speeds</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;address_modes&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a286364be1181eb6afc457dd0c224b79f" kindref="member">test_i2c_address_modes</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1a362ae025a7b83c898995613ee8fbddc7" kindref="member">ENABLE_PERFORMANCE_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>PERFORMANCE<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Performance<sp/>and<sp/>edge<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>performance<sp/>and<sp/>edge<sp/>case<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;performance&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a7f8a5bb8e7f843262311cbd896763299" kindref="member">test_i2c_performance</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;edge_cases&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a81530af7f12a036b4370f6813e92e5bf" kindref="member">test_i2c_edge_cases</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;power_management&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1aa06f88219fc5cd4a1f4f05913c351f9e" kindref="member">test_i2c_power_management</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1a742c0e25111e9ee95def05464cab957b" kindref="member">RUN_TEST_SECTION_IF_ENABLED</ref>(</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="I2cComprehensiveTest_8cpp_1a8b919732af89f61759068ba91ecde65e" kindref="member">ENABLE_SPECIALIZED_TESTS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>SPECIALIZED<sp/>TESTS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Async<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>async<sp/>operation<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;async_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a533e88112389466272691e086466bf0c" kindref="member">test_i2c_async_operations</ref>,<sp/>16384,<sp/>1);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;async_timeout_handling&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a6f3a86582dcf68467cab5b1788728be1" kindref="member">test_i2c_async_timeout_handling</ref>,<sp/>16384,<sp/>1);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;async_multiple_operations&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a214f128cc749be5b85d9798fb95d5ef6" kindref="member">test_i2c_async_multiple_operations</ref>,<sp/>16384,<sp/>1);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mode<sp/>and<sp/>access<sp/>patterns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>mode<sp/>and<sp/>access<sp/>pattern<sp/>tests...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;index_based_access&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a2cea341139816eb26374b5c0b066cb4b" kindref="member">test_i2c_index_based_access</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;sync_mode&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a2f44ff787a2bd60a1c55e3be666ce15a" kindref="member">test_i2c_sync_mode</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();<sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;async_mode&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1abfd742698bfae28ee20752c00d3cc114" kindref="member">test_i2c_async_mode</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;mode_switching&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a32902ab50a8fda7a5090fdfbb542665f" kindref="member">test_i2c_mode_switching</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;basic_functionality&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1ab3de99abef28beef615a55649f8c2acf" kindref="member">test_i2c_basic_functionality</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>();</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a214e38e25939e45e31ae73a073fca47f" kindref="member">RUN_TEST_IN_TASK</ref>(</highlight><highlight class="stringliteral">&quot;probe_methods_comparison&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a0eee833f9af41ffc27f229d71b38ab19" kindref="member">test_i2c_probe_methods_comparison</ref>,<sp/>8192,<sp/>1);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="TestFramework_8h_1a7bb80345e5681c19686df292fa897daf" kindref="member">flip_test_progress_indicator</ref>(););</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><ref refid="TestFramework_8h_1ab7e4c076755ecdf2ad6212cb8f6578ab" kindref="member">print_test_summary</ref>(<ref refid="I2cComprehensiveTest_8cpp_1aaff89257c54366921eebb8ec1348b1fd" kindref="member">g_test_results</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C&quot;</highlight><highlight class="normal">,<sp/><ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>comprehensive<sp/>testing<sp/>completed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;System<sp/>will<sp/>continue<sp/>running.<sp/>Press<sp/>RESET<sp/>to<sp/>restart<sp/>tests.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╔══════════════════════════════════════════════════════════════════════════════╗&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP32-C6<sp/>I2C<sp/>COMPREHENSIVE<sp/>TEST<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;║<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HardFOC<sp/>Internal<sp/>Interface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>║&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;╚══════════════════════════════════════════════════════════════════════════════╝&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>progression<sp/>indicator<sp/>is<sp/>automatically<sp/>cleaned<sp/>up<sp/>by<sp/>the<sp/>test<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_LOGI(<ref refid="I2cComprehensiveTest_8cpp_1a5a85b9c772bbeb480b209a3e6ea92b4c" kindref="member">TAG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;System<sp/>up<sp/>and<sp/>running<sp/>for<sp/>%d<sp/>seconds&quot;</highlight><highlight class="normal">,<sp/>esp_timer_get_time()<sp/>/<sp/>1000000);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="I2cComprehensiveTest_8cpp_1a3ae7dcf112b2564560cd460ec23dfa7c" kindref="member">TIMEOUT_EXTENDED_MS</ref>));</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="examples/esp32/main/I2cComprehensiveTest.cpp"/>
  </compounddef>
</doxygen>
