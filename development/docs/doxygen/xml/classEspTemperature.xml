<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="classEspTemperature" kind="class" language="C++" prot="public">
    <compoundname>EspTemperature</compoundname>
    <basecompoundref refid="classBaseTemperature" prot="public" virt="non-virtual">BaseTemperature</basecompoundref>
    <includes refid="EspTemperature_8h" local="no">EspTemperature.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" prot="private" static="no" mutable="yes">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspTemperature::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <qualifiedname>EspTemperature::mutex_</qualifiedname>
        <briefdescription>
<para>Thread safety mutex (RTOS-aware) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="501" column="21" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" prot="private" static="no" mutable="no">
        <type><ref refid="structesp__temp__state__t" kindref="compound">esp_temp_state_t</ref></type>
        <definition>esp_temp_state_t EspTemperature::esp_state_</definition>
        <argsstring></argsstring>
        <name>esp_state_</name>
        <qualifiedname>EspTemperature::esp_state_</qualifiedname>
        <briefdescription>
<para>ESP32-specific state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="502" column="20" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a629744fc883c865e06a3f2369b577175" prot="private" static="no" mutable="no">
        <type><ref refid="structesp__temp__config__t" kindref="compound">esp_temp_config_t</ref></type>
        <definition>esp_temp_config_t EspTemperature::esp_config_</definition>
        <argsstring></argsstring>
        <name>esp_config_</name>
        <qualifiedname>EspTemperature::esp_config_</qualifiedname>
        <briefdescription>
<para>ESP32-specific configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="503" column="21" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a2587c0df6c5c4169bbec7d4fa5611917" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__temp__config__t" kindref="compound">hf_temp_config_t</ref></type>
        <definition>hf_temp_config_t EspTemperature::base_config_</definition>
        <argsstring></argsstring>
        <name>base_config_</name>
        <qualifiedname>EspTemperature::base_config_</qualifiedname>
        <briefdescription>
<para>Base class configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="504" column="20" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a4b7b5323acb43d653d70ed4bb9a665f9" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__temp__statistics__t" kindref="compound">hf_temp_statistics_t</ref></type>
        <definition>hf_temp_statistics_t EspTemperature::statistics_</definition>
        <argsstring></argsstring>
        <name>statistics_</name>
        <qualifiedname>EspTemperature::statistics_</qualifiedname>
        <briefdescription>
<para>Operation statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="505" column="24" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" prot="private" static="no" mutable="no">
        <type><ref refid="structhf__temp__diagnostics__t" kindref="compound">hf_temp_diagnostics_t</ref></type>
        <definition>hf_temp_diagnostics_t EspTemperature::diagnostics_</definition>
        <argsstring></argsstring>
        <name>diagnostics_</name>
        <qualifiedname>EspTemperature::diagnostics_</qualifiedname>
        <briefdescription>
<para>Diagnostic information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="506" column="25" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a02f93520cdb56054ca7853f9ced82ec9" prot="private" static="no" mutable="no">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::last_error_</definition>
        <argsstring></argsstring>
        <name>last_error_</name>
        <qualifiedname>EspTemperature::last_error_</qualifiedname>
        <briefdescription>
<para>Last error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="507" column="17" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1af98b41d1d3d44f8f1fe71878d2ecc7bb" prot="private" static="no" mutable="no">
        <type><ref refid="BaseTemperature_8h_1a2672848972ed3dbd28859299c8862f6b" kindref="member">hf_temp_threshold_callback_t</ref></type>
        <definition>hf_temp_threshold_callback_t EspTemperature::threshold_callback_</definition>
        <argsstring></argsstring>
        <name>threshold_callback_</name>
        <qualifiedname>EspTemperature::threshold_callback_</qualifiedname>
        <briefdescription>
<para>Base threshold callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="510" column="32" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1af516eb1e27cb63a70b6517752f1323fd" prot="private" static="no" mutable="no">
        <type><ref refid="BaseTemperature_8h_1ab15b84e22c00839c9e87a3f363efae2d" kindref="member">hf_temp_reading_callback_t</ref></type>
        <definition>hf_temp_reading_callback_t EspTemperature::monitoring_callback_</definition>
        <argsstring></argsstring>
        <name>monitoring_callback_</name>
        <qualifiedname>EspTemperature::monitoring_callback_</qualifiedname>
        <briefdescription>
<para>Base monitoring callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="511" column="30" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1ac6dc56a81910c0c1d02c32119f0afd05" prot="private" static="no" mutable="no">
        <type><ref refid="EspTemperature_8h_1a3c15ed66b8b2a3114dceb69bfbc0bd4b" kindref="member">esp_temp_threshold_callback_t</ref></type>
        <definition>esp_temp_threshold_callback_t EspTemperature::esp_threshold_callback_</definition>
        <argsstring></argsstring>
        <name>esp_threshold_callback_</name>
        <qualifiedname>EspTemperature::esp_threshold_callback_</qualifiedname>
        <briefdescription>
<para>ESP32-specific threshold callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="512" column="33" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1adba4d867f07dbbe733e55c16a3f05637" prot="private" static="no" mutable="no">
        <type><ref refid="EspTemperature_8h_1acf7521a526f974ab3bdd42de4d70aad5" kindref="member">esp_temp_monitoring_callback_t</ref></type>
        <definition>esp_temp_monitoring_callback_t EspTemperature::esp_monitoring_callback_</definition>
        <argsstring></argsstring>
        <name>esp_monitoring_callback_</name>
        <qualifiedname>EspTemperature::esp_monitoring_callback_</qualifiedname>
        <briefdescription>
<para>ESP32-specific monitoring callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="513" column="34" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a64679e2522454245be7bdba622ef8176" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* EspTemperature::threshold_user_data_</definition>
        <argsstring></argsstring>
        <name>threshold_user_data_</name>
        <qualifiedname>EspTemperature::threshold_user_data_</qualifiedname>
        <briefdescription>
<para>User data for threshold callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="514" column="8" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a8fe2e9d176f71696e4fb12afbcd25bc8" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* EspTemperature::monitoring_user_data_</definition>
        <argsstring></argsstring>
        <name>monitoring_user_data_</name>
        <qualifiedname>EspTemperature::monitoring_user_data_</qualifiedname>
        <briefdescription>
<para>User data for monitoring callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="515" column="8" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="515" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" prot="private" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char * EspTemperature::TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <qualifiedname>EspTemperature::TAG</qualifiedname>
        <initializer>= &quot;EspTemperature&quot;</initializer>
        <briefdescription>
<para>ESP-IDF logging tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="603" column="21" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1aa829f22f1d02247e2da26709702812ae" prot="private" static="yes" mutable="no">
        <type>const <ref refid="structesp__temp__range__info__t" kindref="compound">esp_temp_range_info_t</ref></type>
        <definition>const esp_temp_range_info_t EspTemperature::RANGE_INFO</definition>
        <argsstring>[]</argsstring>
        <name>RANGE_INFO</name>
        <qualifiedname>EspTemperature::RANGE_INFO</qualifiedname>
        <initializer>= {
    {<ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679a9db37d9d8ddf77ef1c17909a3da21f1e" kindref="member">ESP_TEMP_RANGE_NEG10_80</ref>, -10.0f, 80.0f, 1.0f, &quot;-10°C to 80°C (±1°C accuracy, recommended)&quot;},
    {ESP_TEMP_RANGE_20_100, 20.0f, 100.0f, 2.0f, &quot;20°C to 100°C (±2°C accuracy, high temp)&quot;},
    {ESP_TEMP_RANGE_NEG30_50, -30.0f, 50.0f, 2.0f, &quot;-30°C to 50°C (±2°C accuracy, low temp)&quot;},
    {ESP_TEMP_RANGE_50_125, 50.0f, 125.0f, 3.0f, &quot;50°C to 125°C (±3°C accuracy, extreme high)&quot;},
    {ESP_TEMP_RANGE_NEG40_20, -40.0f, 20.0f, 3.0f, &quot;-40°C to 20°C (±3°C accuracy, extreme low)&quot;}}</initializer>
        <briefdescription>
<para>Range information table. </para>
        </briefdescription>
        <detaileddescription>
<para>ESP32-C6 temperature sensor range information table.</para>
<para>Based on ESP32-C6 hardware specifications and ESP-IDF documentation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="604" column="38" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1a627914394ff10df930d340e4beecbb96" prot="private" static="yes" mutable="no">
        <type><ref refid="classRtosMutex" kindref="compound">RtosMutex</ref></type>
        <definition>RtosMutex EspTemperature::s_shared_mutex_</definition>
        <argsstring></argsstring>
        <name>s_shared_mutex_</name>
        <qualifiedname>EspTemperature::s_shared_mutex_</qualifiedname>
        <briefdescription>
<para>Protect shared handle/refcount. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="607" column="20" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1aef85506e203917c06e7d951370f983ad" prot="private" static="yes" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt; int &gt; EspTemperature::s_refcount_</definition>
        <argsstring></argsstring>
        <name>s_refcount_</name>
        <qualifiedname>EspTemperature::s_refcount_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Number of active instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="608" column="22" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="variable" id="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" prot="private" static="yes" mutable="no">
        <type>temperature_sensor_handle_t</type>
        <definition>temperature_sensor_handle_t EspTemperature::s_shared_handle_</definition>
        <argsstring></argsstring>
        <name>s_shared_handle_</name>
        <qualifiedname>EspTemperature::s_shared_handle_</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Shared ESP-IDF handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="609" column="38" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="609" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classEspTemperature_1ac40eca554ac9cdc9a732ca543a426526" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspTemperature::EspTemperature</definition>
        <argsstring>() noexcept</argsstring>
        <name>EspTemperature</name>
        <qualifiedname>EspTemperature::EspTemperature</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="201" column="3" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="63" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1af3b831d1cd2295f0d8cc30a508937cb0" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>EspTemperature::EspTemperature</definition>
        <argsstring>(const esp_temp_config_t &amp;esp_config) noexcept</argsstring>
        <name>EspTemperature</name>
        <qualifiedname>EspTemperature::EspTemperature</qualifiedname>
        <param>
          <type>const <ref refid="structesp__temp__config__t" kindref="compound">esp_temp_config_t</ref> &amp;</type>
          <declname>esp_config</declname>
        </param>
        <briefdescription>
<para>Constructor with ESP32-specific configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>esp_config</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP32-specific configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="207" column="12" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1adb49690b7b5250861ed83ecad68c39c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EspTemperature::EspTemperature</definition>
        <argsstring>(const EspTemperature &amp;)=delete</argsstring>
        <name>EspTemperature</name>
        <qualifiedname>EspTemperature::EspTemperature</qualifiedname>
        <param>
          <type>const <ref refid="classEspTemperature" kindref="compound">EspTemperature</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is deleted to avoid copying instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="212" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1aa99e89ae0cac5fcd19aac843a1bb6dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEspTemperature" kindref="compound">EspTemperature</ref> &amp;</type>
        <definition>EspTemperature &amp; EspTemperature::operator=</definition>
        <argsstring>(const EspTemperature &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>EspTemperature::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classEspTemperature" kindref="compound">EspTemperature</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Assignment operator is deleted to avoid copying instances. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="217" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a5d4b044be19bc62da664d76b1b6207b6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>EspTemperature::~EspTemperature</definition>
        <argsstring>() noexcept</argsstring>
        <name>~EspTemperature</name>
        <qualifiedname>EspTemperature::~EspTemperature</qualifiedname>
        <briefdescription>
<para>Virtual destructor for proper cleanup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="222" column="11" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a31ccbc056a1b393a230ab8a2614bba2f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetSensorInfo</definition>
        <argsstring>(hf_temp_sensor_info_t *info) const noexcept override</argsstring>
        <name>GetSensorInfo</name>
        <qualifiedname>EspTemperature::GetSensorInfo</qualifiedname>
        <reimplements refid="classBaseTemperature_1a8250ed681311b1ae3732919df8d3962a">GetSensorInfo</reimplements>
        <param>
          <type><ref refid="structhf__temp__sensor__info__t" kindref="compound">hf_temp_sensor_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Get ESP32-C6 temperature sensor information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store sensor information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="258" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="382" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1af42132c1ba77f8392eb6e7a5b055e7e2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
        <definition>hf_u32_t EspTemperature::GetCapabilities</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>GetCapabilities</name>
        <qualifiedname>EspTemperature::GetCapabilities</qualifiedname>
        <reimplements refid="classBaseTemperature_1a765c86c7680b43f7d075b9f392188611">GetCapabilities</reimplements>
        <briefdescription>
<para>Get ESP32-C6 temperature sensor capabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Capabilities flags (hf_temp_capabilities_t) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="264" column="13" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a92b30bf532e07d1f1927d4fccf5322ba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SetRange</definition>
        <argsstring>(float min_celsius, float max_celsius) noexcept override</argsstring>
        <name>SetRange</name>
        <qualifiedname>EspTemperature::SetRange</qualifiedname>
        <reimplements refid="classBaseTemperature_1a1bfe9f1a1069222166008b4dafe5a282">SetRange</reimplements>
        <param>
          <type>float</type>
          <declname>min_celsius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_celsius</declname>
        </param>
        <briefdescription>
<para>Set temperature measurement range (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum temperature in Celsius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum temperature in Celsius </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="276" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="417" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a5763ab0b92fff25c5854bcfb04a8ba9f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetRange</definition>
        <argsstring>(float *min_celsius, float *max_celsius) const noexcept override</argsstring>
        <name>GetRange</name>
        <qualifiedname>EspTemperature::GetRange</qualifiedname>
        <reimplements refid="classBaseTemperature_1a21d2b3e6c1855f666d5dc2856e9f8cea">GetRange</reimplements>
        <param>
          <type>float *</type>
          <declname>min_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max_celsius</declname>
        </param>
        <briefdescription>
<para>Get temperature measurement range (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store minimum temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store maximum temperature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="284" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="437" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ae1bfe0b1ceeb20ea8eb5010ef09f832d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetResolution</definition>
        <argsstring>(float *resolution_celsius) const noexcept override</argsstring>
        <name>GetResolution</name>
        <qualifiedname>EspTemperature::GetResolution</qualifiedname>
        <reimplements refid="classBaseTemperature_1a5362eaf0cb2478a4e060d8dfca70f3c8">GetResolution</reimplements>
        <param>
          <type>float *</type>
          <declname>resolution_celsius</declname>
        </param>
        <briefdescription>
<para>Get measurement resolution (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resolution_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store resolution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="291" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="450" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1aaeda9f32dfc75e5ca2ab15142d0c9998" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SetThresholds</definition>
        <argsstring>(float low_threshold_celsius, float high_threshold_celsius) noexcept override</argsstring>
        <name>SetThresholds</name>
        <qualifiedname>EspTemperature::SetThresholds</qualifiedname>
        <reimplements refid="classBaseTemperature_1a483f6f9ec09ecd6e8cd32c9f61836763">SetThresholds</reimplements>
        <param>
          <type>float</type>
          <declname>low_threshold_celsius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>high_threshold_celsius</declname>
        </param>
        <briefdescription>
<para>Set temperature thresholds (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Low temperature threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>High temperature threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="299" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="459" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ae122e823c11b55550cb91af01e26461e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetThresholds</definition>
        <argsstring>(float *low_threshold_celsius, float *high_threshold_celsius) const noexcept override</argsstring>
        <name>GetThresholds</name>
        <qualifiedname>EspTemperature::GetThresholds</qualifiedname>
        <reimplements refid="classBaseTemperature_1a692b8120d0ceb3ae699cd2bd0981b993">GetThresholds</reimplements>
        <param>
          <type>float *</type>
          <declname>low_threshold_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>high_threshold_celsius</declname>
        </param>
        <briefdescription>
<para>Get temperature thresholds (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store low threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high_threshold_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store high threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="308" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="488" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a1b34d89cb1cc7b03100674bea303ab5a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::EnableThresholdMonitoring</definition>
        <argsstring>(hf_temp_threshold_callback_t callback, void *user_data) noexcept override</argsstring>
        <name>EnableThresholdMonitoring</name>
        <qualifiedname>EspTemperature::EnableThresholdMonitoring</qualifiedname>
        <reimplements refid="classBaseTemperature_1a210f2f34d7f356d8ff7f0531031f7856">EnableThresholdMonitoring</reimplements>
        <param>
          <type><ref refid="BaseTemperature_8h_1a2672848972ed3dbd28859299c8862f6b" kindref="member">hf_temp_threshold_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Enable threshold monitoring (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for threshold events </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="317" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="502" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a4e1ee5a920aa4caaa151d036b79db369" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::DisableThresholdMonitoring</definition>
        <argsstring>() noexcept override</argsstring>
        <name>DisableThresholdMonitoring</name>
        <qualifiedname>EspTemperature::DisableThresholdMonitoring</qualifiedname>
        <reimplements refid="classBaseTemperature_1ad0326eb2b71271b06e2eccffe79561cd">DisableThresholdMonitoring</reimplements>
        <briefdescription>
<para>Disable threshold monitoring (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="324" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="523" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1acc1ea9c3a109b70bd67e4f285594e474" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::StartContinuousMonitoring</definition>
        <argsstring>(hf_u32_t sample_rate_hz, hf_temp_reading_callback_t callback, void *user_data) noexcept override</argsstring>
        <name>StartContinuousMonitoring</name>
        <qualifiedname>EspTemperature::StartContinuousMonitoring</qualifiedname>
        <reimplements refid="classBaseTemperature_1afd5288a4ce54793f06fab19960b38253">StartContinuousMonitoring</reimplements>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>sample_rate_hz</declname>
        </param>
        <param>
          <type><ref refid="BaseTemperature_8h_1ab15b84e22c00839c9e87a3f363efae2d" kindref="member">hf_temp_reading_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Start continuous temperature monitoring (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_rate_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampling rate in Hz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for each reading </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to pass to callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="333" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="537" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1aa34b741f4daf7a52dc832e65dc58e34f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::StopContinuousMonitoring</definition>
        <argsstring>() noexcept override</argsstring>
        <name>StopContinuousMonitoring</name>
        <qualifiedname>EspTemperature::StopContinuousMonitoring</qualifiedname>
        <reimplements refid="classBaseTemperature_1a30f3527c16c76f65e2deb4a89412e231">StopContinuousMonitoring</reimplements>
        <briefdescription>
<para>Stop continuous temperature monitoring (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="341" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="598" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1abd650022450dbbcbba8fed4085386da3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspTemperature::IsMonitoringActive</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>IsMonitoringActive</name>
        <qualifiedname>EspTemperature::IsMonitoringActive</qualifiedname>
        <reimplements refid="classBaseTemperature_1ab965dfed096914ca4a8e733b17bc978e">IsMonitoringActive</reimplements>
        <briefdescription>
<para>Check if continuous monitoring is active (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if monitoring is active, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="347" column="9" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a2665b30cb4301b8fccb577f74e4fa7fc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SetCalibrationOffset</definition>
        <argsstring>(float offset_celsius) noexcept override</argsstring>
        <name>SetCalibrationOffset</name>
        <qualifiedname>EspTemperature::SetCalibrationOffset</qualifiedname>
        <reimplements refid="classBaseTemperature_1a97cd78cf3f336211747e15a1c25d61ee">SetCalibrationOffset</reimplements>
        <param>
          <type>float</type>
          <declname>offset_celsius</declname>
        </param>
        <briefdescription>
<para>Set calibration offset (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Calibration offset in Celsius </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="354" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="643" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ad6ee47301f32825678e5838b453bd1f1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetCalibrationOffset</definition>
        <argsstring>(float *offset_celsius) const noexcept override</argsstring>
        <name>GetCalibrationOffset</name>
        <qualifiedname>EspTemperature::GetCalibrationOffset</qualifiedname>
        <reimplements refid="classBaseTemperature_1a55f58d0cccee590dd10e55c2668e7f0b">GetCalibrationOffset</reimplements>
        <param>
          <type>float *</type>
          <declname>offset_celsius</declname>
        </param>
        <briefdescription>
<para>Get calibration offset (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store calibration offset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="361" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="660" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a413c8ed18407669f80b88625990619d9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ResetCalibration</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ResetCalibration</name>
        <qualifiedname>EspTemperature::ResetCalibration</qualifiedname>
        <reimplements refid="classBaseTemperature_1a2be35c2e9f2cd233d77353591bfc3f53">ResetCalibration</reimplements>
        <briefdescription>
<para>Reset calibration to default (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="367" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="671" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a9f5edd743061fbb9b4e0929f9126a04b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::EnterSleepMode</definition>
        <argsstring>() noexcept override</argsstring>
        <name>EnterSleepMode</name>
        <qualifiedname>EspTemperature::EnterSleepMode</qualifiedname>
        <reimplements refid="classBaseTemperature_1abbef25249b2e935e8954a150519b2342">EnterSleepMode</reimplements>
        <briefdescription>
<para>Enter low power mode (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="373" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="675" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a638b5bddaec8dc5693739fc238ad6d4d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ExitSleepMode</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ExitSleepMode</name>
        <qualifiedname>EspTemperature::ExitSleepMode</qualifiedname>
        <reimplements refid="classBaseTemperature_1a52a0318d160c45fdee55b15d7148856c">ExitSleepMode</reimplements>
        <briefdescription>
<para>Exit low power mode (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="379" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="703" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ac6c685911fa0fe6bb38e1d2d8299ad2d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspTemperature::IsSleeping</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>IsSleeping</name>
        <qualifiedname>EspTemperature::IsSleeping</qualifiedname>
        <reimplements refid="classBaseTemperature_1a65f6deb4af75c89ae44723015731d195">IsSleeping</reimplements>
        <briefdescription>
<para>Check if sensor is in sleep mode (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in sleep mode, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="385" column="9" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1aed9e41b1f3d2c357d6ecd28728e49aa2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SelfTest</definition>
        <argsstring>() noexcept override</argsstring>
        <name>SelfTest</name>
        <qualifiedname>EspTemperature::SelfTest</qualifiedname>
        <reimplements refid="classBaseTemperature_1a0b23a97aea3d8455e458577c7ff937e3">SelfTest</reimplements>
        <briefdescription>
<para>Perform sensor self-test (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="391" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="729" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a0715fa9a6cd6888fa147ee67b428f193" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::CheckHealth</definition>
        <argsstring>() noexcept override</argsstring>
        <name>CheckHealth</name>
        <qualifiedname>EspTemperature::CheckHealth</qualifiedname>
        <reimplements refid="classBaseTemperature_1a201bfff0c78242bec04cadd6363d7b5d">CheckHealth</reimplements>
        <briefdescription>
<para>Check sensor health status (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS if healthy) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="397" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="782" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1af467995c9463449686b77f02be223fa9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetStatistics</definition>
        <argsstring>(hf_temp_statistics_t &amp;statistics) noexcept override</argsstring>
        <name>GetStatistics</name>
        <qualifiedname>EspTemperature::GetStatistics</qualifiedname>
        <reimplements refid="classBaseTemperature_1a67fdd88218e46666fb74cc5bf561176f">GetStatistics</reimplements>
        <param>
          <type><ref refid="structhf__temp__statistics__t" kindref="compound">hf_temp_statistics_t</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <briefdescription>
<para>Get operation statistics (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to statistics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="404" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="825" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1af91cca81090fa226453fc793f5305ec6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetDiagnostics</definition>
        <argsstring>(hf_temp_diagnostics_t &amp;diagnostics) noexcept override</argsstring>
        <name>GetDiagnostics</name>
        <qualifiedname>EspTemperature::GetDiagnostics</qualifiedname>
        <reimplements refid="classBaseTemperature_1a2634cc03a24c168a4bd5c8f9d2bd5ef8">GetDiagnostics</reimplements>
        <param>
          <type><ref refid="structhf__temp__diagnostics__t" kindref="compound">hf_temp_diagnostics_t</ref> &amp;</type>
          <declname>diagnostics</declname>
        </param>
        <briefdescription>
<para>Get diagnostic information (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diagnostics</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to diagnostics structure to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="411" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="831" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ac22266bb32b95ed3587ce5fd6efc6c94" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ResetStatistics</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ResetStatistics</name>
        <qualifiedname>EspTemperature::ResetStatistics</qualifiedname>
        <reimplements refid="classBaseTemperature_1a149ff046e0cb000bf0172dce28bc17be">ResetStatistics</reimplements>
        <briefdescription>
<para>Reset operation statistics (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="417" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="844" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ab81713abcd8583a401154ccc7617cb4e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ResetDiagnostics</definition>
        <argsstring>() noexcept override</argsstring>
        <name>ResetDiagnostics</name>
        <qualifiedname>EspTemperature::ResetDiagnostics</qualifiedname>
        <reimplements refid="classBaseTemperature_1a21a976418e428078d9ec76521a6ac17b">ResetDiagnostics</reimplements>
        <briefdescription>
<para>Reset diagnostic information (ESP32-C6 supported) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="423" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="857" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a2aa6d6cdd0f7d91c86ce759706d9f712" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::InitializeEsp32</definition>
        <argsstring>(const esp_temp_config_t &amp;esp_config) noexcept</argsstring>
        <name>InitializeEsp32</name>
        <qualifiedname>EspTemperature::InitializeEsp32</qualifiedname>
        <param>
          <type>const <ref refid="structesp__temp__config__t" kindref="compound">esp_temp_config_t</ref> &amp;</type>
          <declname>esp_config</declname>
        </param>
        <briefdescription>
<para>Initialize with ESP32-specific configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>esp_config</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP32-specific configuration structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="434" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="873" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1acd7f6f1c03014e99ddcc8816e1a666b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SetMeasurementRange</definition>
        <argsstring>(esp_temp_range_t range) noexcept</argsstring>
        <name>SetMeasurementRange</name>
        <qualifiedname>EspTemperature::SetMeasurementRange</qualifiedname>
        <param>
          <type><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref></type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Set measurement range using ESP32 enum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP32-specific range identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="441" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="878" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1af0720d47be3e3a09691ddd3dd3a7dcc8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref></type>
        <definition>esp_temp_range_t EspTemperature::GetMeasurementRange</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetMeasurementRange</name>
        <qualifiedname>EspTemperature::GetMeasurementRange</qualifiedname>
        <briefdescription>
<para>Get current measurement range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current ESP32 range identifier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="447" column="21" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="946" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a4fe823e1ee4b244049da4d6275fd7376" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::GetRangeInfo</definition>
        <argsstring>(esp_temp_range_t range, float *min_celsius, float *max_celsius, float *accuracy_celsius) const noexcept</argsstring>
        <name>GetRangeInfo</name>
        <qualifiedname>EspTemperature::GetRangeInfo</qualifiedname>
        <param>
          <type><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref></type>
          <declname>range</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>min_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>accuracy_celsius</declname>
        </param>
        <briefdescription>
<para>Get range information for a specific range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store minimum temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store maximum temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accuracy_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store accuracy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="457" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="951" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a0f6b25191668374e3ebe3b475884e110" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref></type>
        <definition>esp_temp_range_t EspTemperature::FindOptimalRange</definition>
        <argsstring>(float min_celsius, float max_celsius) const noexcept</argsstring>
        <name>FindOptimalRange</name>
        <qualifiedname>EspTemperature::FindOptimalRange</qualifiedname>
        <param>
          <type>float</type>
          <declname>min_celsius</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_celsius</declname>
        </param>
        <briefdescription>
<para>Find optimal range for given temperature requirements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum required temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum required temperature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Optimal range identifier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="466" column="21" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="966" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a495d60bf59ca709fd0f29e1f1d8498d2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ReadRawTemperature</definition>
        <argsstring>(float *raw_value) noexcept</argsstring>
        <name>ReadRawTemperature</name>
        <qualifiedname>EspTemperature::ReadRawTemperature</qualifiedname>
        <param>
          <type>float *</type>
          <declname>raw_value</declname>
        </param>
        <briefdescription>
<para>Read raw temperature value (before calibration) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>raw_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store raw temperature </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="474" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="990" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a2e11508c1cc97b8e44796d812319edeb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>temperature_sensor_handle_t</type>
        <definition>temperature_sensor_handle_t EspTemperature::GetEspHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetEspHandle</name>
        <qualifiedname>EspTemperature::GetEspHandle</qualifiedname>
        <briefdescription>
<para>Get ESP-IDF temperature sensor handle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ESP-IDF handle (nullptr if not initialized) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="480" column="32" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1009" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a97fcaa3460eec5f22eafb70e6c243642" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SetEspThresholdCallback</definition>
        <argsstring>(esp_temp_threshold_callback_t callback) noexcept</argsstring>
        <name>SetEspThresholdCallback</name>
        <qualifiedname>EspTemperature::SetEspThresholdCallback</qualifiedname>
        <param>
          <type><ref refid="EspTemperature_8h_1a3c15ed66b8b2a3114dceb69bfbc0bd4b" kindref="member">esp_temp_threshold_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set ESP32-specific threshold callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP32-specific callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="487" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1014" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a9b9b794154ed4bde92c25a416e01141d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SetEspMonitoringCallback</definition>
        <argsstring>(esp_temp_monitoring_callback_t callback) noexcept</argsstring>
        <name>SetEspMonitoringCallback</name>
        <qualifiedname>EspTemperature::SetEspMonitoringCallback</qualifiedname>
        <param>
          <type><ref refid="EspTemperature_8h_1acf7521a526f974ab3bdd42de4d70aad5" kindref="member">esp_temp_monitoring_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set ESP32-specific monitoring callback. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP32-specific callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="494" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1021" bodyend="1026"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classEspTemperature_1a92699d024919bf1f5f40cfc2a05c5465" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspTemperature::Initialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Initialize</name>
        <qualifiedname>EspTemperature::Initialize</qualifiedname>
        <reimplements refid="classBaseTemperature_1ad19ade5e58bb71af6ae98e8e34d477be">Initialize</reimplements>
        <briefdescription>
<para>ESP32-specific implementation for initialization. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialization successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="233" column="8" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="128" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1acee4cee66dd94a80f8ebd8697718560e" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>bool EspTemperature::Deinitialize</definition>
        <argsstring>() noexcept override</argsstring>
        <name>Deinitialize</name>
        <qualifiedname>EspTemperature::Deinitialize</qualifiedname>
        <reimplements refid="classBaseTemperature_1ac2af8a969cf2c755f52ba302645a4b87">Deinitialize</reimplements>
        <briefdescription>
<para>ESP32-specific implementation for deinitialization. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if deinitialization successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="239" column="8" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="195" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a0357ccb31a009ae7b55ca02db5e0c58a" prot="protected" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ReadTemperatureCelsiusImpl</definition>
        <argsstring>(float *temperature_celsius) noexcept override</argsstring>
        <name>ReadTemperatureCelsiusImpl</name>
        <qualifiedname>EspTemperature::ReadTemperatureCelsiusImpl</qualifiedname>
        <reimplements refid="classBaseTemperature_1af171259d6aa00825f0b8743d2331850e">ReadTemperatureCelsiusImpl</reimplements>
        <param>
          <type>float *</type>
          <declname>temperature_celsius</declname>
        </param>
        <briefdescription>
<para>ESP32-specific implementation for reading temperature in Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store temperature value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="246" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="292" bodyend="376"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ConvertEspError</definition>
        <argsstring>(esp_err_t esp_err) const noexcept</argsstring>
        <name>ConvertEspError</name>
        <qualifiedname>EspTemperature::ConvertEspError</qualifiedname>
        <param>
          <type>esp_err_t</type>
          <declname>esp_err</declname>
        </param>
        <briefdescription>
<para>Convert ESP-IDF error to HardFOC temperature error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>esp_err</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP-IDF error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HardFOC temperature error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="526" column="17" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1032" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a66c274c7d49953c82209768c2e862dc4" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ConfigureEspSensor</definition>
        <argsstring>() noexcept</argsstring>
        <name>ConfigureEspSensor</name>
        <qualifiedname>EspTemperature::ConfigureEspSensor</qualifiedname>
        <briefdescription>
<para>Configure ESP temperature sensor with current settings. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="532" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a4d45a64d341f4d0342807dd134045516" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::SetupRange</definition>
        <argsstring>(esp_temp_range_t range) noexcept</argsstring>
        <name>SetupRange</name>
        <qualifiedname>EspTemperature::SetupRange</qualifiedname>
        <param>
          <type><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref></type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Setup measurement range configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range to configure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS on success) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="539" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a575d8aef9720c553f8c718bca0c67417" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspTemperature::GetRangeConfig</definition>
        <argsstring>(esp_temp_range_t range, float *min_celsius, float *max_celsius, float *accuracy_celsius) const noexcept</argsstring>
        <name>GetRangeConfig</name>
        <qualifiedname>EspTemperature::GetRangeConfig</qualifiedname>
        <param>
          <type><ref refid="EspTemperature_8h_1ac20464eaa276aa198cb03d0fc5a6e679" kindref="member">esp_temp_range_t</ref></type>
          <declname>range</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>min_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>max_celsius</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>accuracy_celsius</declname>
        </param>
        <briefdescription>
<para>Get range configuration values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range to query </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store minimum temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store maximum temperature </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accuracy_celsius</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store accuracy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="548" column="8" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1053" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspTemperature::SetLastError</definition>
        <argsstring>(hf_temp_err_t error) noexcept</argsstring>
        <name>SetLastError</name>
        <qualifiedname>EspTemperature::SetLastError</qualifiedname>
        <param>
          <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Set last error code and update diagnostics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="555" column="8" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1074" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspTemperature::UpdateStatistics</definition>
        <argsstring>(bool operation_successful, hf_u32_t operation_time_us) noexcept</argsstring>
        <name>UpdateStatistics</name>
        <qualifiedname>EspTemperature::UpdateStatistics</qualifiedname>
        <param>
          <type>bool</type>
          <declname>operation_successful</declname>
        </param>
        <param>
          <type><ref refid="HardwareTypes_8h_1a0a9e8f52f8fc4d5b4c197dd3923c50fd" kindref="member">hf_u32_t</ref></type>
          <declname>operation_time_us</declname>
        </param>
        <briefdescription>
<para>Update operation statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_successful</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the operation was successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_time_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation time in microseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="562" column="8" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1079" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a805d97b69f14c4e13e9cb7736a45617d" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspTemperature::UpdateDiagnostics</definition>
        <argsstring>(hf_temp_err_t error) noexcept</argsstring>
        <name>UpdateDiagnostics</name>
        <qualifiedname>EspTemperature::UpdateDiagnostics</qualifiedname>
        <param>
          <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Update diagnostic information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code from operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="568" column="8" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1110" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ac0b3dd90b074db26ee48e66748597faa" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspTemperature::CheckThresholds</definition>
        <argsstring>(float temperature) noexcept</argsstring>
        <name>CheckThresholds</name>
        <qualifiedname>EspTemperature::CheckThresholds</qualifiedname>
        <param>
          <type>float</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Check thresholds and trigger callbacks if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Current temperature reading </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="580" column="8" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1151" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ad10997e1e06993de46d71471dd89109e" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ValidateConfig</definition>
        <argsstring>(const hf_temp_config_t *config) const noexcept</argsstring>
        <name>ValidateConfig</name>
        <qualifiedname>EspTemperature::ValidateConfig</qualifiedname>
        <param>
          <type>const <ref refid="structhf__temp__config__t" kindref="compound">hf_temp_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Validate base configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS if valid) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="587" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1ad60606f6b5e963940ac5184bdcd70296" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="BaseTemperature_8h_1a9107d93f48c1ae86146f7d60e6226a20" kindref="member">hf_temp_err_t</ref></type>
        <definition>hf_temp_err_t EspTemperature::ValidateEspConfig</definition>
        <argsstring>(const esp_temp_config_t *esp_config) const noexcept</argsstring>
        <name>ValidateEspConfig</name>
        <qualifiedname>EspTemperature::ValidateEspConfig</qualifiedname>
        <param>
          <type>const <ref refid="structesp__temp__config__t" kindref="compound">esp_temp_config_t</ref> *</type>
          <declname>esp_config</declname>
        </param>
        <briefdescription>
<para>Validate ESP32-specific configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>esp_config</parametername>
</parameternamelist>
<parameterdescription>
<para>ESP32 configuration to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code (TEMP_SUCCESS if valid) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="594" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classEspTemperature_1abe6ae1ced0d8c565b722b416cb64e9ae" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void EspTemperature::MonitoringTimerCallback</definition>
        <argsstring>(void *arg) noexcept</argsstring>
        <name>MonitoringTimerCallback</name>
        <qualifiedname>EspTemperature::MonitoringTimerCallback</qualifiedname>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Timer callback for continuous monitoring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to <ref refid="classEspTemperature" kindref="compound">EspTemperature</ref> instance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="574" column="15" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1120" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="HardwareTypes_8h_1ac4515282abcfccf45fc8855452098d0b" kindref="member">hf_u64_t</ref></type>
        <definition>hf_u64_t EspTemperature::GetCurrentTimeUs</definition>
        <argsstring>() noexcept</argsstring>
        <name>GetCurrentTimeUs</name>
        <qualifiedname>EspTemperature::GetCurrentTimeUs</qualifiedname>
        <briefdescription>
<para>Get current timestamp in microseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current timestamp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/mcu/esp32/EspTemperature.h" line="600" column="19" bodyfile="src/mcu/esp32/EspTemperature.cpp" bodystart="1183" bodyend="1185"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>ESP32-C6 internal temperature sensor implementation. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides a complete implementation of the <ref refid="classBaseTemperature" kindref="compound">BaseTemperature</ref> interface specifically for the ESP32-C6 internal temperature sensor. It leverages the ESP-IDF temperature sensor driver to provide accurate temperature measurements with advanced features like threshold monitoring and continuous sampling.</para>
<para>Key features:<itemizedlist>
<listitem><para>Multiple measurement ranges with different accuracy levels</para>
</listitem><listitem><para>Hardware-based threshold monitoring with interrupts</para>
</listitem><listitem><para>Continuous temperature monitoring using ESP32 timers</para>
</listitem><listitem><para>Thread-safe operations with mutex protection</para>
</listitem><listitem><para>Power management support for low-power applications</para>
</listitem><listitem><para>Comprehensive error handling and diagnostics</para>
</listitem><listitem><para>Self-test and health monitoring capabilities</para>
</listitem><listitem><para>Operation statistics and performance tracking</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This implementation is thread-safe and can be used in multi-threaded applications </para>
</simplesect>
<simplesect kind="note"><para>The sensor provides approximately 0.25°C resolution with response time around 50ms </para>
</simplesect>
<simplesect kind="note"><para>Different measurement ranges offer different accuracy levels (±1°C to ±3°C) </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BaseTemperature</label>
        <link refid="classBaseTemperature"/>
      </node>
      <node id="1">
        <label>EspTemperature</label>
        <link refid="classEspTemperature"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BaseTemperature</label>
        <link refid="classBaseTemperature"/>
      </node>
      <node id="1">
        <label>EspTemperature</label>
        <link refid="classEspTemperature"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>mutex_</edgelabel>
          <edgelabel>s_shared_mutex_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>esp_state_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>esp_config_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>base_config_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>statistics_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>diagnostics_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>RANGE_INFO</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>RtosMutex</label>
        <link refid="classRtosMutex"/>
      </node>
      <node id="5">
        <label>esp_temp_config_t</label>
        <link refid="structesp__temp__config__t"/>
      </node>
      <node id="9">
        <label>esp_temp_range_info_t</label>
        <link refid="structesp__temp__range__info__t"/>
      </node>
      <node id="4">
        <label>esp_temp_state_t</label>
        <link refid="structesp__temp__state__t"/>
      </node>
      <node id="6">
        <label>hf_temp_config_t</label>
        <link refid="structhf__temp__config__t"/>
      </node>
      <node id="8">
        <label>hf_temp_diagnostics_t</label>
        <link refid="structhf__temp__diagnostics__t"/>
      </node>
      <node id="7">
        <label>hf_temp_statistics_t</label>
        <link refid="structhf__temp__statistics__t"/>
      </node>
    </collaborationgraph>
    <location file="inc/mcu/esp32/EspTemperature.h" line="192" column="1" bodyfile="inc/mcu/esp32/EspTemperature.h" bodystart="192" bodyend="610"/>
    <listofallmembers>
      <member refid="classEspTemperature_1a2587c0df6c5c4169bbec7d4fa5611917" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>base_config_</name></member>
      <member refid="classBaseTemperature_1a115e5a44b15a1f507cb7c9163d262a5a" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>BaseTemperature</name></member>
      <member refid="classBaseTemperature_1a7570da5a5b76362a826c760c10bac847" prot="protected" virt="non-virtual"><scope>EspTemperature</scope><name>BaseTemperature</name></member>
      <member refid="classBaseTemperature_1a4d84a21b7f330d3bc80accbd9f26b1c7" prot="public" virt="virtual"><scope>EspTemperature</scope><name>Calibrate</name></member>
      <member refid="classEspTemperature_1a0715fa9a6cd6888fa147ee67b428f193" prot="public" virt="virtual"><scope>EspTemperature</scope><name>CheckHealth</name></member>
      <member refid="classEspTemperature_1ac0b3dd90b074db26ee48e66748597faa" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>CheckThresholds</name></member>
      <member refid="classEspTemperature_1a66c274c7d49953c82209768c2e862dc4" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>ConfigureEspSensor</name></member>
      <member refid="classEspTemperature_1a9c978f2304a7968e28d22be7a1749f88" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>ConvertEspError</name></member>
      <member refid="classBaseTemperature_1a65964a104b3cb9b9c737819810f0a20b" prot="protected" virt="non-virtual"><scope>EspTemperature</scope><name>current_state_</name></member>
      <member refid="classEspTemperature_1acee4cee66dd94a80f8ebd8697718560e" prot="protected" virt="virtual"><scope>EspTemperature</scope><name>Deinitialize</name></member>
      <member refid="classEspTemperature_1a9b93362b1986eeae60402f91f9afc715" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>diagnostics_</name></member>
      <member refid="classEspTemperature_1a4e1ee5a920aa4caaa151d036b79db369" prot="public" virt="virtual"><scope>EspTemperature</scope><name>DisableThresholdMonitoring</name></member>
      <member refid="classEspTemperature_1a1b34d89cb1cc7b03100674bea303ab5a" prot="public" virt="virtual"><scope>EspTemperature</scope><name>EnableThresholdMonitoring</name></member>
      <member refid="classBaseTemperature_1a015ca3f4802b9a68140531f0175fd1bf" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>EnsureDeinitialized</name></member>
      <member refid="classBaseTemperature_1ac3e2177be073e991acc4f03da8c2b07d" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>EnsureInitialized</name></member>
      <member refid="classEspTemperature_1a9f5edd743061fbb9b4e0929f9126a04b" prot="public" virt="virtual"><scope>EspTemperature</scope><name>EnterSleepMode</name></member>
      <member refid="classEspTemperature_1a629744fc883c865e06a3f2369b577175" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>esp_config_</name></member>
      <member refid="classEspTemperature_1adba4d867f07dbbe733e55c16a3f05637" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>esp_monitoring_callback_</name></member>
      <member refid="classEspTemperature_1ae8aab5a3d2118ef3061ec62c63fc0103" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>esp_state_</name></member>
      <member refid="classEspTemperature_1ac6dc56a81910c0c1d02c32119f0afd05" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>esp_threshold_callback_</name></member>
      <member refid="classEspTemperature_1ac40eca554ac9cdc9a732ca543a426526" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>EspTemperature</name></member>
      <member refid="classEspTemperature_1af3b831d1cd2295f0d8cc30a508937cb0" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>EspTemperature</name></member>
      <member refid="classEspTemperature_1adb49690b7b5250861ed83ecad68c39c3" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>EspTemperature</name></member>
      <member refid="classEspTemperature_1a638b5bddaec8dc5693739fc238ad6d4d" prot="public" virt="virtual"><scope>EspTemperature</scope><name>ExitSleepMode</name></member>
      <member refid="classEspTemperature_1a0f6b25191668374e3ebe3b475884e110" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>FindOptimalRange</name></member>
      <member refid="classEspTemperature_1ad6ee47301f32825678e5838b453bd1f1" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetCalibrationOffset</name></member>
      <member refid="classEspTemperature_1af42132c1ba77f8392eb6e7a5b055e7e2" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetCapabilities</name></member>
      <member refid="classEspTemperature_1a5c68489b897534abaa14c39314b094ed" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>GetCurrentTimeUs</name></member>
      <member refid="classEspTemperature_1af91cca81090fa226453fc793f5305ec6" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetDiagnostics</name></member>
      <member refid="classEspTemperature_1a2e11508c1cc97b8e44796d812319edeb" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>GetEspHandle</name></member>
      <member refid="classEspTemperature_1af0720d47be3e3a09691ddd3dd3a7dcc8" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>GetMeasurementRange</name></member>
      <member refid="classEspTemperature_1a5763ab0b92fff25c5854bcfb04a8ba9f" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetRange</name></member>
      <member refid="classEspTemperature_1a575d8aef9720c553f8c718bca0c67417" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>GetRangeConfig</name></member>
      <member refid="classEspTemperature_1a4fe823e1ee4b244049da4d6275fd7376" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>GetRangeInfo</name></member>
      <member refid="classEspTemperature_1ae1bfe0b1ceeb20ea8eb5010ef09f832d" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetResolution</name></member>
      <member refid="classEspTemperature_1a31ccbc056a1b393a230ab8a2614bba2f" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetSensorInfo</name></member>
      <member refid="classBaseTemperature_1a000ebd402761b9fd6fbb13f99070eb3a" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>GetState</name></member>
      <member refid="classEspTemperature_1af467995c9463449686b77f02be223fa9" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetStatistics</name></member>
      <member refid="classEspTemperature_1ae122e823c11b55550cb91af01e26461e" prot="public" virt="virtual"><scope>EspTemperature</scope><name>GetThresholds</name></member>
      <member refid="classBaseTemperature_1ad97ed939d85e2686653d76967c53f790" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>HasCapability</name></member>
      <member refid="classEspTemperature_1a92699d024919bf1f5f40cfc2a05c5465" prot="protected" virt="virtual"><scope>EspTemperature</scope><name>Initialize</name></member>
      <member refid="classBaseTemperature_1a6657e59b1e8c59d68aabe08f276090fe" prot="protected" virt="non-virtual"><scope>EspTemperature</scope><name>initialized_</name></member>
      <member refid="classEspTemperature_1a2aa6d6cdd0f7d91c86ce759706d9f712" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>InitializeEsp32</name></member>
      <member refid="classBaseTemperature_1a25b8ade43d75916d0d48464cfdcaa6c2" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>IsInitialized</name></member>
      <member refid="classEspTemperature_1abd650022450dbbcbba8fed4085386da3" prot="public" virt="virtual"><scope>EspTemperature</scope><name>IsMonitoringActive</name></member>
      <member refid="classEspTemperature_1ac6c685911fa0fe6bb38e1d2d8299ad2d" prot="public" virt="virtual"><scope>EspTemperature</scope><name>IsSleeping</name></member>
      <member refid="classEspTemperature_1a02f93520cdb56054ca7853f9ced82ec9" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>last_error_</name></member>
      <member refid="classEspTemperature_1af516eb1e27cb63a70b6517752f1323fd" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>monitoring_callback_</name></member>
      <member refid="classEspTemperature_1a8fe2e9d176f71696e4fb12afbcd25bc8" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>monitoring_user_data_</name></member>
      <member refid="classEspTemperature_1abe6ae1ced0d8c565b722b416cb64e9ae" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>MonitoringTimerCallback</name></member>
      <member refid="classEspTemperature_1a5e2e469501c63d5e4c6f2bf5476effd5" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>mutex_</name></member>
      <member refid="classEspTemperature_1aa99e89ae0cac5fcd19aac843a1bb6dde" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>operator=</name></member>
      <member refid="classBaseTemperature_1aadc767ae37c6b15cbdc9571f688ebe97" prot="public" virt="non-virtual" ambiguityscope="BaseTemperature::"><scope>EspTemperature</scope><name>operator=</name></member>
      <member refid="classEspTemperature_1aa829f22f1d02247e2da26709702812ae" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>RANGE_INFO</name></member>
      <member refid="classEspTemperature_1a495d60bf59ca709fd0f29e1f1d8498d2" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>ReadRawTemperature</name></member>
      <member refid="classBaseTemperature_1a4c7e87e941472fb7ac52f50da519d2ec" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>ReadTemperature</name></member>
      <member refid="classBaseTemperature_1a830094219d6b9572248927f6d1f2afd3" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>ReadTemperatureCelsius</name></member>
      <member refid="classEspTemperature_1a0357ccb31a009ae7b55ca02db5e0c58a" prot="protected" virt="virtual"><scope>EspTemperature</scope><name>ReadTemperatureCelsiusImpl</name></member>
      <member refid="classBaseTemperature_1a3e90ebd0d1a693c3ecf23cdc437217b6" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>ReadTemperatureFahrenheit</name></member>
      <member refid="classBaseTemperature_1aeac0184a2d6cafb18917bf3d76c2fa13" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>ReadTemperatureKelvin</name></member>
      <member refid="classBaseTemperature_1a5c12d4ab74621f885e61c070ab854530" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>ReadTemperatureUnit</name></member>
      <member refid="classEspTemperature_1a413c8ed18407669f80b88625990619d9" prot="public" virt="virtual"><scope>EspTemperature</scope><name>ResetCalibration</name></member>
      <member refid="classEspTemperature_1ab81713abcd8583a401154ccc7617cb4e" prot="public" virt="virtual"><scope>EspTemperature</scope><name>ResetDiagnostics</name></member>
      <member refid="classEspTemperature_1ac22266bb32b95ed3587ce5fd6efc6c94" prot="public" virt="virtual"><scope>EspTemperature</scope><name>ResetStatistics</name></member>
      <member refid="classEspTemperature_1aef85506e203917c06e7d951370f983ad" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>s_refcount_</name></member>
      <member refid="classEspTemperature_1acc45986a38969e94e206b1531eedcbac" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>s_shared_handle_</name></member>
      <member refid="classEspTemperature_1a627914394ff10df930d340e4beecbb96" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>s_shared_mutex_</name></member>
      <member refid="classEspTemperature_1aed9e41b1f3d2c357d6ecd28728e49aa2" prot="public" virt="virtual"><scope>EspTemperature</scope><name>SelfTest</name></member>
      <member refid="classEspTemperature_1a2665b30cb4301b8fccb577f74e4fa7fc" prot="public" virt="virtual"><scope>EspTemperature</scope><name>SetCalibrationOffset</name></member>
      <member refid="classEspTemperature_1a9b9b794154ed4bde92c25a416e01141d" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>SetEspMonitoringCallback</name></member>
      <member refid="classEspTemperature_1a97fcaa3460eec5f22eafb70e6c243642" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>SetEspThresholdCallback</name></member>
      <member refid="classEspTemperature_1a149603f54dfa682cefceae26805a77e2" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>SetLastError</name></member>
      <member refid="classEspTemperature_1acd7f6f1c03014e99ddcc8816e1a666b7" prot="public" virt="non-virtual"><scope>EspTemperature</scope><name>SetMeasurementRange</name></member>
      <member refid="classEspTemperature_1a92b30bf532e07d1f1927d4fccf5322ba" prot="public" virt="virtual"><scope>EspTemperature</scope><name>SetRange</name></member>
      <member refid="classBaseTemperature_1a93d2d276ad511dfa7c405a88c6ea0e01" prot="public" virt="virtual"><scope>EspTemperature</scope><name>SetResolution</name></member>
      <member refid="classEspTemperature_1aaeda9f32dfc75e5ca2ab15142d0c9998" prot="public" virt="virtual"><scope>EspTemperature</scope><name>SetThresholds</name></member>
      <member refid="classEspTemperature_1a4d45a64d341f4d0342807dd134045516" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>SetupRange</name></member>
      <member refid="classEspTemperature_1acc1ea9c3a109b70bd67e4f285594e474" prot="public" virt="virtual"><scope>EspTemperature</scope><name>StartContinuousMonitoring</name></member>
      <member refid="classEspTemperature_1a4b7b5323acb43d653d70ed4bb9a665f9" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>statistics_</name></member>
      <member refid="classEspTemperature_1aa34b741f4daf7a52dc832e65dc58e34f" prot="public" virt="virtual"><scope>EspTemperature</scope><name>StopContinuousMonitoring</name></member>
      <member refid="classEspTemperature_1a0e3aba6824d5d671a2298f402d2b397c" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>TAG</name></member>
      <member refid="classEspTemperature_1af98b41d1d3d44f8f1fe71878d2ecc7bb" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>threshold_callback_</name></member>
      <member refid="classEspTemperature_1a64679e2522454245be7bdba622ef8176" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>threshold_user_data_</name></member>
      <member refid="classEspTemperature_1a805d97b69f14c4e13e9cb7736a45617d" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>UpdateDiagnostics</name></member>
      <member refid="classEspTemperature_1ad5980d76ca4268f56feea2f18d4f1af6" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>UpdateStatistics</name></member>
      <member refid="classBaseTemperature_1ae37d98256e55529d9d78622db0c34019" prot="protected" virt="non-virtual"><scope>EspTemperature</scope><name>ValidateBasicOperation</name></member>
      <member refid="classEspTemperature_1ad10997e1e06993de46d71471dd89109e" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>ValidateConfig</name></member>
      <member refid="classEspTemperature_1ad60606f6b5e963940ac5184bdcd70296" prot="private" virt="non-virtual"><scope>EspTemperature</scope><name>ValidateEspConfig</name></member>
      <member refid="classBaseTemperature_1a89a1c053462cbf314098834f7045ae74" prot="public" virt="virtual"><scope>EspTemperature</scope><name>~BaseTemperature</name></member>
      <member refid="classEspTemperature_1a5d4b044be19bc62da664d76b1b6207b6" prot="public" virt="virtual"><scope>EspTemperature</scope><name>~EspTemperature</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
