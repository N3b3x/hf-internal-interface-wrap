name: ESP32 Component CI â€¢ Build â€¢ Size â€¢ Static Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore all caches)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  security-events: write  # For security scanning results

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_PATH: ci_build_path
  ESP32_PROJECT_PATH: examples/esp32  # Centralized ESP32 project location

defaults:
  run:
    shell: bash

jobs:
  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    # No dependencies needed - this job can run independently
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: pip install pyyaml
      
      - name: Install jq (for pretty-printing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        
      - name: Generate matrix
        id: generate-matrix
        run: |
          MATRIX=$(python3 ${{ env.ESP32_PROJECT_PATH }}/scripts/generate_matrix.py)
          echo "matrix=${MATRIX}" >> "$GITHUB_OUTPUT"
          echo "Generated matrix:"
          python3 ${{ env.ESP32_PROJECT_PATH }}/scripts/generate_matrix.py --format json | jq .

  build:
    name: Build âžœ ${{ matrix.idf_version }} Â· ${{ matrix.build_type }} Â· ${{ matrix.app_name }}
    # This job runs for EACH matrix combination in parallel
    # Each job gets a fresh runner that:
    #   - Sets up its own CI build environment
    #   - Gets ESP-IDF environment from espressif/esp-idf-ci-action@v1
    #   - Builds using build_app.sh in the prepared CI environment
    runs-on: ubuntu-latest
    needs: [generate-matrix]
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache essential tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.local/bin
            ~/.local/share
          key: >-
            esp32-ci-essential-tools-${{ runner.os }}-${{ 
              hashFiles('${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh') 
            }}
          restore-keys: |
            esp32-ci-essential-tools-${{ runner.os }}-

      - name: Setup CI build environment
        run: |
          echo "Setting up CI build environment for this build job..."
          echo "This installs essential build tools and prepares build directory structure"
          chmod +x ${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh
          set -e  # Enable error handling
          ./${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.idf_version_docker }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # ESP-IDF caching is handled automatically by espressif/esp-idf-ci-action@v1
      # No need for manual ESP-IDF cache management
      
      - name: Cache Python dependencies
        id: python-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.*/site-packages
          key: >-
            esp32-ci-python-deps-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            ${{ 
              hashFiles(
                '${{ env.ESP32_PROJECT_PATH }}/scripts/setup_common.sh',
                '${{ env.ESP32_PROJECT_PATH }}/requirements.txt'
              ) 
            }}
          restore-keys: |
            esp32-ci-python-deps-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            esp32-ci-python-deps-${{ matrix.idf_version_docker }}-
            esp32-ci-python-deps-
      
      - name: Cache ccache
        id: ccache-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: ~/.ccache
          key: >-
            esp32-ci-ccache-${{ matrix.idf_version_docker }}-${{ matrix.build_type }}-
            ${{ hashFiles('src/**', 'inc/**', 'examples/**') }}
          restore-keys: |
            esp32-ci-ccache-${{ matrix.idf_version_docker }}-${{ matrix.build_type }}-
            esp32-ci-ccache-${{ matrix.idf_version_docker }}-
      
      - name: Log cache results
        run: |
          if [ "${{ inputs.clean_build }}" = "true" ]; then
            echo "ðŸ§¹ Clean build requested - all caches skipped"
          else
            echo "ESP-IDF cache: handled automatically by ESP-IDF CI action"
            echo "Essential tools cache: using esp32-ci-essential-tools cache"
            echo "Python deps cache hit - ${{ steps.python-cache.outputs.cache-hit }}"
            echo "ccache cache hit - ${{ steps.ccache-cache.outputs.cache-hit }}"
          fi


      - name: Clang-format check (version 20)
        uses: jidicula/clang-format-action@v4.15.0
        continue-on-error: true
        with:
          clang-format-version: '20'
          check-path: '.'
          fallback-style: 'LLVM'

      - name: ESP-IDF Build with caching
        id: build
        # This action automatically:
        # 1. Downloads/installs ESP-IDF for the specified version
        # 2. Sources the ESP-IDF environment (export.sh, PATH, etc.)
        # 3. Sets up build tools (idf.py, cmake, ninja, etc.)
        # 4. Provides Docker container with consistent environment
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.idf_version_docker }}
          target: ${{ matrix.target }}
          path: .
          extra_docker_args: >-
            -v $HOME/.ccache:/root/.ccache
            -e CCACHE_DIR=/root/.ccache
            -e IDF_CCACHE_ENABLE=1
          command: |
            # Set environment variables for the build
            export BUILD_PATH="${{ env.BUILD_PATH }}"
            export ESP32_PROJECT_PATH="${{ env.ESP32_PROJECT_PATH }}"
            export IDF_TARGET="${{ matrix.target }}"
            export BUILD_TYPE="${{ matrix.build_type }}"
            export APP_TYPE="${{ matrix.app_name }}"
            
            # Enable error handling to ensure failures propagate
            set -e
            
            echo "Setting up build environment in ${{ env.BUILD_PATH }}..."
            
            # The setup_ci.sh script has already prepared the build directory structure
            # All necessary files are already copied to ${{ env.BUILD_PATH }}
            echo "Build directory structure prepared by setup_ci.sh"
            echo "Building..."
            
            # Change to the build directory where all files are copied
            cd ${{ env.BUILD_PATH }}
            echo "Changed to build directory: $(pwd)"
            echo "Available files:"
            ls -la
            
            echo "Checking directory structure:"
            echo "main/ contents:"
            ls -la main/
            echo "inc/ contents:"
            ls -la inc/
            echo "Path from main to inc:"
            ls -la main/../inc/
            
            # Build the application using the same tool as local development
            ./scripts/build_app.sh "${{ matrix.app_name }}" "${{ matrix.build_type }}" "${{ matrix.idf_version }}"
            
            # Construct the build directory path based on the known pattern
            # Format: build-app-{app_type}-type-{build_type}-target-{target}-idf-{sanitized_idf_version}
            build_dir="build-app-${{ matrix.app_name }}-type-${{ matrix.build_type }}-target-${{ matrix.target }}-idf-"
            build_dir="${build_dir}${{ matrix.idf_version_file }}"
            

            
            echo "Looking for build directory: $build_dir"
            
            # Check if the build directory exists
            if [ -d "$build_dir" ]; then
              echo "Build completed. Build directory found: $build_dir"
              echo "Build artifacts:"
              ls -la "$build_dir/"
              echo "Build directory ready for artifact upload"
            else
              echo "ERROR: Build directory not found: $build_dir"
              echo "Available directories:"
              ls -la build_*/ || echo "No build directories found"
              exit 1
            fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fw-build-app-${{ matrix.app_name }}-type-${{ matrix.build_type }}-target-${{ matrix.target }}-idf-${{ matrix.idf_version_file }}
          retention-days: 7
          path: ${{ env.BUILD_PATH }}/${{ env.ESP32_BUILD_APP_MOST_RECENT_DIRECTORY }}

  static-analysis:
    name: Static Analysis (cppcheck + clang-tidy)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache essential tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.local/bin
            ~/.local/share
          key: >-
            esp32-ci-essential-tools-${{ runner.os }}-${{ 
              hashFiles('${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh') 
            }}
          restore-keys: |
            esp32-ci-essential-tools-${{ runner.os }}-

      - name: Setup CI build environment
        run: |
          echo "Setting up CI build environment for static analysis..."
          chmod +x ${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh
          set -e  # Enable error handling
          ./${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh

      - name: Cache static analysis tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.cache/clang-tidy
          key: >-
            esp32-ci-static-analysis-${{ runner.os }}-${{
              hashFiles(
                'src/**/*.cpp',
                'src/**/*.h',
                'inc/**/*.cpp',
                'inc/**/*.h',
                'examples/**/*.cpp',
                'examples/**/*.h',
                '.clang-tidy'
              )
            }}
          restore-keys: |
            esp32-ci-static-analysis-${{ runner.os }}-

      - name: Print hashFiles result
        run: >-
          echo "${{
            hashFiles(
              'src/**/*.cpp',
              'src/**/*.h',
              'inc/**/*.cpp',
              'inc/**/*.h',
              'examples/**/*.cpp',
              'examples/**/*.h',
              '.clang-tidy'
            )
          }}"

      - name: Verify analysis tools
        run: |
          echo "Verifying analysis tools..."
          echo "Note: clang-20 and clang-tidy-20 installed by setup_ci.sh"
          clang-tidy --version
          echo "Note: cppcheck runs via Docker container"
          docker run --rm ghcr.io/facthunder/cppcheck:latest cppcheck --version
          echo "Analysis tools ready!"

      - name: Run cppcheck with Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            ghcr.io/facthunder/cppcheck:latest \
            cppcheck \
              --enable=warning,style,performance,portability \
              --suppress=missingIncludeSystem \
              --inline-suppr \
              --std=c++17 \
              --xml \
              --output-file=/src/cppcheck_report.xml \
              /src/src/ /src/inc/ /src/examples/ 2>&1 || true
          
          # Display results
          if [ -s cppcheck_report.xml ]; then
            echo "Cppcheck found issues. See the XML report for details."
            # Show human-readable output
            docker run --rm \
              -v ${{ github.workspace }}:/src \
              ghcr.io/facthunder/cppcheck:latest \
              cppcheck \
                --enable=warning,style,performance,portability \
                --suppress=missingIncludeSystem \
                --inline-suppr \
                --std=c++17 \
                /src/src/ /src/inc/ /src/examples/ 2>&1 || true
          else
            echo "No cppcheck issues found"
          fi

      - name: Upload cppcheck report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cppcheck-report
          path: cppcheck_report.xml
          retention-days: 7

      - name: Run clang-tidy
        uses: ZedThree/clang-tidy-review@v0.21.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config_file: .clang-tidy
          include: 'src/*,inc/*,examples/*'
          exclude: 'build/*'

  workflow-lint:
    name: Workflow Lint (actionlint + yamllint)
    runs-on: ubuntu-latest
    # No dependencies needed - this job can run independently
    steps:
      - uses: actions/checkout@v4

      - name: Cache essential tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.local/bin
            ~/.local/share
          key: >-
            esp32-ci-essential-tools-${{ runner.os }}-${{ 
              hashFiles('${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh') 
            }}
          restore-keys: |
            esp32-ci-essential-tools-${{ runner.os }}-

      - name: Setup CI build environment
        run: |
          echo "Setting up CI build environment for workflow linting..."
          chmod +x ${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh
          set -e  # Enable error handling
          ./${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh

      - name: Cache lint tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/actionlint
            ~/.local/bin
          key: esp32-ci-workflow-tools-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            esp32-ci-workflow-tools-${{ runner.os }}-

      - name: Install yamllint
        run: |
          if ! command -v yamllint &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y yamllint
          else
            echo "yamllint already installed"
          fi

      - name: Run yamllint
        run: yamllint .github/workflows/

      - name: Install actionlint
        run: |
          if [ ! -f ~/actionlint ]; then
            echo "Downloading actionlint..."
            curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | \
              bash
            mv actionlint ~/actionlint
            chmod +x ~/actionlint
          else
            echo "actionlint found in cache"
          fi
          # Install to user-writable directory for better caching
          mkdir -p ~/.local/bin
          cp ~/actionlint ~/.local/bin/
          export PATH="$HOME/.local/bin:$PATH"

      - name: Run actionlint
        run: actionlint .github/workflows/*.yml