name: ESP32 Component CI â€¢ Build â€¢ Size â€¢ Static Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore all caches)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  security-events: write  # For security scanning results

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IDF_TARGET: esp32c6
  BUILD_PATH: ci_project
  IDF_CCACHE_ENABLE: "1"  # Enables ccache inside ESP-IDF

defaults:
  run:
    shell: bash

jobs:
  setup-environment:
    name: Setup Development Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache development tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            /usr/local/bin
          key: dev-tools-${{ runner.os }}-${{ hashFiles('examples/esp32/scripts/setup_ci.sh') }}
          restore-keys: |
            dev-tools-${{ runner.os }}-
        
      - name: Setup development environment
        run: |
          echo "Setting up development environment..."
          chmod +x examples/esp32/scripts/setup_ci.sh
          ./examples/esp32/scripts/setup_ci.sh
          
      - name: Verify clang-20 installation
        run: |
          echo "Verifying clang-20 installation..."
          clang --version
          clang-format --version
          clang-tidy --version
          echo "Development environment setup complete!"

  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    needs: setup-environment
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: pip install pyyaml
      
      - name: Install jq (for pretty-printing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        
      - name: Generate matrix
        id: generate-matrix
        run: |
          MATRIX=$(python3 .github/workflows/scripts/generate_matrix.py)
          echo "matrix=${MATRIX}" >> "$GITHUB_OUTPUT"
          echo "Generated matrix:"
          python3 .github/workflows/scripts/generate_matrix.py --pretty | jq .

  build:
    name: Build âžœ ${{ matrix.idf_version }} Â· ${{ matrix.build_type }} Â· ${{ matrix.app_name }}
    runs-on: ubuntu-latest
    needs: [setup-environment, generate-matrix]
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.idf_version_docker }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Cache ESP-IDF and tools
        id: esp-idf-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: |
            ~/.espressif
            ~/esp
          key: >-
            esp-idf-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            ${{ hashFiles('examples/esp32/scripts/setup_common.sh') }}
          restore-keys: |
            esp-idf-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            esp-idf-${{ matrix.idf_version_docker }}-
            esp-idf-
      
      - name: Cache Python dependencies
        id: python-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.*/site-packages
          key: >-
            python-deps-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            ${{ hashFiles('examples/esp32/scripts/setup_common.sh', 'examples/esp32/requirements.txt') }}
          restore-keys: |
            python-deps-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            python-deps-${{ matrix.idf_version_docker }}-
            python-deps-
      
      - name: Cache ccache
        id: ccache-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: ~/.ccache
          key: >-
            ccache-${{ matrix.idf_version_docker }}-${{ matrix.build_type }}-
            ${{ hashFiles('src/**', 'inc/**', 'examples/**') }}
          restore-keys: |
            ccache-${{ matrix.idf_version_docker }}-${{ matrix.build_type }}-
            ccache-${{ matrix.idf_version_docker }}-
      
      - name: Log cache results
        run: |
          if [ "${{ inputs.clean_build }}" = "true" ]; then
            echo "ðŸ§¹ Clean build requested - all caches skipped"
          else
            echo "ESP-IDF cache hit - ${{ steps.esp-idf-cache.outputs.cache-hit }}"
            echo "Python deps cache hit - ${{ steps.python-cache.outputs.cache-hit }}"
            echo "ccache cache hit - ${{ steps.ccache-cache.outputs.cache-hit }}"
          fi


      - name: Clang-format check (version 20)
        uses: jidicula/clang-format-action@v4.15.0
        continue-on-error: true
        with:
          clang-format-version: '20'
          check-path: '.'
          fallback-style: 'LLVM'

      - name: ESP-IDF Build with caching
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.idf_version_docker }}
          target: ${{ env.IDF_TARGET }}
          path: .
          extra_docker_args: >-
            -v $HOME/.ccache:/root/.ccache
            -e CCACHE_DIR=/root/.ccache
            -e IDF_CCACHE_ENABLE=1
          command: |
            chmod +x .github/workflows/scripts/setup_build_directory.sh &&
            ./.github/workflows/scripts/setup_build_directory.sh \
              -p ${{ env.BUILD_PATH }} \
              -t ${{ env.IDF_TARGET }} \
              -b ${{ matrix.build_type }} \
              -a ${{ matrix.app_name }} \
              -v ${{ matrix.idf_version }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fw-${{ matrix.app_name }}-${{ matrix.idf_version_docker }}-${{ matrix.build_type }}
          retention-days: 7
          path: |
            ${{ env.BUILD_PATH }}/build/*.bin
            ${{ env.BUILD_PATH }}/build/*.elf
            ${{ env.BUILD_PATH }}/build/*.map
            ${{ env.BUILD_PATH }}/build/size.*
            ${{ env.BUILD_PATH }}/build/ccache_stats.txt

  static-analysis:
    name: Static Analysis (cppcheck + clang-tidy)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [setup-environment, build]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache static analysis tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.cache/clang-tidy
          key: >-
            static-analysis-${{ runner.os }}-${{
              hashFiles(
                'src/**/*.cpp',
                'src/**/*.h',
                'inc/**/*.cpp',
                'inc/**/*.h',
                'examples/**/*.cpp',
                'examples/**/*.h',
                '.clang-tidy'
              )
            }}
          restore-keys: |
            static-analysis-${{ runner.os }}-

      - name: Print hashFiles result
        run: >-
          echo "${{
            hashFiles(
              'src/**/*.cpp',
              'src/**/*.h',
              'inc/**/*.cpp',
              'inc/**/*.h',
              'examples/**/*.cpp',
              'examples/**/*.h',
              '.clang-tidy'
            )
          }}"

      - name: Install analysis tools
        run: |
          echo "Installing analysis tools..."
          
          # Add LLVM APT repository for clang-20
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | \
            sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          ubuntu_codename=$(lsb_release -cs)
          echo "deb http://apt.llvm.org/${ubuntu_codename}/ llvm-toolchain-${ubuntu_codename}-20 main" | \
            sudo tee /etc/apt/sources.list.d/llvm.list
          
          sudo apt-get update
          sudo apt-get install -y \
            clang-20 \
            clang-tidy-20
          
          # Set clang-tidy-20 as default
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-20 100
          
      - name: Verify analysis tools
        run: |
          echo "Verifying analysis tools..."
          clang-tidy --version
          echo "Note: cppcheck runs via Docker container"
          docker run --rm ghcr.io/facthunder/cppcheck:latest cppcheck --version
          echo "Analysis tools ready!"

      - name: Run cppcheck with Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            ghcr.io/facthunder/cppcheck:latest \
            cppcheck \
              --enable=warning,style,performance,portability \
              --suppress=missingIncludeSystem \
              --inline-suppr \
              --std=c++17 \
              --xml \
              --output-file=/src/cppcheck_report.xml \
              /src/src/ /src/inc/ /src/examples/ 2>&1 || true
          
          # Display results
          if [ -s cppcheck_report.xml ]; then
            echo "Cppcheck found issues. See the XML report for details."
            # Show human-readable output
            docker run --rm \
              -v ${{ github.workspace }}:/src \
              ghcr.io/facthunder/cppcheck:latest \
              cppcheck \
                --enable=warning,style,performance,portability \
                --suppress=missingIncludeSystem \
                --inline-suppr \
                --std=c++17 \
                /src/src/ /src/inc/ /src/examples/ 2>&1 || true
          else
            echo "No cppcheck issues found"
          fi

      - name: Upload cppcheck report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cppcheck-report
          path: cppcheck_report.xml
          retention-days: 7

      - name: Run clang-tidy
        uses: ZedThree/clang-tidy-review@v0.21.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config_file: .clang-tidy
          include: 'src/*,inc/*,examples/*'
          exclude: 'build/*'

  workflow-lint:
    name: Workflow Lint (actionlint + yamllint)
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v4

      - name: Cache lint tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/actionlint
            ~/.local/bin
          key: workflow-tools-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            workflow-tools-${{ runner.os }}-

      - name: Install yamllint
        run: |
          if ! command -v yamllint &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y yamllint
          else
            echo "yamllint already installed"
          fi

      - name: Run yamllint
        run: yamllint .github/workflows/

      - name: Install actionlint
        run: |
          if [ ! -f ~/actionlint ]; then
            echo "Downloading actionlint..."
            curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | \
              bash
            mv actionlint ~/actionlint
            chmod +x ~/actionlint
          else
            echo "actionlint found in cache"
          fi
          sudo cp ~/actionlint /usr/local/bin/ || sudo ln -sf ~/actionlint /usr/local/bin/actionlint

      - name: Run actionlint
        run: actionlint .github/workflows/*.yml