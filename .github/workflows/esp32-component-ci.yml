name: ESP32 Component CI â€¢ Build â€¢ Size â€¢ Static Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore all caches)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IDF_TARGET: esp32c6
  BUILD_PATH: ci_project
  ESP_IDF_VERSIONS: '["release-v5.5"]'
  IDF_CCACHE_ENABLE: "1"  # Enables ccache inside ESP-IDF

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build âžœ ${{ matrix.idf_version }} Â· ${{ matrix.build_type }} Â· ${{ matrix.example_type }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        idf_version: [release-v5.5]
        build_type: [Release, Debug]
        example_type: [comprehensive, ascii_art, nimble_test]
        exclude:
          # Exclude some combinations to reduce CI time
          - build_type: Debug
            example_type: ascii_art
          - build_type: Debug
            example_type: nimble_test

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.idf_version }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Cache ccache
        id: ccache-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: ~/.ccache
          key: >-
            ccache-${{ matrix.idf_version }}-${{ matrix.build_type }}-
            ${{ hashFiles('src/**', 'inc/**', 'examples/**') }}
          restore-keys: |
            ccache-${{ matrix.idf_version }}-${{ matrix.build_type }}-
            ccache-${{ matrix.idf_version }}-
      - name: Log ccache cache result
        run: |
          if [ "${{ inputs.clean_build }}" = "true" ]; then
            echo "ðŸ§¹ Clean build requested - all caches skipped"
          else
            echo "ccache cache hit - ${{ steps.ccache-cache.outputs.cache-hit }}"
          fi


      - name: Install ccache (clang-format installed separately)
        run: sudo apt-get update && sudo apt-get install -y ccache

      - name: Clang-format check (version 20)
        uses: jidicula/clang-format-action@v4.15.0
        continue-on-error: true
        with:
          clang-format-version: '20'
          check-path: '.'
          fallback-style: 'LLVM'

      - name: ESP-IDF Build with caching
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.idf_version }}
          target: ${{ env.IDF_TARGET }}
          path: .
          extra_docker_args: "-v $HOME/.ccache:/root/.ccache -e CCACHE_DIR=/root/.ccache -e IDF_CCACHE_ENABLE=1"
          command: |
            idf.py create-project ${{ env.BUILD_PATH }} &&
            cp examples/esp32/CMakeLists.txt ${{ env.BUILD_PATH }}/CMakeLists.txt &&
            rm -rf ${{ env.BUILD_PATH }}/main &&
            cp -r examples/esp32/main ${{ env.BUILD_PATH }}/main &&
            cp -r examples/esp32/components ${{ env.BUILD_PATH }}/components &&
            cp -r examples/common ${{ env.BUILD_PATH }}/common &&
            cp -r src ${{ env.BUILD_PATH }}/src &&
            cp -r inc ${{ env.BUILD_PATH }}/inc &&
            cp examples/esp32/sdkconfig ${{ env.BUILD_PATH }}/sdkconfig &&
            idf.py -C ${{ env.BUILD_PATH }} \
              -DIDF_TARGET=${{ env.IDF_TARGET }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DEXAMPLE_TYPE=${{ matrix.example_type }} \
              --ccache reconfigure build &&
            idf.py -C ${{ env.BUILD_PATH }} size-components > ${{ env.BUILD_PATH }}/build/size.txt &&
            idf.py -C ${{ env.BUILD_PATH }} size --format json > ${{ env.BUILD_PATH }}/build/size.json &&
            ccache -s &&
            ccache -s > ${{ env.BUILD_PATH }}/build/ccache_stats.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fw-${{ matrix.example_type }}-${{ matrix.idf_version }}-${{ matrix.build_type }}
          retention-days: 7
          path: |
            ${{ env.BUILD_PATH }}/build/*.bin
            ${{ env.BUILD_PATH }}/build/*.elf
            ${{ env.BUILD_PATH }}/build/*.map
            ${{ env.BUILD_PATH }}/build/size.*
            ${{ env.BUILD_PATH }}/build/ccache_stats.txt

  static-analysis:
    name: Static Analysis (cppcheck + clang-tidy)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache static analysis tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            /var/cache/apt
            ~/.cache/clang-tidy
          key: static-analysis-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h', '.clang-tidy') }}
          restore-keys: |
            static-analysis-${{ runner.os }}-

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Run cppcheck
        uses: deep5050/cppcheck-action@v3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          enable: all
          inconclusive: true
          std: c++17

      - name: Run clang-tidy
        uses: ZedThree/clang-tidy-review@v0.21.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config_file: .clang-tidy
          include: 'src/*,inc/*,examples/*'
          exclude: 'build/*'

  workflow-lint:
    name: Workflow Lint (actionlint + yamllint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache lint tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            /var/cache/apt
            ~/actionlint
            ~/.local/bin
          key: workflow-tools-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            workflow-tools-${{ runner.os }}-

      - name: Install yamllint
        run: |
          if ! command -v yamllint &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y yamllint
          else
            echo "yamllint already installed"
          fi

      - name: Run yamllint
        run: yamllint .github/workflows/

      - name: Install actionlint
        run: |
          if [ ! -f ~/actionlint ]; then
            echo "Downloading actionlint..."
            curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash
            mv actionlint ~/actionlint
            chmod +x ~/actionlint
          else
            echo "actionlint found in cache"
          fi
          sudo cp ~/actionlint /usr/local/bin/ || sudo ln -sf ~/actionlint /usr/local/bin/actionlint

      - name: Run actionlint
        run: actionlint .github/workflows/*.yml