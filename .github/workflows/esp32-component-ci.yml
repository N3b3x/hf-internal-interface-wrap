name: ESP32 Component CI • Build • Size • Static Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      clean_build:
        description: 'Force clean build (ignore all caches)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  security-events: write  # For security scanning results

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_PATH: ci_build_path
  ESP32_PROJECT_PATH: examples/esp32  # Centralized ESP32 project location

defaults:
  run:
    shell: bash

jobs:
  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    # No dependencies needed - this job can run independently
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Pin to specific version for consistency
          
      - name: Install dependencies
        run: pip install pyyaml
        
      - name: Generate matrix
        id: generate-matrix
        run: |
          # Generate matrix once and store result
          MATRIX=$(python3 ${{ env.ESP32_PROJECT_PATH }}/scripts/generate_matrix.py)
          echo "matrix=${MATRIX}" >> "$GITHUB_OUTPUT"
          
          # Pretty-print the stored result instead of regenerating
          echo "Generated matrix:"
          echo "$MATRIX" | python3 -m json.tool

  build:
    name: Build ➜ ${{ matrix.idf_version }} · ${{ matrix.build_type }} · ${{ matrix.app_name }}
    # This job runs for EACH matrix combination in parallel
    # Each job gets a fresh runner that:
    #   - Sets up its own CI build environment
    #   - Gets ESP-IDF environment from espressif/esp-idf-ci-action@v1
    #   - Builds using build_app.sh in the prepared CI environment
    runs-on: ubuntu-latest
    needs: [generate-matrix]
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache essential tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            ~/.local/share
          key: >-
            esp32-ci-essential-tools-${{ runner.os }}-${{ 
              hashFiles('${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh') 
            }}
          restore-keys: |
            esp32-ci-essential-tools-${{ runner.os }}-

      - name: Setup CI build environment
        run: |
          echo "Setting up CI build environment for this build job..."
          echo "This installs essential build tools and prepares build directory structure"
          chmod +x ${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh
          set -e  # Enable error handling
          ./${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh
      
      - name: Cache Python dependencies
        id: python-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.*/site-packages
          key: >-
            esp32-ci-python-deps-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            ${{ 
              hashFiles(
                '${{ env.ESP32_PROJECT_PATH }}/scripts/setup_common.sh',
                '${{ env.ESP32_PROJECT_PATH }}/scripts/setup_ci.sh',
                '${{ env.ESP32_PROJECT_PATH }}/scripts/requirements.txt'
              ) 
            }}
          restore-keys: |
            esp32-ci-python-deps-${{ matrix.idf_version_docker }}-${{ runner.os }}-
            esp32-ci-python-deps-${{ matrix.idf_version_docker }}-
            esp32-ci-python-deps-
      
      - name: Cache ccache
        id: ccache-cache
        uses: actions/cache@v4
        if: ${{ !inputs.clean_build }}
        with:
          path: ~/.ccache
          key: >-
            esp32-ci-ccache-${{ matrix.idf_version_docker }}-${{ matrix.build_type }}-
            ${{ hashFiles('src/**', 'inc/**', 'examples/**') }}
          restore-keys: |
            esp32-ci-ccache-${{ matrix.idf_version_docker }}-${{ matrix.build_type }}-
            esp32-ci-ccache-${{ matrix.idf_version_docker }}-
      
      - name: Log cache results
        run: |
          if [ "${{ inputs.clean_build }}" = "true" ]; then
            echo "🧹 Clean build requested - all caches skipped"
          else
            echo "ESP-IDF cache: handled automatically by ESP-IDF CI action"
            echo "Essential tools cache: using esp32-ci-essential-tools cache"
            
            # Only show detailed cache info when relevant
            if [ "${{ steps.python-cache.outputs.cache-hit }}" = "false" ]; then
              echo "⚠️ Python dependencies cache miss - installing fresh packages"
            fi
            if [ "${{ steps.ccache-cache.outputs.cache-hit }}" = "false" ]; then
              echo "⚠️ ccache miss - starting with empty compilation cache"
            fi
            echo "Docker cache: removed (ESP-IDF action handles containerization)"
          fi


      - name: C/C++ Code Quality Check (clang-format + clang-tidy)
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'                  # Uses .clang-format config file
          tidy-checks: ''                # Uses .clang-tidy config file (empty means use file)
          version: '20'                  # Use clang version 20
          files-changed-only: false     # Check all files (not just changed ones)
          lines-changed-only: false     # Check entire files (not just changed lines)
          thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
          file-annotations: true        # Show file annotations in PR diff view
          ignore: 'build|.git'          # Ignore build directories and git files
          extensions: 'c,cpp,cc,cxx,h,hpp'  # Specify file extensions to check

      - name: Check code quality results
        if: steps.linter.outputs.checks-failed > 0
        run: |
          echo "⚠️ Code quality issues found:"
          echo "  - Style issues: ${{ steps.linter.outputs.clang-format-checks-failed }}"
          echo "  - Tidy issues: ${{ steps.linter.outputs.clang-tidy-checks-failed }}"
          echo "  - Total issues: ${{ steps.linter.outputs.checks-failed }}"
          echo ""
          echo "Please review the annotations and comments above to fix the issues."
          echo "Note: Build continues due to 'continue-on-error: true' setting"

      - name: ESP-IDF Build with caching
        id: build
        # This action automatically:
        # 1. Downloads/installs ESP-IDF for the specified version
        # 2. Sources the ESP-IDF environment (export.sh, PATH, etc.)
        # 3. Sets up build tools (idf.py, cmake, ninja, etc.)
        # 4. Provides Docker container with consistent environment
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.idf_version_docker }}
          target: ${{ matrix.target }}
          path: .
          extra_docker_args: >-
            -v $HOME/.ccache:/root/.ccache
            -e CCACHE_DIR=/root/.ccache
            -e IDF_CCACHE_ENABLE=1
          command: |
            # Set environment variables for the build
            export BUILD_PATH="${{ env.BUILD_PATH }}"
            export ESP32_PROJECT_PATH="${{ env.ESP32_PROJECT_PATH }}"
            export IDF_TARGET="${{ matrix.target }}"
            export BUILD_TYPE="${{ matrix.build_type }}"
            export APP_TYPE="${{ matrix.app_name }}"
            
            # Enable error handling to ensure failures propagate
            set -e
            
            echo "Setting up build environment in ${{ env.BUILD_PATH }}..."
            
            # The setup_ci.sh script has already prepared the build directory structure
            # All necessary files are already copied to ${{ env.BUILD_PATH }}
            echo "Build directory structure prepared by setup_ci.sh"
            echo "Building..."
            
            # Change to the build directory where all files are copied
            cd ${{ env.BUILD_PATH }}
            echo "Changed to build directory: $(pwd)"
            echo "Available files:"
            ls -la
            
            echo "Checking directory structure:"
            echo "main/ contents:"
            ls -la main/
            echo "inc/ contents:"
            ls -la inc/
            echo "Path from main to inc:"
            ls -la main/../inc/
            
            # Build the application using the same tool as local development
            echo "Building application: ${{ matrix.app_name }} with type ${{ matrix.build_type }}"
            echo "for IDF ${{ matrix.idf_version }}"
            
            # Run the build script and capture output
            if ! ./scripts/build_app.sh "${{ matrix.app_name }}" \
              "${{ matrix.build_type }}" \
              "${{ matrix.idf_version }}"; then
              echo "ERROR: Build failed"
              exit 1
            fi
            
            # Look for the build directory that was created
            echo "Looking for build directories..."
            ls -la build*/ || echo "No build directories found"
            
            # Find the most recent build directory
            build_dir=$(ls -td build*/ 2>/dev/null | head -1)
            
            if [ -z "$build_dir" ]; then
              echo "ERROR: No build directory found after build"
              exit 1
            fi
            
            echo "Build directory found: $build_dir"
            
            # Verify the build directory exists and has content
            if [ -d "$build_dir" ]; then
              echo "Build completed successfully. Build directory: $build_dir"
              echo "Build artifacts:"
              ls -la "$build_dir/"
              

            else
              echo "ERROR: Build directory not accessible: $build_dir"
              exit 1
            fi

      - name: Extract build directory name
        id: extract-build-dir
        run: |
          echo "Looking for build directories in ${{ env.BUILD_PATH }}..."
          ls -la ${{ env.BUILD_PATH }}/
          
          # Find the build directory name
          BUILD_DIR=$(find ${{ env.BUILD_PATH }} -maxdepth 1 -type d -name 'build*' | head -n 1)
          if [ -z "$BUILD_DIR" ]; then
            echo "ERROR: No build directory found"
            exit 1
          fi
          
          # Extract just the directory name (not full path)
          BUILD_DIR_NAME=$(basename "$BUILD_DIR")
          echo "BUILD_DIR_NAME=$BUILD_DIR_NAME" >> "$GITHUB_OUTPUT"
          
          echo "Build directory found: $BUILD_DIR_NAME"
          echo "Full path: $BUILD_DIR"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fw-${{ steps.extract-build-dir.outputs.BUILD_DIR_NAME }}
          retention-days: 7
          path: ${{ env.BUILD_PATH }}/build*

  static-analysis:
    name: Static Analysis (cppcheck)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    # No dependencies needed - cppcheck analyzes source code, not build artifacts
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache static analysis tools
        id: static-analysis-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
          key: >-
            esp32-ci-static-analysis-${{ runner.os }}-${{
              hashFiles(
                'src/**/*.cpp',
                'src/**/*.h',
                'inc/**/*.cpp',
                'inc/**/*.h',
                'examples/**/*.cpp',
                'examples/**/*.h',
                '.clang-tidy'
              )
            }}
          restore-keys: |
            esp32-ci-static-analysis-${{ runner.os }}-

      - name: Log static analysis cache
        run: |
          echo "Static analysis cache hit - ${{ steps.static-analysis-cache.outputs.cache-hit }}"
          echo "Cache key based on source code changes (src/, inc/, examples/)"

      - name: Verify source code availability
        run: |
          echo "Verifying source code for static analysis..."
          echo "Source directories:"
          ls -la src/ inc/ examples/ 2>/dev/null || echo "Some directories may not exist yet"

      - name: Verify analysis tools
        run: |
          echo "Verifying analysis tools..."
          echo "Note: clang tools now handled by Docker actions"
          echo "Note: cppcheck runs via Docker container"
          docker run --rm ghcr.io/facthunder/cppcheck:latest cppcheck --version
          echo "Analysis tools ready!"

      - name: Run cppcheck with Docker
        run: |
          echo "Running cppcheck static analysis..."
          
          # Run cppcheck once with both XML output and human-readable display
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            ghcr.io/facthunder/cppcheck:latest \
            cppcheck \
              --enable=warning,style,performance,portability \
              --suppress=missingIncludeSystem \
              --inline-suppr \
              --std=c++17 \
              --xml \
              --output-file=/src/cppcheck_report.xml \
              --quiet \
              /src/src/ /src/inc/ /src/examples/ 2>&1 | tee cppcheck_output.txt
          
          # Check results and display appropriate message
          if [ -s cppcheck_report.xml ]; then
            echo "Cppcheck found issues. See the XML report for details."
            echo "Human-readable output:"
            cat cppcheck_output.txt
          else
            echo "No cppcheck issues found"
          fi

      - name: Upload cppcheck report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cppcheck-report
          path: cppcheck_report.xml
          retention-days: 7



  workflow-lint:
    name: Workflow Lint (actionlint + yamllint)
    runs-on: ubuntu-latest
    # No dependencies needed - this job can run independently
    steps:
      - uses: actions/checkout@v4

      - name: Cache workflow lint tools
        id: workflow-lint-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
          key: >
            esp32-ci-workflow-tools-${{ runner.os }}-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            esp32-ci-workflow-tools-${{ runner.os }}-

      - name: Log workflow lint cache
        run: |
          echo "Workflow lint cache hit - ${{ steps.workflow-lint-cache.outputs.cache-hit }}"
          echo "Cache key based on workflow file changes (.github/workflows/*.yml)"

      - name: Verify workflow files
        run: |
          echo "Verifying workflow files for linting..."
          if [ ! -d ".github/workflows" ]; then
            echo "ERROR: Workflows directory missing!"
            exit 1
          fi
          echo "Workflow files verified - proceeding with linting"

      - name: Install yamllint
        run: |
          if ! command -v yamllint &> /dev/null; then
            echo "Installing yamllint..."
            sudo apt-get update && sudo apt-get install -y yamllint
          else
            echo "yamllint already installed: $(yamllint --version)"
          fi

      - name: Run yamllint
        run: yamllint .github/workflows/

      - name: Install actionlint
        run: |
          if ! command -v actionlint &> /dev/null; then
            echo "Installing actionlint..."
            # Try package manager first for better reliability
            if command -v apt-get &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y actionlint
            else
              # Fallback to direct download if package manager fails
              echo "Package manager not available, downloading binary..."
              curl -sSfL -o actionlint \
                https://github.com/rhysd/actionlint/releases/latest/download/actionlint_linux_amd64
              chmod +x actionlint
              sudo mv actionlint /usr/local/bin/
            fi
          else
            echo "actionlint already installed: $(actionlint --version)"
          fi

      - name: Run actionlint
        run: actionlint .github/workflows/*.yml