name: ESP32 Component CI • Build • Size • Static Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IDF_TARGET: esp32c6
  BUILD_PATH: ci_project
  ESP_IDF_VERSIONS: '["release-v5.5"]'

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build ➜ ${{ matrix.idf_version }} · ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        idf_version: [release-v5.5]
        build_type: [Release, Debug]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y clang-format


      - name: ESP-IDF build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.idf_version }}
          target: ${{ env.IDF_TARGET }}
          path: .
          command: |
            idf.py create-project ${{ env.BUILD_PATH }}
            cp examples/esp32/CMakeLists.txt \
              ${{ env.BUILD_PATH }}/CMakeLists.txt
            rm -rf ${{ env.BUILD_PATH }}/main
            cp -r examples/esp32/main ${{ env.BUILD_PATH }}/main
            cp -r examples/esp32/components ${{ env.BUILD_PATH }}/components
            cp -r examples/common ${{ env.BUILD_PATH }}/common
            # Copy source and include directories to maintain relative paths
            cp -r src ${{ env.BUILD_PATH }}/src
            cp -r inc ${{ env.BUILD_PATH }}/inc
            idf.py -C ${{ env.BUILD_PATH }} \
              -DIDF_TARGET=${{ env.IDF_TARGET }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} build
            idf.py -C ${{ env.BUILD_PATH }} size-components > \
              ${{ env.BUILD_PATH }}/build/size.txt
            idf.py -C ${{ env.BUILD_PATH }} size --format json > \
              ${{ env.BUILD_PATH }}/build/size.json
      - name: Format check
        run: |
          # Find and format all C++ source files
          find src/ \( -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" \) -print0 | \
            xargs -0 -r clang-format --dry-run --Werror
          find inc/ \( -name "*.h" -o -name "*.hpp" \) -print0 | \
            xargs -0 -r clang-format --dry-run --Werror
          find examples/ \( -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" \) -print0 | \
            xargs -0 -r clang-format --dry-run --Werror

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fw-${{ matrix.idf_version }}-${{ matrix.build_type }}
          retention-days: 7
          path: |
            ${{ env.BUILD_PATH }}/build/*.bin
            ${{ env.BUILD_PATH }}/build/*.elf
            ${{ env.BUILD_PATH }}/build/*.map
            ${{ env.BUILD_PATH }}/build/size.*

  static-analysis:
    name: Static Analysis (cppcheck + clang-tidy)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Run cppcheck
        uses: deep5050/cppcheck-action@v3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          enable: all
          inconclusive: true
          std: c++17
          include: inc src examples

      - name: Run clang-tidy
        uses: ZedThree/clang-tidy-review@v0.21.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config_file: .clang-tidy
          include: 'src/*,inc/*,examples/*'
          exclude: 'build/*'

  workflow-lint:
    name: Workflow Lint (actionlint + yamllint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install yamllint
        run: sudo apt-get update && sudo apt-get install -y yamllint
        
      - name: Run yamllint
        run: yamllint .github/workflows/
        
      - uses: rhysd/actionlint@v1.6.25
