name: ⚡ Performance ESP32 CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PROJECT_DIR: examples/esp32
  TOOLS_DIR: examples/esp32/scripts
  CACHE_VERSION: v1

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: performance-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Optimized build with aggressive caching
  build-fast:
    uses: N3b3x/hf-espidf-ci-tools/.github/workflows/build.yml@v1
    with:
      project_dir: ${{ env.PROJECT_DIR }}
      project_tools_dir: ${{ env.TOOLS_DIR }}
      clean_build: false  # Always use caches
      build_path: "fast_build_${{ github.run_id }}"
      tools_repo_sha: ${{ github.sha }}

  # Parallel linting with minimal checks
  lint-fast:
    uses: N3b3x/hf-espidf-ci-tools/.github/workflows/lint.yml@v1
    with:
      paths: "src/**,inc/**"
      auto_fix: true
      files_changed_only: true  # Only check changed files
      lines_changed_only: true  # Only check changed lines
      style: "file"
      tidy_checks: "readability-*"  # Minimal checks for speed

  # Quick security scan
  security-quick:
    uses: N3b3x/hf-espidf-ci-tools/.github/workflows/security.yml@v1
    with:
      project_dir: ${{ env.PROJECT_DIR }}
      project_tools_dir: ${{ env.TOOLS_DIR }}
      scan_type: "dependencies"  # Only dependency scan for speed
      run_codeql: false
      tools_repo_sha: ${{ github.sha }}

  # Fast link check
  link-check-fast:
    uses: N3b3x/hf-espidf-ci-tools/.github/workflows/link-check.yml@v1
    with:
      paths: "README.md,*.md"  # Only check main docs
      fail_on_errors: false  # Don't fail on broken links for speed

  # Performance monitoring
  performance-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check build times
        run: |
          echo "## ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "Build completed in: ${{ github.run_duration }}" >> $GITHUB_STEP_SUMMARY
          echo "Cache hit rate: High (optimized configuration)" >> $GITHUB_STEP_SUMMARY
