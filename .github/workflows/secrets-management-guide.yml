name: Secrets Management Guide • Best Practices • Demo

# This workflow demonstrates proper GitHub Secrets management
# and provides examples for securely handling sensitive information

on:
  workflow_dispatch:
    inputs:
      demo_type:
        description: 'Type of secrets management demo'
        required: false
        default: 'guide'
        type: choice
        options:
          - 'guide'
          - 'validation'
          - 'setup'

permissions:
  contents: read
  issues: write

env:
  # Example of using organization-level secrets
  # These would be configured in GitHub repository settings
  ORGANIZATION_API_KEY: ${{ secrets.ORG_API_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  
  # Example of environment-specific secrets
  PRODUCTION_SECRET: ${{ secrets.PRODUCTION_SECRET }}
  STAGING_SECRET: ${{ secrets.STAGING_SECRET }}
  
  # Example of service-specific secrets
  ESP_IDF_REGISTRY_TOKEN: ${{ secrets.ESP_IDF_REGISTRY_TOKEN }}
  COMPONENT_REGISTRY_KEY: ${{ secrets.COMPONENT_REGISTRY_KEY }}

defaults:
  run:
    shell: bash

jobs:
  # Job 1: Secrets Management Guide
  secrets-guide:
    name: GitHub Secrets Management Guide
    runs-on: ubuntu-latest
    if: github.event.inputs.demo_type == 'guide' || github.event.inputs.demo_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate Secrets Management Guide
        run: |
          {
            echo "# 🔐 GitHub Secrets Management Guide"
            echo "## For HardFOC Internal Interface Wrapper Project"
            echo ""
            echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
          } > secrets-management-guide.md
          
          # Introduction
          cat >> secrets-management-guide.md << 'EOF'
          ## 🎯 Overview
          
          This guide provides comprehensive instructions for securely managing sensitive 
          information in the HardFOC Internal Interface Wrapper project using GitHub Secrets.
          
          ## 🔑 Types of Secrets We Manage
          
          ### 1. ESP-IDF Development Secrets
          - **ESP_IDF_REGISTRY_TOKEN**: Token for accessing ESP-IDF component registry
          - **COMPONENT_REGISTRY_KEY**: Key for publishing components to registries
          - **ESPTOOL_ENCRYPTION_KEY**: Key for flash encryption (production only)
          
          ### 2. CI/CD Pipeline Secrets
          - **CODECOV_TOKEN**: Token for code coverage reporting
          - **SONAR_TOKEN**: Token for SonarQube analysis
          - **DOCKER_HUB_TOKEN**: Token for Docker image publishing
          
          ### 3. WiFi Testing Secrets
          - **TEST_WIFI_SSID**: Test WiFi network name
          - **TEST_WIFI_PASSWORD**: Test WiFi network password
          - **TEST_ENTERPRISE_USERNAME**: Enterprise WiFi username
          - **TEST_ENTERPRISE_PASSWORD**: Enterprise WiFi password
          
          ### 4. Hardware Testing Secrets
          - **CAN_ENCRYPTION_KEY**: Key for CAN bus encryption testing
          - **I2C_DEVICE_AUTH_TOKEN**: Authentication token for secure I2C devices
          - **SPI_SECURE_KEY**: Key for secure SPI communication testing
          
          ## 🛡️ Security Best Practices
          
          ### Repository-Level Secrets
          
          1. **Navigate to Repository Settings**
             ```
             Repository → Settings → Secrets and variables → Actions
             ```
          
          2. **Add New Repository Secret**
             - Click "New repository secret"
             - Enter secret name (e.g., `ESP_IDF_REGISTRY_TOKEN`)
             - Enter secret value
             - Click "Add secret"
          
          ### Environment-Specific Secrets
          
          1. **Create Environments**
             ```
             Repository → Settings → Environments
             ```
             - Create: `development`, `staging`, `production`
          
          2. **Configure Environment Secrets**
             - Different values for each environment
             - Production secrets have additional protection rules
          
          ### Organization-Level Secrets
          
          1. **For secrets shared across repositories**
             ```
             Organization → Settings → Secrets and variables → Actions
             ```
          
          ## 📋 Required Secrets Setup Checklist
          
          ### ✅ Essential Secrets (Required)
          - [ ] `TEST_WIFI_SSID` - WiFi network for testing
          - [ ] `TEST_WIFI_PASSWORD` - WiFi password for testing
          - [ ] `ESP_IDF_REGISTRY_TOKEN` - ESP-IDF component registry access
          
          ### 🔒 Production Secrets (Production Environment Only)
          - [ ] `PRODUCTION_WIFI_SSID` - Production WiFi network
          - [ ] `PRODUCTION_WIFI_PASSWORD` - Production WiFi password
          - [ ] `ESPTOOL_ENCRYPTION_KEY` - Flash encryption key
          - [ ] `SECURE_BOOT_KEY` - Secure boot signing key
          
          ### 🧪 Testing Secrets (Development/Staging)
          - [ ] `TEST_ENTERPRISE_USERNAME` - Enterprise WiFi testing
          - [ ] `TEST_ENTERPRISE_PASSWORD` - Enterprise WiFi testing
          - [ ] `CAN_ENCRYPTION_KEY` - CAN bus encryption testing
          - [ ] `I2C_DEVICE_AUTH_TOKEN` - Secure I2C device testing
          
          ### 🚀 CI/CD Integration Secrets
          - [ ] `CODECOV_TOKEN` - Code coverage reporting
          - [ ] `SONAR_TOKEN` - Static analysis integration
          - [ ] `DOCKER_HUB_TOKEN` - Container registry access
          
          ## 🔧 Usage Examples in Workflows
          
          ### Basic Secret Usage
          ```yaml
          env:
            WIFI_SSID: ${{ secrets.TEST_WIFI_SSID }}
            WIFI_PASSWORD: ${{ secrets.TEST_WIFI_PASSWORD }}
          
          steps:
            - name: Configure WiFi for testing
              run: |
                echo "Configuring WiFi: $WIFI_SSID"
                # Never echo the password directly!
                echo "Password configured: ${WIFI_PASSWORD:0:3}***"
          ```
          
          ### Environment-Specific Secrets
          ```yaml
          jobs:
            production-deploy:
              environment: production
              steps:
                - name: Deploy with production secrets
                  env:
                    ENCRYPTION_KEY: ${{ secrets.ESPTOOL_ENCRYPTION_KEY }}
                  run: |
                    esptool.py encrypt_flash $ENCRYPTION_KEY firmware.bin
          ```
          
          ### Conditional Secret Usage
          ```yaml
          steps:
            - name: Use secrets only if available
              if: ${{ secrets.ESP_IDF_REGISTRY_TOKEN != '' }}
              env:
                REGISTRY_TOKEN: ${{ secrets.ESP_IDF_REGISTRY_TOKEN }}
              run: |
                idf.py upload-component
          ```
          
          ## ⚠️ Security Warnings
          
          ### ❌ Never Do This
          ```yaml
          # DON'T: Echo secrets directly
          - run: echo "Token: ${{ secrets.API_TOKEN }}"
          
          # DON'T: Pass secrets to untrusted actions
          - uses: untrusted-action@v1
            with:
              api_key: ${{ secrets.API_KEY }}
          
          # DON'T: Use secrets in repository names or URLs
          - run: git clone https://${{ secrets.TOKEN }}@github.com/user/repo.git
          ```
          
          ### ✅ Do This Instead
          ```yaml
          # DO: Mask sensitive output
          - run: |
              echo "Token configured: ${API_TOKEN:0:8}***"
              echo "::add-mask::$API_TOKEN"
          
          # DO: Use established, trusted actions
          - uses: actions/checkout@v4
            with:
              token: ${{ secrets.GITHUB_TOKEN }}
          
          # DO: Validate secret format before use
          - run: |
              if [[ ! "$API_TOKEN" =~ ^[a-zA-Z0-9]{32}$ ]]; then
                echo "Invalid token format"
                exit 1
              fi
          ```
          
          ## 🔄 Secret Rotation Strategy
          
          ### Regular Rotation Schedule
          - **Production secrets**: Every 90 days
          - **Development secrets**: Every 180 days
          - **CI/CD tokens**: Every 365 days
          
          ### Emergency Rotation
          1. Immediately rotate if:
             - Secret possibly exposed in logs
             - Team member leaves organization
             - Security incident detected
          
          2. Update secret in GitHub
          3. Update all dependent systems
          4. Verify all workflows still function
          
          ## 📞 Support and Troubleshooting
          
          ### Common Issues
          
          1. **Secret not found error**
             - Verify secret name spelling
             - Check repository/environment access
             - Confirm secret is set in correct scope
          
          2. **Permission denied**
             - Verify workflow permissions
             - Check environment protection rules
             - Confirm organization policies
          
          3. **Secret appears in logs**
             - GitHub automatically masks known secrets
             - For custom patterns, use `::add-mask::`
             - Review workflow output carefully
          
          ### Getting Help
          - Create issue with label `security`
          - Contact project maintainers
          - Review GitHub Secrets documentation
          
          ---
          
          **🔒 Remember**: Secrets are powerful tools. Use them responsibly and follow 
          security best practices to protect sensitive information.
          EOF
          
      - name: Validate current secrets configuration
        run: |
          {
            echo "🔍 Validating Secrets Configuration"
            echo "================================="
            echo ""
            
            # Check if essential secrets are available
            echo "### Current Secrets Status"
            echo ""
          } >> secrets-management-guide.md
          
          # Test for required secrets (without exposing values)
          if [ -n "$ESP_IDF_REGISTRY_TOKEN" ]; then
            echo "- ✅ ESP_IDF_REGISTRY_TOKEN: Configured" >> secrets-management-guide.md
          else
            echo "- ❌ ESP_IDF_REGISTRY_TOKEN: Not configured" >> secrets-management-guide.md
          fi
          
          if [ -n "$ORGANIZATION_API_KEY" ]; then
            echo "- ✅ ORGANIZATION_API_KEY: Configured" >> secrets-management-guide.md
          else
            echo "- ❌ ORGANIZATION_API_KEY: Not configured" >> secrets-management-guide.md
          fi
          
          # Add setup recommendations
          {
            echo ""
            echo "### Setup Recommendations"
            echo ""
          } >> secrets-management-guide.md
          
          missing_secrets=0
          
          if [ -z "$ESP_IDF_REGISTRY_TOKEN" ]; then
            {
              echo "1. **Set up ESP_IDF_REGISTRY_TOKEN**"
              echo "   - Navigate to Repository Settings → Secrets and variables → Actions"
              echo "   - Add new secret: ESP_IDF_REGISTRY_TOKEN"
              echo "   - Value: Your ESP-IDF component registry token"
              echo ""
            } >> secrets-management-guide.md
            missing_secrets=$((missing_secrets + 1))
          fi
          
          if [ -z "$ORGANIZATION_API_KEY" ]; then
            {
              echo "2. **Set up ORGANIZATION_API_KEY**"
              echo "   - Navigate to Repository Settings → Secrets and variables → Actions"
              echo "   - Add new secret: ORGANIZATION_API_KEY"
              echo "   - Value: Your organization API key"
              echo ""
            } >> secrets-management-guide.md
            missing_secrets=$((missing_secrets + 1))
          fi
          
          if [ $missing_secrets -eq 0 ]; then
            echo "✅ **All essential secrets are configured!**" >> secrets-management-guide.md
          else
            echo "⚠️ **$missing_secrets essential secret(s) need configuration**" >> secrets-management-guide.md
          fi
          
      - name: Upload secrets management guide
        uses: actions/upload-artifact@v4
        with:
          name: secrets-management-guide
          path: secrets-management-guide.md
          retention-days: 365  # Keep guide available for a year

  # Job 2: Secrets Validation
  secrets-validation:
    name: Validate Secrets Configuration
    runs-on: ubuntu-latest
    if: github.event.inputs.demo_type == 'validation'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate ESP-IDF secrets
        run: |
          echo "🔍 Validating ESP-IDF related secrets..."
          
          # Check ESP-IDF registry token format
          if [ -n "$ESP_IDF_REGISTRY_TOKEN" ]; then
            echo "✅ ESP_IDF_REGISTRY_TOKEN is configured"
            # Validate token format (basic check without exposing value)
            token_length=${#ESP_IDF_REGISTRY_TOKEN}
            if [ "$token_length" -ge 32 ]; then
              echo "✅ Token length appears valid ($token_length chars)"
            else
              echo "⚠️ Token length may be invalid ($token_length chars)"
            fi
          else
            echo "❌ ESP_IDF_REGISTRY_TOKEN is not configured"
          fi
          
      - name: Validate WiFi testing secrets
        run: |
          echo "🔍 Validating WiFi testing secrets..."
          
          # Check WiFi credentials for testing
          if [ -n "${{ secrets.TEST_WIFI_SSID }}" ]; then
            echo "✅ TEST_WIFI_SSID is configured"
          else
            echo "❌ TEST_WIFI_SSID is not configured"
          fi
          
          if [ -n "${{ secrets.TEST_WIFI_PASSWORD }}" ]; then
            echo "✅ TEST_WIFI_PASSWORD is configured"
            # Validate password strength (basic check)
            pwd_length=${#TEST_WIFI_PASSWORD}
            if [ "$pwd_length" -ge 8 ]; then
              echo "✅ Password length meets minimum requirements"
            else
              echo "⚠️ Password may be too short for WPA2/WPA3"
            fi
          else
            echo "❌ TEST_WIFI_PASSWORD is not configured"
          fi
          
      - name: Generate validation report
        run: |
          {
            echo "# 🔍 Secrets Validation Report"
            echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            
            echo "## Validation Results"
            echo ""
          } > validation-report.md
          
          # Count configured vs required secrets
          configured=0
          required=6
          
          # Test each secret
          secrets=("ESP_IDF_REGISTRY_TOKEN" "ORGANIZATION_API_KEY" "DATABASE_URL" \
            "PRODUCTION_SECRET" "STAGING_SECRET" "COMPONENT_REGISTRY_KEY")
          
          for secret_name in "${secrets[@]}"; do
            secret_var="${!secret_name}"
            if [ -n "$secret_var" ]; then
              echo "- ✅ $secret_name: Configured" >> validation-report.md
              configured=$((configured + 1))
            else
              echo "- ❌ $secret_name: Not configured" >> validation-report.md
            fi
          done
          
          {
            echo ""
            echo "## Summary"
            echo "- **Configured**: $configured/$required secrets"
            echo "- **Coverage**: $(( configured * 100 / required ))%"
          } >> validation-report.md
          
          if [ "$configured" -eq "$required" ]; then
            echo "- **Status**: ✅ All secrets configured" >> validation-report.md
          else
            echo "- **Status**: ⚠️ Missing $(( required - configured )) secret(s)" >> validation-report.md
          fi
          
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-validation-report
          path: validation-report.md
          retention-days: 30

  # Job 3: Interactive Setup Assistant
  setup-assistant:
    name: Secrets Setup Assistant
    runs-on: ubuntu-latest
    if: github.event.inputs.demo_type == 'setup'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate setup instructions
        run: |
          {
            echo "# 🚀 Secrets Setup Assistant"
            echo "## Step-by-Step Configuration Guide"
            echo ""
            echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
          } > setup-instructions.md
          
          cat >> setup-instructions.md << 'EOF'
          ## 🎯 Quick Setup Checklist
          
          Follow these steps to configure all required secrets for the HardFOC Internal Interface Wrapper project:
          
          ### Step 1: Access Repository Settings
          1. Navigate to your repository on GitHub
          2. Click on **Settings** tab
          3. In the left sidebar, click **Secrets and variables** → **Actions**
          
          ### Step 2: Configure Essential Secrets
          
          #### 🔑 ESP-IDF Development Secrets
          ```
          Secret Name: ESP_IDF_REGISTRY_TOKEN
          Description: Token for ESP-IDF component registry access
          How to get: Register at https://components.espressif.com and generate API token
          Required: Yes
          ```
          
          ```
          Secret Name: COMPONENT_REGISTRY_KEY
          Description: Key for publishing components to registries
          How to get: Generate in ESP-IDF component manager
          Required: For component publishing
          ```
          
          #### 📡 WiFi Testing Secrets
          ```
          Secret Name: TEST_WIFI_SSID
          Description: WiFi network name for automated testing
          Example: "TestNetwork_2.4GHz"
          Required: For WiFi testing
          ```
          
          ```
          Secret Name: TEST_WIFI_PASSWORD
          Description: WiFi network password for automated testing
          Requirements: 8+ characters for WPA2/WPA3
          Required: For WiFi testing
          ```
          
          #### 🏢 Enterprise WiFi (Optional)
          ```
          Secret Name: TEST_ENTERPRISE_USERNAME
          Description: Username for enterprise WiFi testing
          Required: For enterprise WiFi testing only
          ```
          
          ```
          Secret Name: TEST_ENTERPRISE_PASSWORD
          Description: Password for enterprise WiFi testing
          Required: For enterprise WiFi testing only
          ```
          
          ### Step 3: Configure CI/CD Integration Secrets
          
          #### 📊 Code Quality Integration
          ```
          Secret Name: CODECOV_TOKEN
          Description: Token for uploading code coverage reports
          How to get: Sign up at codecov.io and link repository
          Required: For coverage reporting
          ```
          
          ```
          Secret Name: SONAR_TOKEN
          Description: Token for SonarQube static analysis
          How to get: Create account at sonarcloud.io
          Required: For static analysis
          ```
          
          ### Step 4: Production Environment Secrets
          
          ⚠️ **Important**: Only configure these for production environment!
          
          ```
          Secret Name: ESPTOOL_ENCRYPTION_KEY
          Description: Key for flash encryption in production
          Format: 32-byte hex string
          Environment: Production only
          ```
          
          ```
          Secret Name: SECURE_BOOT_KEY
          Description: Key for secure boot signing
          Format: RSA private key (PEM format)
          Environment: Production only
          ```
          
          ### Step 5: Verification
          
          After configuring secrets, verify the setup by:
          
          1. **Run the Secrets Validation workflow**
             - Go to **Actions** tab
             - Select "Secrets Management Guide"
             - Click "Run workflow"
             - Choose "validation" option
          
          2. **Check the validation report**
             - Download the validation report artifact
             - Verify all required secrets are configured
          
          3. **Test with a sample workflow**
             - Create a test PR to trigger security audit
             - Verify workflows complete successfully
          
          ## 🔧 Advanced Configuration
          
          ### Environment-Specific Secrets
          
          1. **Create Environments**
             - Repository Settings → Environments
             - Create: `development`, `staging`, `production`
          
          2. **Configure Environment Protection Rules**
             - Require reviewers for production
             - Set deployment branches
             - Configure wait timers
          
          3. **Add Environment-Specific Secrets**
             - Different API keys for each environment
             - Environment-specific credentials
             - Separate encryption keys
          
          ### Organization-Level Secrets
          
          For secrets shared across multiple repositories:
          
          1. **Organization Settings**
             - Organization → Settings → Secrets and variables → Actions
          
          2. **Configure Shared Secrets**
             - Organization API keys
             - Shared service credentials
             - Common configuration values
          
          ## 🔒 Security Best Practices
          
          ### Secret Naming Convention
          - Use UPPER_SNAKE_CASE
          - Include environment prefix for env-specific secrets
          - Use descriptive names
          
          ### Value Guidelines
          - Use strong, unique values
          - Rotate regularly (90-180 days)
          - Never share between environments
          
          ### Access Control
          - Limit repository access
          - Use environment protection rules
          - Monitor secret usage in audit logs
          
          ## 🆘 Troubleshooting
          
          ### Common Issues
          
          1. **"Secret not found" error**
             - Check secret name spelling
             - Verify secret is in correct repository/environment
             - Confirm workflow has proper permissions
          
          2. **Permission denied accessing secret**
             - Check repository collaborator permissions
             - Verify environment protection rules
             - Confirm organization policies
          
          3. **Secret value appears truncated**
             - Check for special characters
             - Verify no trailing whitespace
             - Confirm proper encoding
          
          ### Getting Help
          - Review GitHub Secrets documentation
          - Check repository issues for known problems
          - Contact project maintainers
          
          ---
          
          **🎉 Congratulations!** You've completed the secrets setup for secure HardFOC development.
          EOF
          
      - name: Create setup completion issue
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `## 🔐 Secrets Setup Tracking
            
            This issue tracks the completion of secrets setup for the HardFOC Internal Interface Wrapper project.
            
            ### Setup Checklist
            
            #### Essential Secrets
            - [ ] \`ESP_IDF_REGISTRY_TOKEN\` - ESP-IDF component registry access
            - [ ] \`TEST_WIFI_SSID\` - WiFi network for testing
            - [ ] \`TEST_WIFI_PASSWORD\` - WiFi password for testing
            
            #### CI/CD Integration
            - [ ] \`CODECOV_TOKEN\` - Code coverage reporting
            - [ ] \`SONAR_TOKEN\` - Static analysis integration
            
            #### Production Environment (Optional)
            - [ ] \`ESPTOOL_ENCRYPTION_KEY\` - Flash encryption key
            - [ ] \`SECURE_BOOT_KEY\` - Secure boot signing key
            
            ### Verification Steps
            - [ ] Run secrets validation workflow
            - [ ] Review validation report
            - [ ] Test workflows with secrets
            
            ### Resources
            - [Secrets Management Guide](\
              ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [GitHub Secrets Documentation](https://docs.github.com/en/actions/security-guides/encrypted-secrets)
            
            ---
            *This issue was automatically created by the Secrets Setup Assistant workflow.*`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔐 Secrets Setup Completion Tracking',
              body: issueBody,
              labels: ['security', 'setup', 'documentation']
            });
            
            console.log(`Created issue #${issue.data.number}`);
            
      - name: Upload setup instructions
        uses: actions/upload-artifact@v4
        with:
          name: secrets-setup-instructions
          path: setup-instructions.md
          retention-days: 365